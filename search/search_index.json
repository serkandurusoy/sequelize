{
    "docs": [
        {
            "location": "/", 
            "text": "Sequelize\n\n\n\n\n\nSequelize is a promise-based ORM for Node.js. It supports the dialects PostgreSQL, MySQL, SQLite and MSSQL and features solid transaction support, relations, read replication and\nmore.\n\n\nInstallation\n\n\nExample usage\n\n\nvar Sequelize = require('sequelize');\nvar sequelize = new Sequelize('database', 'username', 'password');\n\nvar User = sequelize.define('user', {\n  username: Sequelize.STRING,\n  birthday: Sequelize.DATE\n});\n\nsequelize.sync().then(function() {\n  return User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20)\n  });\n}).then(function(jane) {\n  console.log(jane.get({\n    plain: true\n  }));\n});", 
            "title": "Home"
        }, 
        {
            "location": "/#example-usage", 
            "text": "var Sequelize = require('sequelize');\nvar sequelize = new Sequelize('database', 'username', 'password');\n\nvar User = sequelize.define('user', {\n  username: Sequelize.STRING,\n  birthday: Sequelize.DATE\n});\n\nsequelize.sync().then(function() {\n  return User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20)\n  });\n}).then(function(jane) {\n  console.log(jane.get({\n    plain: true\n  }));\n});", 
            "title": "Example usage"
        }, 
        {
            "location": "/docs/getting-started/", 
            "text": "Installation\n\n\nSequelize is available via NPM.\n\n\n$ npm install --save sequelize\n\n# And one of the following:\n$ npm install --save pg pg-hstore\n$ npm install --save mysql2\n$ npm install --save sqlite3\n$ npm install --save tedious // MSSQL\n\n\n\n\nSetting up a connection\n\n\nSequelize will setup a connection pool on initialization so you should ideally only ever create one instance per database.\n\n\nvar sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: 'mysql'|'sqlite'|'postgres'|'mssql',\n\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n\n  // SQLite only\n  storage: 'path/to/database.sqlite'\n});\n\n// Or you can simply use a connection uri\nvar sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');\n\n\n\n\nThe Sequelize constructor takes a whole slew of options that are available via the \nAPI reference\n.\n\n\nTest the connection\n\n\nYou can use the \n.authenticate()\n function like this to test the connection.\n\n\nsequelize\n  .authenticate()\n  .then(function(err) {\n    console.log('Connection has been established successfully.');\n  })\n  .catch(function (err) {\n    console.log('Unable to connect to the database:', err);\n  });\n\n\n\n\nYour first model\n\n\nModels are defined with \nsequelize.define('name', {attributes}, {options})\n.\n\n\nvar User = sequelize.define('user', {\n  firstName: {\n    type: Sequelize.STRING\n  },\n  lastName: {\n    type: Sequelize.STRING\n  }\n});\n\n// force: true will drop the table if it already exists\nUser.sync({force: true}).then(function () {\n  // Table created\n  return User.create({\n    firstName: 'John',\n    lastName: 'Hancock'\n  });\n});\n\n\n\n\nYou can read more about creating models at \nModel API reference\n\n\nYour first query\n\n\nUser.findAll().then(function(users) {\n  console.log(users)\n})\n\n\n\n\nYou can read more about finder functions on models like \n.findAll()\n at \nData retrieval\n or how to do specific queries like \nWHERE\n and \nJSONB\n at \nQuerying\n.\n\n\nApplication wide model options\n\n\nThe Sequelize constructor takes a \ndefine\n option which will be used as the default options for all defined models.\n\n\nvar sequelize = new Sequelize('connectionUri', {\n  define: {\n    timestamps: false // true by default\n  }\n});\n\nvar User = sequelize.define('user', {}); // timestamps is false by default\nvar Post = sequelize.define('post', {}, {\n  timestamps: true // timestamps will now be true\n});\n\n\n\n\nPromises\n\n\nSequelize uses promises to control async control-flow. If you are unfamiliar with how promises work, don't worry, you can read up on them here, \nhere\n and \nhere\n\n\nBasically, a promise represents a value which will be present at some point - \"I promise you I will give you a result or an error at some point\". This means that\n\n\n// DON'T DO THIS\nuser = User.findOne()\n\nconsole.log(user.get('firstName'));\n\n\n\n\nwill never work!\n This is because \nuser\n is a promise object, not a data row from the DB. The right way to do it is:\n\n\nUser.findOne().then(function (user) {\n    console.log(user.get('firstName'));\n});\n\n\n\n\nOnce you've got the hang of what promises are and how they work, use the \nbluebird API reference\n as your go-to tool. In particular, you'll probably be using \n.all\n a lot.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/docs/getting-started/#installation", 
            "text": "Sequelize is available via NPM.  $ npm install --save sequelize\n\n# And one of the following:\n$ npm install --save pg pg-hstore\n$ npm install --save mysql2\n$ npm install --save sqlite3\n$ npm install --save tedious // MSSQL", 
            "title": "Installation"
        }, 
        {
            "location": "/docs/getting-started/#setting-up-a-connection", 
            "text": "Sequelize will setup a connection pool on initialization so you should ideally only ever create one instance per database.  var sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: 'mysql'|'sqlite'|'postgres'|'mssql',\n\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n\n  // SQLite only\n  storage: 'path/to/database.sqlite'\n});\n\n// Or you can simply use a connection uri\nvar sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');  The Sequelize constructor takes a whole slew of options that are available via the  API reference .", 
            "title": "Setting up a connection"
        }, 
        {
            "location": "/docs/getting-started/#test-the-connection", 
            "text": "You can use the  .authenticate()  function like this to test the connection.  sequelize\n  .authenticate()\n  .then(function(err) {\n    console.log('Connection has been established successfully.');\n  })\n  .catch(function (err) {\n    console.log('Unable to connect to the database:', err);\n  });", 
            "title": "Test the connection"
        }, 
        {
            "location": "/docs/getting-started/#your-first-model", 
            "text": "Models are defined with  sequelize.define('name', {attributes}, {options}) .  var User = sequelize.define('user', {\n  firstName: {\n    type: Sequelize.STRING\n  },\n  lastName: {\n    type: Sequelize.STRING\n  }\n});\n\n// force: true will drop the table if it already exists\nUser.sync({force: true}).then(function () {\n  // Table created\n  return User.create({\n    firstName: 'John',\n    lastName: 'Hancock'\n  });\n});  You can read more about creating models at  Model API reference", 
            "title": "Your first model"
        }, 
        {
            "location": "/docs/getting-started/#your-first-query", 
            "text": "User.findAll().then(function(users) {\n  console.log(users)\n})  You can read more about finder functions on models like  .findAll()  at  Data retrieval  or how to do specific queries like  WHERE  and  JSONB  at  Querying .", 
            "title": "Your first query"
        }, 
        {
            "location": "/docs/getting-started/#application-wide-model-options", 
            "text": "The Sequelize constructor takes a  define  option which will be used as the default options for all defined models.  var sequelize = new Sequelize('connectionUri', {\n  define: {\n    timestamps: false // true by default\n  }\n});\n\nvar User = sequelize.define('user', {}); // timestamps is false by default\nvar Post = sequelize.define('post', {}, {\n  timestamps: true // timestamps will now be true\n});", 
            "title": "Application wide model options"
        }, 
        {
            "location": "/docs/getting-started/#promises", 
            "text": "Sequelize uses promises to control async control-flow. If you are unfamiliar with how promises work, don't worry, you can read up on them here,  here  and  here  Basically, a promise represents a value which will be present at some point - \"I promise you I will give you a result or an error at some point\". This means that  // DON'T DO THIS\nuser = User.findOne()\n\nconsole.log(user.get('firstName'));  will never work!  This is because  user  is a promise object, not a data row from the DB. The right way to do it is:  User.findOne().then(function (user) {\n    console.log(user.get('firstName'));\n});  Once you've got the hang of what promises are and how they work, use the  bluebird API reference  as your go-to tool. In particular, you'll probably be using  .all  a lot.", 
            "title": "Promises"
        }, 
        {
            "location": "/docs/schema/", 
            "text": "Syncing\n\n\nsequelize.sync()\n will, based on your model definitions, create any missing tables.\nIf \nforce: true\n it will first drop tables before recreating them.\n\n\nMigrations / Manual schema changes\n\n\nSequelize has a \nsister library\n for handling execution and logging of migration tasks.\nSequelize provides a list of ways to programmatically create or change a table schema.\n\n\ncreateTable\n\n\naddColumn\n\n\nchangeColumn\n\n\nremoveColumn\n\n\naddIndex\n\n\nremoveIndex\n\n\naddConstraint\n\n\nremoveConstraint", 
            "title": "Working with table schemas"
        }, 
        {
            "location": "/docs/schema/#syncing", 
            "text": "sequelize.sync()  will, based on your model definitions, create any missing tables.\nIf  force: true  it will first drop tables before recreating them.", 
            "title": "Syncing"
        }, 
        {
            "location": "/docs/schema/#migrations-manual-schema-changes", 
            "text": "Sequelize has a  sister library  for handling execution and logging of migration tasks.\nSequelize provides a list of ways to programmatically create or change a table schema.", 
            "title": "Migrations / Manual schema changes"
        }, 
        {
            "location": "/docs/schema/#createtable", 
            "text": "", 
            "title": "createTable"
        }, 
        {
            "location": "/docs/schema/#addcolumn", 
            "text": "", 
            "title": "addColumn"
        }, 
        {
            "location": "/docs/schema/#changecolumn", 
            "text": "", 
            "title": "changeColumn"
        }, 
        {
            "location": "/docs/schema/#removecolumn", 
            "text": "", 
            "title": "removeColumn"
        }, 
        {
            "location": "/docs/schema/#addindex", 
            "text": "", 
            "title": "addIndex"
        }, 
        {
            "location": "/docs/schema/#removeindex", 
            "text": "", 
            "title": "removeIndex"
        }, 
        {
            "location": "/docs/schema/#addconstraint", 
            "text": "", 
            "title": "addConstraint"
        }, 
        {
            "location": "/docs/schema/#removeconstraint", 
            "text": "", 
            "title": "removeConstraint"
        }, 
        {
            "location": "/docs/models-definition/", 
            "text": "Definition\n\n\nTo define mappings between a model and a table, use the \ndefine\n method. Sequelize will then automatically add the attributes \ncreatedAt\n and \nupdatedAt\n to it. So you will be able to know when the database entry went into the db and when it was updated the last time. If you do not want timestamps on your models, only want some timestamps, or you are working with an existing database where the columns are named something else, jump straight on to \nconfiguration \nto see how to do that.\n\n\nvar Project = sequelize.define('project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n})\n\nvar Task = sequelize.define('task', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT,\n  deadline: Sequelize.DATE\n})\n\n\n\n\nYou can also set some options on each column:\n\n\nvar Foo = sequelize.define('foo', {\n // instantiating will automatically set the flag to true if not set\n flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true},\n\n // default values for dates =\n current time\n myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },\n\n // setting allowNull to false will add NOT NULL to the column, which means an error will be\n // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n // is not null before querying the DB, look at the validations section below.\n title: { type: Sequelize.STRING, allowNull: false},\n\n // Creating two objects with the same value will throw an error. The unique property can be either a\n // boolean, or a string. If you provide the same string for multiple columns, they will form a\n // composite unique key.\n uniqueOne: { type: Sequelize.STRING,  unique: 'compositeIndex'},\n uniqueTwo: { type: Sequelize.INTEGER, unique: 'compositeIndex'}\n\n // The unique property is simply a shorthand to create a unique index.\n someUnique: {type: Sequelize.STRING, unique: true}\n // It's exactly the same as creating the index in the model's options.\n {someUnique: {type: Sequelize.STRING}},\n {indexes: [{unique: true, fields: ['someUnique']}]}\n\n // Go on reading for further information about primary keys\n identifier: { type: Sequelize.STRING, primaryKey: true},\n\n // autoIncrement can be used to create auto_incrementing integer columns\n incrementMe: { type: Sequelize.INTEGER, autoIncrement: true },\n\n // Comments can be specified for each field for MySQL and PG\n hasComment: { type: Sequelize.INTEGER, comment: \nI'm a comment!\n },\n\n // You can specify a custom field name via the \nfield\n attribute:\n fieldWithUnderscores: { type: Sequelize.STRING, field: \nfield_with_underscores\n },\n\n // It is possible to create foreign keys:\n bar_id: {\n   type: Sequelize.INTEGER,\n\n   references: {\n     // This is a reference to another model\n     model: Bar,\n\n     // This is the column name of the referenced model\n     key: 'id',\n\n     // This declares when to check the foreign key constraint. PostgreSQL only.\n     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n   }\n }\n})\n\n\n\n\nThe comment option can also be used on a table, see \nmodel configuration\n\n\nData types\n\n\nBelow are some of the datatypes supported by sequelize. For a full and updated list, see \nDataTypes\n.\n\n\nSequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT('tiny')                // TINYTEXT\n\nSequelize.INTEGER                     // INTEGER\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 12)               // FLOAT(11,12)\n\nSequelize.REAL                        // REAL        PostgreSQL only.\nSequelize.REAL(11)                    // REAL(11)    PostgreSQL only.\nSequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 12)              // DOUBLE(11,12)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nSequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nSequelize.DATEONLY                    // DATE without time.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'\nSequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.\n\nSequelize.JSON                        // JSON column. PostgreSQL only.\nSequelize.JSONB                       // JSONB column. PostgreSQL only.\n\nSequelize.BLOB                        // BLOB (bytea for PostgreSQL)\nSequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)\n\nSequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)\n\nSequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.\n\nSequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT')           // Spatial column with geomerty type.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT', 4326)     // Spatial column with geomerty type and SRID.  PostgreSQL (with PostGIS) or MySQL only.\n\n\n\n\nThe BLOB data type allows you to insert data both as strings and as buffers. When you do a find or findAll on a model which has a BLOB column. that data will always be returned as a buffer.\n\n\nIf you are working with the PostgreSQL TIMESTAMP WITHOUT TIME ZONE and you need to parse it to a different timezone, please use the pg library's own parser:\n\n\nrequire('pg').types.setTypeParser(1114, function(stringValue) {\n  return new Date(stringValue + \n+0000\n);\n  // e.g., UTC offset. Use any offset that you would like.\n});\n\n\n\n\nIn addition to the type mentioned above, integer, bigint, float and double also support unsigned and zerofill properties, which can be combined in any order:\nBe aware that this does not apply for PostgreSQL!\n\n\nSequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED\nSequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED\nSequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL\nSequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL\n\n\n\n\nThe examples above only show integer, but the same can be done with bigint and float\n\n\nUsage in object notation:\n\n\n// for enums:\nsequelize.define('model', {\n  states: {\n    type:   Sequelize.ENUM,\n    values: ['active', 'pending', 'deleted']\n  }\n})\n\n\n\n\nRange types\n\n\nSince range types have extra information for their bound inclusion/exclusion it's not\nvery straightforward to just use a tuple to represent them in javascript.\n\n\nWhen supplying ranges as values you can choose from the following APIs:\n\n\n// defaults to '[\n2016-01-01 00:00:00+00:00\n, \n2016-02-01 00:00:00+00:00\n)'\n// inclusive lower bound, exclusive upper bound\nTimeline.create({ range: [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))] });\n\n// control inclusion\nconst range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];\nrange.inclusive = false; // '()'\nrange.inclusive = [false, true]; // '(]'\nrange.inclusive = true; // '[]'\nrange.inclusive = [true, false]; // '[)'\n\n// or as a single expression\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\n];\n// '(\n2016-01-01 00:00:00+00:00\n, \n2016-02-01 00:00:00+00:00\n]'\n\n// composite form\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  new Date(Date.UTC(2016, 1, 1)),\n];\n// '(\n2016-01-01 00:00:00+00:00\n, \n2016-02-01 00:00:00+00:00\n)'\n\nTimeline.create({ range });\n\n\n\n\nHowever, please note that whenever you get back a value that is range you will\nreceive:\n\n\n// stored value: (\n2016-01-01 00:00:00+00:00\n, \n2016-02-01 00:00:00+00:00\n]\nrange // [Date, Date]\nrange.inclusive // [false, true]\n\n\n\n\nMake sure you turn that into a serializable format before serialization since array\nextra properties will not be serialized.\n\n\nSpecial Cases\n\n\n// empty range:\nTimeline.create({ range: [] }); // range = 'empty'\n\n// Unbounded range:\nTimeline.create({ range: [null, null] }); // range = '[,)'\n// range = '[,\n2016-01-01 00:00:00+00:00\n)'\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\n\n// Infinite range:\n// range = '[-infinity,\n2016-01-01 00:00:00+00:00\n)'\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });\n\n\n\n\n\nDeferrable\n\n\nWhen you specify a foreign key column it is optionally possible to declare the deferrable\ntype in PostgreSQL. The following options are available:\n\n\n// Defer all foreign key constraint check to the end of a transaction\nSequelize.Deferrable.INITIALLY_DEFERRED\n\n// Immediately check the foreign key constraints\nSequelize.Deferrable.INITIALLY_IMMEDIATE\n\n// Don't defer the checks at all\nSequelize.Deferrable.NOT\n\n\n\n\nThe last option is the default in PostgreSQL and won't allow you to dynamically change\nthe rule in a transaction. See \nthe transaction section\n for further information.\n\n\nGetters \n setters\n\n\nIt is possible to define 'object-property' getters and setter functions on your models, these can be used both for 'protecting' properties that map to database fields and for defining 'pseudo' properties.\n\n\nGetters and Setters can be defined in 2 ways (you can mix and match these 2 approaches):\n\n\n\n\nas part of a single property definition\n\n\nas part of a model options\n\n\n\n\nN.B:\n If a getter or setter is defined in both places then the function found in the relevant property definition will always take precedence.\n\n\nDefining as part of a property\n\n\nvar Employee = sequelize.define('employee', {\n  name:  {\n    type     : Sequelize.STRING,\n    allowNull: false,\n    get      : function()  {\n      var title = this.getDataValue('title');\n      // 'this' allows you to access attributes of the instance\n      return this.getDataValue('name') + ' (' + title + ')';\n    },\n  },\n  title: {\n    type     : Sequelize.STRING,\n    allowNull: false,\n    set      : function(val) {\n      this.setDataValue('title', val.toUpperCase());\n    }\n  }\n});\n\nEmployee\n  .create({ name: 'John Doe', title: 'senior engineer' })\n  .then(function(employee) {\n    console.log(employee.get('name')); // John Doe (SENIOR ENGINEER)\n    console.log(employee.get('title')); // SENIOR ENGINEER\n  })\n\n\n\n\nDefining as part of the model options\n\n\nBelow is an example of defining the getters and setters in the model options. The \nfullName\n getter,  is an example of how you can define pseudo properties on your models - attributes which are not actually part of your database schema. In fact, pseudo properties can be defined in two ways: using model getters, or by using a column with the \nVIRTUAL\n datatype\n. Virtual datatypes can have validations, while getters for virtual attributes cannot.\n\n\nNote that the \nthis.firstname\n and \nthis.lastname\n references in the \nfullName\n getter function will trigger a call to the respective getter functions. If you do not want that then use the \ngetDataValue()\n method to access the raw value (see below).\n\n\nvar Foo = sequelize.define('foo', {\n  firstname: Sequelize.STRING,\n  lastname: Sequelize.STRING\n}, {\n  getterMethods   : {\n    fullName       : function()  { return this.firstname + ' ' + this.lastname }\n  },\n\n  setterMethods   : {\n    fullName       : function(value) {\n        var names = value.split(' ');\n\n        this.setDataValue('firstname', names.slice(0, -1).join(' '));\n        this.setDataValue('lastname', names.slice(-1).join(' '));\n    },\n  }\n});\n\n\n\n\nHelper functions for use inside getter and setter definitions\n\n\n\n\nretrieving an underlying property value - always use \nthis.getDataValue()\n\n\n\n\n/* a getter for 'title' property */\nfunction() {\n    return this.getDataValue('title');\n}\n\n\n\n\n\n\nsetting an underlying property value - always use \nthis.setDataValue()\n\n\n\n\n/* a setter for 'title' property */\nfunction(title) {\n    return this.setDataValue('title', title.toString().toLowerCase());\n}\n\n\n\n\nN.B:\n It is important to stick to using the \nsetDataValue()\n and \ngetDataValue()\n functions (as opposed to accessing the underlying \"data values\" property directly) - doing so protects your custom getters and setters from changes in the underlying model implementations.\n\n\nValidations\n\n\nModel validations, allow you to specify format/content/inheritance validations for each attribute of the model.\n\n\nValidations are automatically run on \ncreate\n, \nupdate\n and \nsave\n. You can also call \nvalidate()\n to manually validate an instance.\n\n\nThe validations are implemented by \nvalidator.js\n.\n\n\nvar ValidateMe = sequelize.define('foo', {\n  foo: {\n    type: Sequelize.STRING,\n    validate: {\n      is: [\n^[a-z]+$\n,'i'],     // will only allow letters\n      is: /^[a-z]+$/i,          // same as the previous example using real RegExp\n      not: [\n[a-z]\n,'i'],       // will not allow letters\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (http://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \n_abc\n will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter: \n2011-11-05\n,    // only allow date strings after a specific date\n      isBefore: \n2011-11-05\n,   // only allow date strings before a specific date\n      max: 23,                  // only allow values\n      min: 23,                  // only allow values \n= 23\n      isArray: true,            // only allow arrays\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // custom validations are also possible:\n      isEven: function(value) {\n        if(parseInt(value) % 2 != 0) {\n          throw new Error('Only even values are allowed!')\n        // we also are in the model's context here, so this.otherField\n        // would get the value of otherField if it existed\n        }\n      }\n    }\n  }\n});\n\n\n\n\nNote that where multiple arguments need to be passed to the built-in validation functions, the arguments to be passed must be in an array. But if a single array argument is to be passed, for instance an array of acceptable strings for \nisIn\n, this will be interpreted as multiple string arguments instead of one array argument. To work around this pass a single-length array of arguments, such as \n[['one', 'two']]\n as shown above.\n\n\nTo use a custom error message instead of that provided by validator.js, use an object instead of the plain value or array of arguments, for example a validator which needs no argument can be given a custom message with\n\n\nisInt: {\n  msg: \nMust be an integer number of pennies\n\n}\n\n\n\n\nor if arguments need to also be passed add an\nargs\nproperty:\n\n\nisIn: {\n  args: [['en', 'zh']],\n  msg: \nMust be English or Chinese\n\n}\n\n\n\n\nWhen using custom validator functions the error message will be whatever message the thrown\nError\nobject holds.\n\n\nSee \nthe validator.js project\n for more details on the built in validation methods.\n\n\nHint: \nYou can also define a custom function for the logging part. Just pass a function. The first parameter will be the string that is logged.\n\n\nValidators and \nallowNull\n\n\nIf a particular field of a model is set to allow null (with \nallowNull: true\n) and that value has been set to \nnull\n , its validators do not run. This means you can, for instance, have a string field which validates its length to be at least 5 characters, but which also allows\nnull\n.\n\n\nModel validations\n\n\nValidations can also be defined to check the model after the field-specific validators. Using this you could, for example, ensure either neither of \nlatitude\n and \nlongitude\n are set or both, and fail if one but not the other is set.\n\n\nModel validator methods are called with the model object's context and are deemed to fail if they throw an error, otherwise pass. This is just the same as with custom field-specific validators.\n\n\nAny error messages collected are put in the validation result object alongside the field validation errors, with keys named after the failed validation method's key in the \nvalidate\n option object. Even though there can only be one error message for each model validation method at any one time, it is presented as a single string error in an array, to maximize consistency with the field errors.\n\n\nAn example:\n\n\nvar Pub = Sequelize.define('pub', {\n  name: { type: Sequelize.STRING },\n  address: { type: Sequelize.STRING },\n  latitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -90, max: 90 }\n  },\n  longitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -180, max: 180 }\n  },\n}, {\n  validate: {\n    bothCoordsOrNone: function() {\n      if ((this.latitude === null) !== (this.longitude === null)) {\n        throw new Error('Require either both latitude and longitude or neither')\n      }\n    }\n  }\n})\n\n\n\n\nIn this simple case an object fails validation if either latitude or longitude is given, but not both. If we try to build one with an out-of-range latitude and no longitude, \nraging_bullock_arms.validate()\n might return\n\n\n{\n  'latitude': ['Invalid number: latitude'],\n  'bothCoordsOrNone': ['Require either both latitude and longitude or neither']\n}\n\n\n\n\nConfiguration\n\n\nYou can also influence the way Sequelize handles your column names:\n\n\nvar Bar = sequelize.define('bar', { /* bla */ }, {\n  // don't add the timestamp attributes (updatedAt, createdAt)\n  timestamps: false,\n\n  // don't delete database entries but set the newly added attribute deletedAt\n  // to the current date (when deletion was done). paranoid will only work if\n  // timestamps are enabled\n  paranoid: true,\n\n  // don't use camelcase for automatically added attributes but underscore style\n  // so updatedAt will be updated_at\n  underscored: true,\n\n  // disable the modification of table names; By default, sequelize will automatically\n  // transform all passed model names (first parameter of define) into plural.\n  // if you don't want that, set the following\n  freezeTableName: true,\n\n  // define the table's name\n  tableName: 'my_very_custom_table_name'\n})\n\n\n\n\nIf you want sequelize to handle timestamps, but only want some of them, or want your timestamps to be called something else, you can override each column individually:\n\n\nvar Foo = sequelize.define('foo',  { /* bla */ }, {\n  // don't forget to enable timestamps!\n  timestamps: true,\n\n  // I don't want createdAt\n  createdAt: false,\n\n  // I want updatedAt to actually be called updateTimestamp\n  updatedAt: 'updateTimestamp'\n\n  // And deletedAt to be called destroyTime (remember to enable paranoid for this to work)\n  deletedAt: 'destroyTime',\n  paranoid: true\n})\n\n\n\n\nYou can also change the database engine, e.g. to MyISAM. InnoDB is the default.\n\n\nvar Person = sequelize.define('person', { /* attributes */ }, {\n  engine: 'MYISAM'\n})\n\n// or globally\nvar sequelize = new Sequelize(db, user, pw, {\n  define: { engine: 'MYISAM' }\n})\n\n\n\n\nFinally you can specify a comment for the table in MySQL and PG\n\n\nvar Person = sequelize.define('person', { /* attributes */ }, {\n  comment: \nI'm a table comment!\n\n})\n\n\n\n\nImport\n\n\nYou can also store your model definitions in a single file using the \nimport\n method. The returned object is exactly the same as defined in the imported file's function. Since \nv1:5.0\n of Sequelize the import is cached, so you won't run into troubles when calling the import of a file twice or more often.\n\n\n// in your server file - e.g. app.js\nvar Project = sequelize.import(__dirname + \n/path/to/models/project\n)\n\n// The model definition is done in /path/to/models/project.js\n// As you might notice, the DataTypes are the very same as explained above\nmodule.exports = function(sequelize, DataTypes) {\n  return sequelize.define(\nproject\n, {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  })\n}\n\n\n\n\nThe \nimport\n method can also accept a callback as an argument.\n\n\nsequelize.import('project', function(sequelize, DataTypes) {\n  return sequelize.define(\nproject\n, {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  })\n})\n\n\n\n\nDatabase synchronization\n\n\nWhen starting a new project you won't have a database structure and using Sequelize you won't need to. Just specify your model structures and let the library do the rest. Currently supported is the creation and deletion of tables:\n\n\n// Create the tables:\nProject.sync()\nTask.sync()\n\n// Force the creation!\nProject.sync({force: true}) // this will drop the table first and re-create it afterwards\n\n// drop the tables:\nProject.drop()\nTask.drop()\n\n// event handling:\nProject.[sync|drop]().then(function() {\n  // ok ... everything is nice!\n}).catch(function(error) {\n  // oooh, did you enter wrong database credentials?\n})\n\n\n\n\nBecause synchronizing and dropping all of your tables might be a lot of lines to write, you can also let Sequelize do the work for you:\n\n\n// Sync all models that aren't already in the database\nsequelize.sync()\n\n// Force sync all models\nsequelize.sync({force: true})\n\n// Drop all tables\nsequelize.drop()\n\n// emit handling:\nsequelize.[sync|drop]().then(function() {\n  // woot woot\n}).catch(function(error) {\n  // whooops\n})\n\n\n\n\nBecause \n.sync({ force: true })\n is destructive operation, you can use \nmatch\n option as an additional safety check.\n\nmatch\n option tells sequelize to match a regex against the database name before syncing - a safety check for cases\nwhere \nforce: true\n is used in tests but not live code.\n\n\n// This will run .sync() only if database name ends with '_test'\nsequelize.sync({ force: true, match: /_test$/ });\n\n\n\n\nExpansion of models\n\n\nSequelize Models are ES6 classes. You can very easily add custom instance or class level methods.\n\n\nvar User = sequelize.define('user', { firstname: Sequelize.STRING });\n\n// Adding a class level method\nUser.classLevelMethod = function() {\n  return 'foo';\n};\n\n// Adding an instance level method\nUser.prototype.instanceLevelMethod = function() {\n  return 'bar';\n};\n\n\n\n\nOf course you can also access the instance's data and generate virtual getters:\n\n\nvar User = sequelize.define('user', { firstname: Sequelize.STRING, lastname: Sequelize.STRING });\n\nUser.prototype.getFullname = function() {\n  return [this.firstname, this.lastname].join(' ');\n};\n\n// Example:\nUser.build({ firstname: 'foo', lastname: 'bar' }).getFullname() // 'foo bar'\n\n\n\n\nIndexes\n\n\nSequelize supports adding indexes to the model definition which will be created during \nModel.sync()\n or \nsequelize.sync\n.\n\n\nsequelize.define('user', {}, {\n  indexes: [\n    // Create a unique index on email\n    {\n      unique: true,\n      fields: ['email']\n    },\n\n    // Creates a gin index on data with the jsonb_path_ops operator\n    {\n      fields: ['data'],\n      using: 'gin',\n      operator: 'jsonb_path_ops'\n    },\n\n    // By default index name will be [table]_[fields]\n    // Creates a multi column partial index\n    {\n      name: 'public_by_author',\n      fields: ['author', 'status'],\n      where: {\n        status: 'public'\n      }\n    },\n\n    // A BTREE index with a ordered field\n    {\n      name: 'title_index',\n      method: 'BTREE',\n      fields: ['author', {attribute: 'title', collate: 'en_US', order: 'DESC', length: 5}]\n    }\n  ]\n})", 
            "title": "Definition"
        }, 
        {
            "location": "/docs/models-definition/#definition", 
            "text": "To define mappings between a model and a table, use the  define  method. Sequelize will then automatically add the attributes  createdAt  and  updatedAt  to it. So you will be able to know when the database entry went into the db and when it was updated the last time. If you do not want timestamps on your models, only want some timestamps, or you are working with an existing database where the columns are named something else, jump straight on to  configuration  to see how to do that.  var Project = sequelize.define('project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n})\n\nvar Task = sequelize.define('task', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT,\n  deadline: Sequelize.DATE\n})  You can also set some options on each column:  var Foo = sequelize.define('foo', {\n // instantiating will automatically set the flag to true if not set\n flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true},\n\n // default values for dates =  current time\n myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },\n\n // setting allowNull to false will add NOT NULL to the column, which means an error will be\n // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n // is not null before querying the DB, look at the validations section below.\n title: { type: Sequelize.STRING, allowNull: false},\n\n // Creating two objects with the same value will throw an error. The unique property can be either a\n // boolean, or a string. If you provide the same string for multiple columns, they will form a\n // composite unique key.\n uniqueOne: { type: Sequelize.STRING,  unique: 'compositeIndex'},\n uniqueTwo: { type: Sequelize.INTEGER, unique: 'compositeIndex'}\n\n // The unique property is simply a shorthand to create a unique index.\n someUnique: {type: Sequelize.STRING, unique: true}\n // It's exactly the same as creating the index in the model's options.\n {someUnique: {type: Sequelize.STRING}},\n {indexes: [{unique: true, fields: ['someUnique']}]}\n\n // Go on reading for further information about primary keys\n identifier: { type: Sequelize.STRING, primaryKey: true},\n\n // autoIncrement can be used to create auto_incrementing integer columns\n incrementMe: { type: Sequelize.INTEGER, autoIncrement: true },\n\n // Comments can be specified for each field for MySQL and PG\n hasComment: { type: Sequelize.INTEGER, comment:  I'm a comment!  },\n\n // You can specify a custom field name via the  field  attribute:\n fieldWithUnderscores: { type: Sequelize.STRING, field:  field_with_underscores  },\n\n // It is possible to create foreign keys:\n bar_id: {\n   type: Sequelize.INTEGER,\n\n   references: {\n     // This is a reference to another model\n     model: Bar,\n\n     // This is the column name of the referenced model\n     key: 'id',\n\n     // This declares when to check the foreign key constraint. PostgreSQL only.\n     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n   }\n }\n})  The comment option can also be used on a table, see  model configuration", 
            "title": "Definition"
        }, 
        {
            "location": "/docs/models-definition/#data-types", 
            "text": "Below are some of the datatypes supported by sequelize. For a full and updated list, see  DataTypes .  Sequelize.STRING                      // VARCHAR(255)\nSequelize.STRING(1234)                // VARCHAR(1234)\nSequelize.STRING.BINARY               // VARCHAR BINARY\nSequelize.TEXT                        // TEXT\nSequelize.TEXT('tiny')                // TINYTEXT\n\nSequelize.INTEGER                     // INTEGER\nSequelize.BIGINT                      // BIGINT\nSequelize.BIGINT(11)                  // BIGINT(11)\n\nSequelize.FLOAT                       // FLOAT\nSequelize.FLOAT(11)                   // FLOAT(11)\nSequelize.FLOAT(11, 12)               // FLOAT(11,12)\n\nSequelize.REAL                        // REAL        PostgreSQL only.\nSequelize.REAL(11)                    // REAL(11)    PostgreSQL only.\nSequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.\n\nSequelize.DOUBLE                      // DOUBLE\nSequelize.DOUBLE(11)                  // DOUBLE(11)\nSequelize.DOUBLE(11, 12)              // DOUBLE(11,12)\n\nSequelize.DECIMAL                     // DECIMAL\nSequelize.DECIMAL(10, 2)              // DECIMAL(10,2)\n\nSequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nSequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nSequelize.DATEONLY                    // DATE without time.\nSequelize.BOOLEAN                     // TINYINT(1)\n\nSequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'\nSequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.\n\nSequelize.JSON                        // JSON column. PostgreSQL only.\nSequelize.JSONB                       // JSONB column. PostgreSQL only.\n\nSequelize.BLOB                        // BLOB (bytea for PostgreSQL)\nSequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)\n\nSequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)\n\nSequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.\nSequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.\n\nSequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.\n\nSequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT')           // Spatial column with geomerty type.  PostgreSQL (with PostGIS) or MySQL only.\nSequelize.GEOMETRY('POINT', 4326)     // Spatial column with geomerty type and SRID.  PostgreSQL (with PostGIS) or MySQL only.  The BLOB data type allows you to insert data both as strings and as buffers. When you do a find or findAll on a model which has a BLOB column. that data will always be returned as a buffer.  If you are working with the PostgreSQL TIMESTAMP WITHOUT TIME ZONE and you need to parse it to a different timezone, please use the pg library's own parser:  require('pg').types.setTypeParser(1114, function(stringValue) {\n  return new Date(stringValue +  +0000 );\n  // e.g., UTC offset. Use any offset that you would like.\n});  In addition to the type mentioned above, integer, bigint, float and double also support unsigned and zerofill properties, which can be combined in any order:\nBe aware that this does not apply for PostgreSQL!  Sequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED\nSequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED\nSequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL\nSequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL\nSequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL  The examples above only show integer, but the same can be done with bigint and float  Usage in object notation:  // for enums:\nsequelize.define('model', {\n  states: {\n    type:   Sequelize.ENUM,\n    values: ['active', 'pending', 'deleted']\n  }\n})", 
            "title": "Data types"
        }, 
        {
            "location": "/docs/models-definition/#range-types", 
            "text": "Since range types have extra information for their bound inclusion/exclusion it's not\nvery straightforward to just use a tuple to represent them in javascript.  When supplying ranges as values you can choose from the following APIs:  // defaults to '[ 2016-01-01 00:00:00+00:00 ,  2016-02-01 00:00:00+00:00 )'\n// inclusive lower bound, exclusive upper bound\nTimeline.create({ range: [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))] });\n\n// control inclusion\nconst range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];\nrange.inclusive = false; // '()'\nrange.inclusive = [false, true]; // '(]'\nrange.inclusive = true; // '[]'\nrange.inclusive = [true, false]; // '[)'\n\n// or as a single expression\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\n];\n// '( 2016-01-01 00:00:00+00:00 ,  2016-02-01 00:00:00+00:00 ]'\n\n// composite form\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  new Date(Date.UTC(2016, 1, 1)),\n];\n// '( 2016-01-01 00:00:00+00:00 ,  2016-02-01 00:00:00+00:00 )'\n\nTimeline.create({ range });  However, please note that whenever you get back a value that is range you will\nreceive:  // stored value: ( 2016-01-01 00:00:00+00:00 ,  2016-02-01 00:00:00+00:00 ]\nrange // [Date, Date]\nrange.inclusive // [false, true]  Make sure you turn that into a serializable format before serialization since array\nextra properties will not be serialized.", 
            "title": "Range types"
        }, 
        {
            "location": "/docs/models-definition/#special-cases", 
            "text": "// empty range:\nTimeline.create({ range: [] }); // range = 'empty'\n\n// Unbounded range:\nTimeline.create({ range: [null, null] }); // range = '[,)'\n// range = '[, 2016-01-01 00:00:00+00:00 )'\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\n\n// Infinite range:\n// range = '[-infinity, 2016-01-01 00:00:00+00:00 )'\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });", 
            "title": "Special Cases"
        }, 
        {
            "location": "/docs/models-definition/#deferrable", 
            "text": "When you specify a foreign key column it is optionally possible to declare the deferrable\ntype in PostgreSQL. The following options are available:  // Defer all foreign key constraint check to the end of a transaction\nSequelize.Deferrable.INITIALLY_DEFERRED\n\n// Immediately check the foreign key constraints\nSequelize.Deferrable.INITIALLY_IMMEDIATE\n\n// Don't defer the checks at all\nSequelize.Deferrable.NOT  The last option is the default in PostgreSQL and won't allow you to dynamically change\nthe rule in a transaction. See  the transaction section  for further information.", 
            "title": "Deferrable"
        }, 
        {
            "location": "/docs/models-definition/#getters-setters", 
            "text": "It is possible to define 'object-property' getters and setter functions on your models, these can be used both for 'protecting' properties that map to database fields and for defining 'pseudo' properties.  Getters and Setters can be defined in 2 ways (you can mix and match these 2 approaches):   as part of a single property definition  as part of a model options   N.B:  If a getter or setter is defined in both places then the function found in the relevant property definition will always take precedence.", 
            "title": "Getters &amp; setters"
        }, 
        {
            "location": "/docs/models-definition/#defining-as-part-of-a-property", 
            "text": "var Employee = sequelize.define('employee', {\n  name:  {\n    type     : Sequelize.STRING,\n    allowNull: false,\n    get      : function()  {\n      var title = this.getDataValue('title');\n      // 'this' allows you to access attributes of the instance\n      return this.getDataValue('name') + ' (' + title + ')';\n    },\n  },\n  title: {\n    type     : Sequelize.STRING,\n    allowNull: false,\n    set      : function(val) {\n      this.setDataValue('title', val.toUpperCase());\n    }\n  }\n});\n\nEmployee\n  .create({ name: 'John Doe', title: 'senior engineer' })\n  .then(function(employee) {\n    console.log(employee.get('name')); // John Doe (SENIOR ENGINEER)\n    console.log(employee.get('title')); // SENIOR ENGINEER\n  })", 
            "title": "Defining as part of a property"
        }, 
        {
            "location": "/docs/models-definition/#defining-as-part-of-the-model-options", 
            "text": "Below is an example of defining the getters and setters in the model options. The  fullName  getter,  is an example of how you can define pseudo properties on your models - attributes which are not actually part of your database schema. In fact, pseudo properties can be defined in two ways: using model getters, or by using a column with the  VIRTUAL  datatype . Virtual datatypes can have validations, while getters for virtual attributes cannot.  Note that the  this.firstname  and  this.lastname  references in the  fullName  getter function will trigger a call to the respective getter functions. If you do not want that then use the  getDataValue()  method to access the raw value (see below).  var Foo = sequelize.define('foo', {\n  firstname: Sequelize.STRING,\n  lastname: Sequelize.STRING\n}, {\n  getterMethods   : {\n    fullName       : function()  { return this.firstname + ' ' + this.lastname }\n  },\n\n  setterMethods   : {\n    fullName       : function(value) {\n        var names = value.split(' ');\n\n        this.setDataValue('firstname', names.slice(0, -1).join(' '));\n        this.setDataValue('lastname', names.slice(-1).join(' '));\n    },\n  }\n});", 
            "title": "Defining as part of the model options"
        }, 
        {
            "location": "/docs/models-definition/#helper-functions-for-use-inside-getter-and-setter-definitions", 
            "text": "retrieving an underlying property value - always use  this.getDataValue()   /* a getter for 'title' property */\nfunction() {\n    return this.getDataValue('title');\n}   setting an underlying property value - always use  this.setDataValue()   /* a setter for 'title' property */\nfunction(title) {\n    return this.setDataValue('title', title.toString().toLowerCase());\n}  N.B:  It is important to stick to using the  setDataValue()  and  getDataValue()  functions (as opposed to accessing the underlying \"data values\" property directly) - doing so protects your custom getters and setters from changes in the underlying model implementations.", 
            "title": "Helper functions for use inside getter and setter definitions"
        }, 
        {
            "location": "/docs/models-definition/#validations", 
            "text": "Model validations, allow you to specify format/content/inheritance validations for each attribute of the model.  Validations are automatically run on  create ,  update  and  save . You can also call  validate()  to manually validate an instance.  The validations are implemented by  validator.js .  var ValidateMe = sequelize.define('foo', {\n  foo: {\n    type: Sequelize.STRING,\n    validate: {\n      is: [ ^[a-z]+$ ,'i'],     // will only allow letters\n      is: /^[a-z]+$/i,          // same as the previous example using real RegExp\n      not: [ [a-z] ,'i'],       // will not allow letters\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (http://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so  _abc  will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter:  2011-11-05 ,    // only allow date strings after a specific date\n      isBefore:  2011-11-05 ,   // only allow date strings before a specific date\n      max: 23,                  // only allow values\n      min: 23,                  // only allow values  = 23\n      isArray: true,            // only allow arrays\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // custom validations are also possible:\n      isEven: function(value) {\n        if(parseInt(value) % 2 != 0) {\n          throw new Error('Only even values are allowed!')\n        // we also are in the model's context here, so this.otherField\n        // would get the value of otherField if it existed\n        }\n      }\n    }\n  }\n});  Note that where multiple arguments need to be passed to the built-in validation functions, the arguments to be passed must be in an array. But if a single array argument is to be passed, for instance an array of acceptable strings for  isIn , this will be interpreted as multiple string arguments instead of one array argument. To work around this pass a single-length array of arguments, such as  [['one', 'two']]  as shown above.  To use a custom error message instead of that provided by validator.js, use an object instead of the plain value or array of arguments, for example a validator which needs no argument can be given a custom message with  isInt: {\n  msg:  Must be an integer number of pennies \n}  or if arguments need to also be passed add an args property:  isIn: {\n  args: [['en', 'zh']],\n  msg:  Must be English or Chinese \n}  When using custom validator functions the error message will be whatever message the thrown Error object holds.  See  the validator.js project  for more details on the built in validation methods.  Hint:  You can also define a custom function for the logging part. Just pass a function. The first parameter will be the string that is logged.", 
            "title": "Validations"
        }, 
        {
            "location": "/docs/models-definition/#validators-and-allownull", 
            "text": "If a particular field of a model is set to allow null (with  allowNull: true ) and that value has been set to  null  , its validators do not run. This means you can, for instance, have a string field which validates its length to be at least 5 characters, but which also allows null .", 
            "title": "Validators and allowNull"
        }, 
        {
            "location": "/docs/models-definition/#model-validations", 
            "text": "Validations can also be defined to check the model after the field-specific validators. Using this you could, for example, ensure either neither of  latitude  and  longitude  are set or both, and fail if one but not the other is set.  Model validator methods are called with the model object's context and are deemed to fail if they throw an error, otherwise pass. This is just the same as with custom field-specific validators.  Any error messages collected are put in the validation result object alongside the field validation errors, with keys named after the failed validation method's key in the  validate  option object. Even though there can only be one error message for each model validation method at any one time, it is presented as a single string error in an array, to maximize consistency with the field errors.  An example:  var Pub = Sequelize.define('pub', {\n  name: { type: Sequelize.STRING },\n  address: { type: Sequelize.STRING },\n  latitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -90, max: 90 }\n  },\n  longitude: {\n    type: Sequelize.INTEGER,\n    allowNull: true,\n    defaultValue: null,\n    validate: { min: -180, max: 180 }\n  },\n}, {\n  validate: {\n    bothCoordsOrNone: function() {\n      if ((this.latitude === null) !== (this.longitude === null)) {\n        throw new Error('Require either both latitude and longitude or neither')\n      }\n    }\n  }\n})  In this simple case an object fails validation if either latitude or longitude is given, but not both. If we try to build one with an out-of-range latitude and no longitude,  raging_bullock_arms.validate()  might return  {\n  'latitude': ['Invalid number: latitude'],\n  'bothCoordsOrNone': ['Require either both latitude and longitude or neither']\n}", 
            "title": "Model validations"
        }, 
        {
            "location": "/docs/models-definition/#configuration", 
            "text": "You can also influence the way Sequelize handles your column names:  var Bar = sequelize.define('bar', { /* bla */ }, {\n  // don't add the timestamp attributes (updatedAt, createdAt)\n  timestamps: false,\n\n  // don't delete database entries but set the newly added attribute deletedAt\n  // to the current date (when deletion was done). paranoid will only work if\n  // timestamps are enabled\n  paranoid: true,\n\n  // don't use camelcase for automatically added attributes but underscore style\n  // so updatedAt will be updated_at\n  underscored: true,\n\n  // disable the modification of table names; By default, sequelize will automatically\n  // transform all passed model names (first parameter of define) into plural.\n  // if you don't want that, set the following\n  freezeTableName: true,\n\n  // define the table's name\n  tableName: 'my_very_custom_table_name'\n})  If you want sequelize to handle timestamps, but only want some of them, or want your timestamps to be called something else, you can override each column individually:  var Foo = sequelize.define('foo',  { /* bla */ }, {\n  // don't forget to enable timestamps!\n  timestamps: true,\n\n  // I don't want createdAt\n  createdAt: false,\n\n  // I want updatedAt to actually be called updateTimestamp\n  updatedAt: 'updateTimestamp'\n\n  // And deletedAt to be called destroyTime (remember to enable paranoid for this to work)\n  deletedAt: 'destroyTime',\n  paranoid: true\n})  You can also change the database engine, e.g. to MyISAM. InnoDB is the default.  var Person = sequelize.define('person', { /* attributes */ }, {\n  engine: 'MYISAM'\n})\n\n// or globally\nvar sequelize = new Sequelize(db, user, pw, {\n  define: { engine: 'MYISAM' }\n})  Finally you can specify a comment for the table in MySQL and PG  var Person = sequelize.define('person', { /* attributes */ }, {\n  comment:  I'm a table comment! \n})", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/models-definition/#import", 
            "text": "You can also store your model definitions in a single file using the  import  method. The returned object is exactly the same as defined in the imported file's function. Since  v1:5.0  of Sequelize the import is cached, so you won't run into troubles when calling the import of a file twice or more often.  // in your server file - e.g. app.js\nvar Project = sequelize.import(__dirname +  /path/to/models/project )\n\n// The model definition is done in /path/to/models/project.js\n// As you might notice, the DataTypes are the very same as explained above\nmodule.exports = function(sequelize, DataTypes) {\n  return sequelize.define( project , {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  })\n}  The  import  method can also accept a callback as an argument.  sequelize.import('project', function(sequelize, DataTypes) {\n  return sequelize.define( project , {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  })\n})", 
            "title": "Import"
        }, 
        {
            "location": "/docs/models-definition/#database-synchronization", 
            "text": "When starting a new project you won't have a database structure and using Sequelize you won't need to. Just specify your model structures and let the library do the rest. Currently supported is the creation and deletion of tables:  // Create the tables:\nProject.sync()\nTask.sync()\n\n// Force the creation!\nProject.sync({force: true}) // this will drop the table first and re-create it afterwards\n\n// drop the tables:\nProject.drop()\nTask.drop()\n\n// event handling:\nProject.[sync|drop]().then(function() {\n  // ok ... everything is nice!\n}).catch(function(error) {\n  // oooh, did you enter wrong database credentials?\n})  Because synchronizing and dropping all of your tables might be a lot of lines to write, you can also let Sequelize do the work for you:  // Sync all models that aren't already in the database\nsequelize.sync()\n\n// Force sync all models\nsequelize.sync({force: true})\n\n// Drop all tables\nsequelize.drop()\n\n// emit handling:\nsequelize.[sync|drop]().then(function() {\n  // woot woot\n}).catch(function(error) {\n  // whooops\n})  Because  .sync({ force: true })  is destructive operation, you can use  match  option as an additional safety check. match  option tells sequelize to match a regex against the database name before syncing - a safety check for cases\nwhere  force: true  is used in tests but not live code.  // This will run .sync() only if database name ends with '_test'\nsequelize.sync({ force: true, match: /_test$/ });", 
            "title": "Database synchronization"
        }, 
        {
            "location": "/docs/models-definition/#expansion-of-models", 
            "text": "Sequelize Models are ES6 classes. You can very easily add custom instance or class level methods.  var User = sequelize.define('user', { firstname: Sequelize.STRING });\n\n// Adding a class level method\nUser.classLevelMethod = function() {\n  return 'foo';\n};\n\n// Adding an instance level method\nUser.prototype.instanceLevelMethod = function() {\n  return 'bar';\n};  Of course you can also access the instance's data and generate virtual getters:  var User = sequelize.define('user', { firstname: Sequelize.STRING, lastname: Sequelize.STRING });\n\nUser.prototype.getFullname = function() {\n  return [this.firstname, this.lastname].join(' ');\n};\n\n// Example:\nUser.build({ firstname: 'foo', lastname: 'bar' }).getFullname() // 'foo bar'", 
            "title": "Expansion of models"
        }, 
        {
            "location": "/docs/models-definition/#indexes", 
            "text": "Sequelize supports adding indexes to the model definition which will be created during  Model.sync()  or  sequelize.sync .  sequelize.define('user', {}, {\n  indexes: [\n    // Create a unique index on email\n    {\n      unique: true,\n      fields: ['email']\n    },\n\n    // Creates a gin index on data with the jsonb_path_ops operator\n    {\n      fields: ['data'],\n      using: 'gin',\n      operator: 'jsonb_path_ops'\n    },\n\n    // By default index name will be [table]_[fields]\n    // Creates a multi column partial index\n    {\n      name: 'public_by_author',\n      fields: ['author', 'status'],\n      where: {\n        status: 'public'\n      }\n    },\n\n    // A BTREE index with a ordered field\n    {\n      name: 'title_index',\n      method: 'BTREE',\n      fields: ['author', {attribute: 'title', collate: 'en_US', order: 'DESC', length: 5}]\n    }\n  ]\n})", 
            "title": "Indexes"
        }, 
        {
            "location": "/docs/models-usage/", 
            "text": "Data retrieval / Finders\n\n\nFinder methods are intended to query data from the database. They do \nnot\n return plain objects but instead return model instances. Because finder methods return model instances you can call any model instance member on the result as described in the documentation for \ninstances\n.\n\n\nIn this document we'll explore what finder methods can do:\n\n\nfind - Search for one specific element in the database\n\n\n// search for known ids\nProject.findById(123).then(function(project) {\n  // project will be an instance of Project and stores the content of the table entry\n  // with id 123. if such an entry is not defined you will get null\n})\n\n// search for attributes\nProject.findOne({ where: {title: 'aProject'} }).then(function(project) {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n})\n\n\nProject.findOne({\n  where: {title: 'aProject'},\n  attributes: ['id', ['name', 'title']]\n}).then(function(project) {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n  // project.title will contain the name of the project\n})\n\n\n\n\nfindOrCreate - Search for a specific element or create it if not available\n\n\nThe method \nfindOrCreate\n can be used to check if a certain element already exists in the database. If that is the case the method will result in a respective instance. If the element does not yet exist, it will be created.\n\n\nLet's assume we have an empty database with a \nUser\n model which has a \nusername\n and a \njob\n.\n\n\nUser\n  .findOrCreate({where: {username: 'sdepold'}, defaults: {job: 'Technical Lead JavaScript'}})\n  .spread(function(user, created) {\n    console.log(user.get({\n      plain: true\n    }))\n    console.log(created)\n\n    /*\n      {\n        username: 'sdepold',\n        job: 'Technical Lead JavaScript',\n        id: 1,\n        createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),\n        updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)\n      }\n      created: true\n    */\n  })\n\n\n\n\nThe code created a new instance. So when we already have an instance ...\n\n\nUser\n  .create({ username: 'fnord', job: 'omnomnom' })\n  .then(function() {\n    User\n      .findOrCreate({where: {username: 'fnord'}, defaults: {job: 'something else'}})\n      .spread(function(user, created) {\n        console.log(user.get({\n          plain: true\n        }))\n        console.log(created)\n\n        /*\n          {\n            username: 'fnord',\n            job: 'omnomnom',\n            id: 2,\n            createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),\n            updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)\n          }\n          created: false\n        */\n      })\n  })\n\n\n\n\n... the existing entry will not be changed. See the \njob\n of the second user, and the fact that created was false.\n\n\nfindAndCountAll - Search for multiple elements in the database, returns both data and total count\n\n\nThis is a convenience method that combines\nfindAll\n and \ncount\n (see below) this is useful when dealing with queries related to pagination where you want to retrieve data with a \nlimit\n and \noffset\n but also need to know the total number of records that match the query:\n\n\nThe success handler will always receive an object with two properties:\n\n\n\n\ncount\n - an integer, total number records matching the where clause\n\n\nrows\n - an array of objects, the records matching the where clause, within the limit and offset range\n\n\n\n\nProject\n  .findAndCountAll({\n     where: {\n        title: {\n          $like: 'foo%'\n        }\n     },\n     offset: 10,\n     limit: 2\n  })\n  .then(function(result) {\n    console.log(result.count);\n    console.log(result.rows);\n  });\n\n\n\n\nfindAndCountAll\n also supports includes. Only the includes that are marked as \nrequired\n will be added to the count part:\n\n\nSuppose you want to find all users who have a profile attached:\n\n\nUser.findAndCountAll({\n  include: [\n     { model: Profile, required: true}\n  ],\n  limit: 3\n});\n\n\n\n\nBecause the include for \nProfile\n has \nrequired\n set it will result in an inner join, and only the users who have a profile will be counted. If we remove \nrequired\n from the include, both users with and without profiles will be counted. Adding a \nwhere\n clause to the include automatically makes it required:\n\n\nUser.findAndCountAll({\n  include: [\n     { model: Profile, where: { active: true }}\n  ],\n  limit: 3\n});\n\n\n\n\nThe query above will only count users who have an active profile, because \nrequired\n is implicitly set to true when you add a where clause to the include.\n\n\nThe options object that you pass to \nfindAndCountAll\n is the same as for \nfindAll\n (described below).\n\n\nfindAll - Search for multiple elements in the database\n\n\n// find multiple entries\nProject.findAll().then(function(projects) {\n  // projects will be an array of all Project instances\n})\n\n// also possible:\nProject.all().then(function(projects) {\n  // projects will be an array of all Project instances\n})\n\n// search for specific attributes - hash usage\nProject.findAll({ where: { name: 'A Project' } }).then(function(projects) {\n  // projects will be an array of Project instances with the specified name\n})\n\n// search with string replacements\nProject.findAll({ where: [\nid \n ?\n, 25] }).then(function(projects) {\n  // projects will be an array of Projects having a greater id than 25\n})\n\n// search within a specific range\nProject.findAll({ where: { id: [1,2,3] } }).then(function(projects) {\n  // projects will be an array of Projects having the id 1, 2 or 3\n  // this is actually doing an IN query\n})\n\nProject.findAll({\n  where: {\n    id: {\n      $and: {a: 5}           // AND (a = 5)\n      $or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)\n      $gt: 6,                // id \n 6\n      $gte: 6,               // id \n= 6\n      $lt: 10,               // id \n 10\n      $lte: 10,              // id \n= 10\n      $ne: 20,               // id != 20\n      $between: [6, 10],     // BETWEEN 6 AND 10\n      $notBetween: [11, 15], // NOT BETWEEN 11 AND 15\n      $in: [1, 2],           // IN [1, 2]\n      $notIn: [1, 2],        // NOT IN [1, 2]\n      $like: '%hat',         // LIKE '%hat'\n      $notLike: '%hat'       // NOT LIKE '%hat'\n      $iLike: '%hat'         // ILIKE '%hat' (case insensitive)  (PG only)\n      $notILike: '%hat'      // NOT ILIKE '%hat'  (PG only)\n      $overlap: [1, 2]       // \n [1, 2] (PG array overlap operator)\n      $contains: [1, 2]      // @\n [1, 2] (PG array contains operator)\n      $contained: [1, 2]     // \n@ [1, 2] (PG array contained by operator)\n      $any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n    },\n    status: {\n      $not: false,           // status NOT FALSE\n    }\n  }\n})\n\n\n\n\nComplex filtering / OR / NOT queries\n\n\nIt's possible to do complex where queries with multiple levels of nested AND, OR and NOT conditions. In order to do that you can use \n$or\n, \n$and\n or \n$not\n:\n\n\nProject.findOne({\n  where: {\n    name: 'a project',\n    $or: [\n      { id: [1,2,3] },\n      { id: { $gt: 10 } }\n    ]\n  }\n})\n\nProject.findOne({\n  where: {\n    name: 'a project',\n    id: {\n      $or: [\n        [1,2,3],\n        { $gt: 10 }\n      ]\n    }\n  }\n})\n\n\n\n\nBoth pieces of code code will generate the following:\n\n\nSELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'a project'\n   AND (`Projects`.`id` IN (1,2,3) OR `Projects`.`id` \n 10)\n)\nLIMIT 1;\n\n\n\n\n$not\n example:\n\n\nProject.findOne({\n  where: {\n    name: 'a project',\n    $not: [\n      { id: [1,2,3] },\n      { array: { $contains: [3,4,5] } }\n    ]\n  }\n});\n\n\n\n\nWill generate:\n\n\nSELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'a project'\n   AND NOT (`Projects`.`id` IN (1,2,3) OR `Projects`.`array` @\n ARRAY[1,2,3]::INTEGER[])\n)\nLIMIT 1;\n\n\n\n\nManipulating the dataset with limit, offset, order and group\n\n\nTo get more relevant data, you can use limit, offset, order and grouping:\n\n\n// limit the results of the query\nProject.findAll({ limit: 10 })\n\n// step over the first 10 elements\nProject.findAll({ offset: 10 })\n\n// step over the first 10 elements, and take 2\nProject.findAll({ offset: 10, limit: 2 })\n\n\n\n\nThe syntax for grouping and ordering are equal, so below it is only explained with a single example for group, and the rest for order. Everything you see below can also be done for group\n\n\nProject.findAll({order: 'title DESC'})\n// yields ORDER BY title DESC\n\nProject.findAll({group: 'name'})\n// yields GROUP BY name\n\n\n\n\nNotice how in the two examples above, the string provided is inserted verbatim into the query, i.e. column names are not escaped. When you provide a string to order/group, this will always be the case. If you want to escape column names, you should provide an array of arguments, even though you only want to order/group by a single column\n\n\nsomething.findOne({\n  order: [\n    'name',\n    // will return `name`\n    'username DESC',\n    // will return `username DESC` -- i.e. don't do it!\n    ['username', 'DESC'],\n    // will return `username` DESC\n    sequelize.fn('max', sequelize.col('age')),\n    // will return max(`age`)\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    // will return max(`age`) DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    // will return otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']\n    // will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!\n    [{ raw: 'otherfunction(awesomefunction(`col`))' }, 'DESC']\n    // This won't be quoted, but direction will be added\n  ]\n})\n\n\n\n\nTo recap, the elements of the order/group array can be the following:\n\n\n\n\nString - will be quoted\n\n\nArray - first element will be quoted, second will be appended verbatim\n\n\nObject -\n\n\nRaw will be added verbatim without quoting\n\n\nEverything else is ignored, and if raw is not set, the query will fail\n\n\nSequelize.fn and Sequelize.col returns functions and quoted cools\n\n\n\n\nRaw queries\n\n\nSometimes you might be expecting a massive dataset that you just want to display, without manipulation. For each row you select, Sequelize creates an instance with functions for update, delete, get associations etc. If you have thousands of rows, this might take some time. If you only need the raw data and don't want to update anything, you can do like this to get the raw data.\n\n\n// Are you expecting a massive dataset from the DB,\n// and don't want to spend the time building DAOs for each entry?\n// You can pass an extra query option to get the raw data instead:\nProject.findAll({ where: { ... }, raw: true })\n\n\n\n\ncount - Count the occurrences of elements in the database\n\n\nThere is also a method for counting database objects:\n\n\nProject.count().then(function(c) {\n  console.log(\nThere are \n + c + \n projects!\n)\n})\n\nProject.count({ where: [\nid \n ?\n, 25] }).then(function(c) {\n  console.log(\nThere are \n + c + \n projects with an id greater than 25.\n)\n})\n\n\n\n\nmax - Get the greatest value of a specific attribute within a specific table\n\n\nAnd here is a method for getting the max value of an attribute:f\n\n\n/*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.max('age').then(function(max) {\n  // this will return 40\n})\n\nProject.max('age', { where: { age: { lt: 20 } } }).then(function(max) {\n  // will be 10\n})\n\n\n\n\nmin - Get the least value of a specific attribute within a specific table\n\n\nAnd here is a method for getting the min value of an attribute:\n\n\n/*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.min('age').then(function(min) {\n  // this will return 5\n})\n\nProject.min('age', { where: { age: { $gt: 5 } } }).then(function(min) {\n  // will be 10\n})\n\n\n\n\nsum - Sum the value of specific attributes\n\n\nIn order to calculate the sum over a specific column of a table, you can\nuse the \nsum\n method.\n\n\n/*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.sum('age').then(function(sum) {\n  // this will return 55\n})\n\nProject.sum('age', { where: { age: { $gt: 5 } } }).then(function(sum) {\n  // will be 50\n})\n\n\n\n\nEager loading\n\n\nWhen you are retrieving data from the database there is a fair chance that you also want to get associations with the same query - this is called eager loading. The basic idea behind that, is the use of the attribute \ninclude\n when you are calling \nfind\n or \nfindAll\n. Lets assume the following setup:\n\n\nvar User = sequelize.define('user', { name: Sequelize.STRING })\n  , Task = sequelize.define('task', { name: Sequelize.STRING })\n  , Tool = sequelize.define('tool', { name: Sequelize.STRING })\n\nTask.belongsTo(User)\nUser.hasMany(Task)\nUser.hasMany(Tool, { as: 'Instruments' })\n\nsequelize.sync().then(function() {\n  // this is where we continue ...\n})\n\n\n\n\nOK. So, first of all, let's load all tasks with their associated user.\n\n\nTask.findAll({ include: [ User ] }).then(function(tasks) {\n  console.log(JSON.stringify(tasks))\n\n  /*\n    [{\n      \nname\n: \nA Task\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:40.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:40.000Z\n,\n      \nuserId\n: 1,\n      \nuser\n: {\n        \nname\n: \nJohn Doe\n,\n        \nid\n: 1,\n        \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n        \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n\n      }\n    }]\n  */\n})\n\n\n\n\nNotice that the accessor (the \nUser\n property in the resulting instance) is singular because the association is one-to-something.\n\n\nNext thing: Loading of data with many-to-something associations!\n\n\nUser.findAll({ include: [ Task ] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n      \nname\n: \nJohn Doe\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \ntasks\n: [{\n        \nname\n: \nA Task\n,\n        \nid\n: 1,\n        \ncreatedAt\n: \n2013-03-20T20:31:40.000Z\n,\n        \nupdatedAt\n: \n2013-03-20T20:31:40.000Z\n,\n        \nuserId\n: 1\n      }]\n    }]\n  */\n})\n\n\n\n\nNotice that the accessor (the \nTasks\n property in the resulting instance) is plural because the association is many-to-something.\n\n\nIf an association is aliased (using the \nas\n option), you must specify this alias when including the model. Notice how the user's \nTool\ns are aliased as \nInstruments\n above. In order to get that right you have to specify the model you want to load, as well as the alias:\n\n\nUser.findAll({ include: [{ model: Tool, as: 'Instruments' }] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n      \nname\n: \nJohn Doe\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nInstruments\n: [{\n        \nname\n: \nToothpick\n,\n        \nid\n: 1,\n        \ncreatedAt\n: null,\n        \nupdatedAt\n: null,\n        \nuserId\n: 1\n      }]\n    }]\n  */\n})\n\n\n\n\nYou can also include by alias name by specifying a string that matches the association alias:\n\n\nUser.findAll({ include: ['Instruments'] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n      \nname\n: \nJohn Doe\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nInstruments\n: [{\n        \nname\n: \nToothpick\n,\n        \nid\n: 1,\n        \ncreatedAt\n: null,\n        \nupdatedAt\n: null,\n        \nuserId\n: 1\n      }]\n    }]\n  */\n})\n\nUser.findAll({ include: [{ association: 'Instruments' }] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n      \nname\n: \nJohn Doe\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nInstruments\n: [{\n        \nname\n: \nToothpick\n,\n        \nid\n: 1,\n        \ncreatedAt\n: null,\n        \nupdatedAt\n: null,\n        \nuserId\n: 1\n      }]\n    }]\n  */\n})\n\n\n\n\nWhen eager loading we can also filter the associated model using \nwhere\n. This will return all \nUser\ns in which the \nwhere\n clause of \nTool\n model matches rows.\n\n\nUser.findAll({\n    include: [{\n        model: Tool,\n        as: 'Instruments',\n        where: { name: { $like: '%ooth%' } }\n    }]\n}).then(function(users) {\n    console.log(JSON.stringify(users))\n\n    /*\n      [{\n        \nname\n: \nJohn Doe\n,\n        \nid\n: 1,\n        \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n        \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n        \nInstruments\n: [{\n          \nname\n: \nToothpick\n,\n          \nid\n: 1,\n          \ncreatedAt\n: null,\n          \nupdatedAt\n: null,\n          \nuserId\n: 1\n        }]\n      }],\n\n      [{\n        \nname\n: \nJohn Smith\n,\n        \nid\n: 2,\n        \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n        \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n        \nInstruments\n: [{\n          \nname\n: \nToothpick\n,\n          \nid\n: 1,\n          \ncreatedAt\n: null,\n          \nupdatedAt\n: null,\n          \nuserId\n: 1\n        }]\n      }],\n    */\n  })\n\n\n\n\nWhen an eager loaded model is filtered using \ninclude.where\n then \ninclude.required\n is implicitly set to\n\ntrue\n. This means that an inner join is done returning parent models with any matching children.\n\n\nIncluding everything\n\n\nTo include all attributes, you can pass a single object with \nall: true\n:\n\n\nUser.findAll({ include: [{ all: true }]});\n\n\n\n\nIncluding soft deleted records\n\n\nIn case you want to eager load soft deleted records you can do that by setting \ninclude.paranoid\n to \ntrue\n\n\nUser.findAll({\n    include: [{\n        model: Tool,\n        where: { name: { $like: '%ooth%' } },\n        paranoid: true // query and loads the soft deleted records\n    }]\n});\n\n\n\n\nOrdering Eager Loaded Associations\n\n\nIn the case of a one-to-many relationship.\n\n\nCompany.findAll({ include: [ Division ], order: [ [ Division, 'name' ] ] });\nCompany.findAll({ include: [ Division ], order: [ [ Division, 'name', 'DESC' ] ] });\nCompany.findAll({\n  include: [ { model: Division, as: 'Div' } ],\n  order: [ [ { model: Division, as: 'Div' }, 'name' ] ]\n});\nCompany.findAll({\n  include: [ { model: Division, as: 'Div' } ],\n  order: [ [ { model: Division, as: 'Div' }, 'name', 'DESC' ] ]\n});\nCompany.findAll({\n  include: [ { model: Division, include: [ Department ] } ],\n  order: [ [ Division, Department, 'name' ] ]\n});\n\n\n\n\nIn the case of many-to-many joins, you are also able to sort by attributes in the through table.\n\n\nCompany.findAll({\n  include: [ { model: Division, include: [ Department ] } ],\n  order: [ [ Division, DepartmentDivision, 'name' ] ]\n});\n\n\n\n\nNested eager loading\n\n\nYou can use nested eager loading to load all related models of a related model:\n\n\nUser.findAll({\n  include: [\n    {model: Tool, as: 'Instruments', include: [\n      {model: Teacher, include: [ /* etc */]}\n    ]}\n  ]\n}).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n      \nname\n: \nJohn Doe\n,\n      \nid\n: 1,\n      \ncreatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nupdatedAt\n: \n2013-03-20T20:31:45.000Z\n,\n      \nInstruments\n: [{ // 1:M and N:M association\n        \nname\n: \nToothpick\n,\n        \nid\n: 1,\n        \ncreatedAt\n: null,\n        \nupdatedAt\n: null,\n        \nuserId\n: 1,\n        \nTeacher\n: { // 1:1 association\n          \nname\n: \nJimi Hendrix\n\n        }\n      }]\n    }]\n  */\n})\n\n\n\n\nThis will produce an outer join. However, a \nwhere\n clause on a related model will create an inner join and return only the instances that have matching sub-models. To return all parent instances, you should add \nrequired: false\n.\n\n\nUser.findAll({\n  include: [{\n    model: Tool,\n    as: 'Instruments',\n    include: [{\n      model: Teacher,\n      where: {\n        school: \nWoodstock Music School\n\n      },\n      required: false\n    }]\n  }]\n}).then(function(users) {\n  /* ... */\n})\n\n\n\n\nThe query above will return all users, and all their instruments, but only those teachers associated with \nWoodstock Music School\n.\n\n\nInclude all also supports nested loading:\n\n\nUser.findAll({ include: [{ all: true, nested: true }]});", 
            "title": "Usage"
        }, 
        {
            "location": "/docs/models-usage/#data-retrieval-finders", 
            "text": "Finder methods are intended to query data from the database. They do  not  return plain objects but instead return model instances. Because finder methods return model instances you can call any model instance member on the result as described in the documentation for  instances .  In this document we'll explore what finder methods can do:", 
            "title": "Data retrieval / Finders"
        }, 
        {
            "location": "/docs/models-usage/#find-search-for-one-specific-element-in-the-database", 
            "text": "// search for known ids\nProject.findById(123).then(function(project) {\n  // project will be an instance of Project and stores the content of the table entry\n  // with id 123. if such an entry is not defined you will get null\n})\n\n// search for attributes\nProject.findOne({ where: {title: 'aProject'} }).then(function(project) {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n})\n\n\nProject.findOne({\n  where: {title: 'aProject'},\n  attributes: ['id', ['name', 'title']]\n}).then(function(project) {\n  // project will be the first entry of the Projects table with the title 'aProject' || null\n  // project.title will contain the name of the project\n})", 
            "title": "find - Search for one specific element in the database"
        }, 
        {
            "location": "/docs/models-usage/#findorcreate-search-for-a-specific-element-or-create-it-if-not-available", 
            "text": "The method  findOrCreate  can be used to check if a certain element already exists in the database. If that is the case the method will result in a respective instance. If the element does not yet exist, it will be created.  Let's assume we have an empty database with a  User  model which has a  username  and a  job .  User\n  .findOrCreate({where: {username: 'sdepold'}, defaults: {job: 'Technical Lead JavaScript'}})\n  .spread(function(user, created) {\n    console.log(user.get({\n      plain: true\n    }))\n    console.log(created)\n\n    /*\n      {\n        username: 'sdepold',\n        job: 'Technical Lead JavaScript',\n        id: 1,\n        createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),\n        updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)\n      }\n      created: true\n    */\n  })  The code created a new instance. So when we already have an instance ...  User\n  .create({ username: 'fnord', job: 'omnomnom' })\n  .then(function() {\n    User\n      .findOrCreate({where: {username: 'fnord'}, defaults: {job: 'something else'}})\n      .spread(function(user, created) {\n        console.log(user.get({\n          plain: true\n        }))\n        console.log(created)\n\n        /*\n          {\n            username: 'fnord',\n            job: 'omnomnom',\n            id: 2,\n            createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),\n            updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)\n          }\n          created: false\n        */\n      })\n  })  ... the existing entry will not be changed. See the  job  of the second user, and the fact that created was false.", 
            "title": "findOrCreate - Search for a specific element or create it if not available"
        }, 
        {
            "location": "/docs/models-usage/#findandcountall-search-for-multiple-elements-in-the-database-returns-both-data-and-total-count", 
            "text": "This is a convenience method that combines findAll  and  count  (see below) this is useful when dealing with queries related to pagination where you want to retrieve data with a  limit  and  offset  but also need to know the total number of records that match the query:  The success handler will always receive an object with two properties:   count  - an integer, total number records matching the where clause  rows  - an array of objects, the records matching the where clause, within the limit and offset range   Project\n  .findAndCountAll({\n     where: {\n        title: {\n          $like: 'foo%'\n        }\n     },\n     offset: 10,\n     limit: 2\n  })\n  .then(function(result) {\n    console.log(result.count);\n    console.log(result.rows);\n  });  findAndCountAll  also supports includes. Only the includes that are marked as  required  will be added to the count part:  Suppose you want to find all users who have a profile attached:  User.findAndCountAll({\n  include: [\n     { model: Profile, required: true}\n  ],\n  limit: 3\n});  Because the include for  Profile  has  required  set it will result in an inner join, and only the users who have a profile will be counted. If we remove  required  from the include, both users with and without profiles will be counted. Adding a  where  clause to the include automatically makes it required:  User.findAndCountAll({\n  include: [\n     { model: Profile, where: { active: true }}\n  ],\n  limit: 3\n});  The query above will only count users who have an active profile, because  required  is implicitly set to true when you add a where clause to the include.  The options object that you pass to  findAndCountAll  is the same as for  findAll  (described below).", 
            "title": "findAndCountAll - Search for multiple elements in the database, returns both data and total count"
        }, 
        {
            "location": "/docs/models-usage/#findall-search-for-multiple-elements-in-the-database", 
            "text": "// find multiple entries\nProject.findAll().then(function(projects) {\n  // projects will be an array of all Project instances\n})\n\n// also possible:\nProject.all().then(function(projects) {\n  // projects will be an array of all Project instances\n})\n\n// search for specific attributes - hash usage\nProject.findAll({ where: { name: 'A Project' } }).then(function(projects) {\n  // projects will be an array of Project instances with the specified name\n})\n\n// search with string replacements\nProject.findAll({ where: [ id   ? , 25] }).then(function(projects) {\n  // projects will be an array of Projects having a greater id than 25\n})\n\n// search within a specific range\nProject.findAll({ where: { id: [1,2,3] } }).then(function(projects) {\n  // projects will be an array of Projects having the id 1, 2 or 3\n  // this is actually doing an IN query\n})\n\nProject.findAll({\n  where: {\n    id: {\n      $and: {a: 5}           // AND (a = 5)\n      $or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)\n      $gt: 6,                // id   6\n      $gte: 6,               // id  = 6\n      $lt: 10,               // id   10\n      $lte: 10,              // id  = 10\n      $ne: 20,               // id != 20\n      $between: [6, 10],     // BETWEEN 6 AND 10\n      $notBetween: [11, 15], // NOT BETWEEN 11 AND 15\n      $in: [1, 2],           // IN [1, 2]\n      $notIn: [1, 2],        // NOT IN [1, 2]\n      $like: '%hat',         // LIKE '%hat'\n      $notLike: '%hat'       // NOT LIKE '%hat'\n      $iLike: '%hat'         // ILIKE '%hat' (case insensitive)  (PG only)\n      $notILike: '%hat'      // NOT ILIKE '%hat'  (PG only)\n      $overlap: [1, 2]       //   [1, 2] (PG array overlap operator)\n      $contains: [1, 2]      // @  [1, 2] (PG array contains operator)\n      $contained: [1, 2]     //  @ [1, 2] (PG array contained by operator)\n      $any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n    },\n    status: {\n      $not: false,           // status NOT FALSE\n    }\n  }\n})", 
            "title": "findAll - Search for multiple elements in the database"
        }, 
        {
            "location": "/docs/models-usage/#complex-filtering-or-not-queries", 
            "text": "It's possible to do complex where queries with multiple levels of nested AND, OR and NOT conditions. In order to do that you can use  $or ,  $and  or  $not :  Project.findOne({\n  where: {\n    name: 'a project',\n    $or: [\n      { id: [1,2,3] },\n      { id: { $gt: 10 } }\n    ]\n  }\n})\n\nProject.findOne({\n  where: {\n    name: 'a project',\n    id: {\n      $or: [\n        [1,2,3],\n        { $gt: 10 }\n      ]\n    }\n  }\n})  Both pieces of code code will generate the following:  SELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'a project'\n   AND (`Projects`.`id` IN (1,2,3) OR `Projects`.`id`   10)\n)\nLIMIT 1;  $not  example:  Project.findOne({\n  where: {\n    name: 'a project',\n    $not: [\n      { id: [1,2,3] },\n      { array: { $contains: [3,4,5] } }\n    ]\n  }\n});  Will generate:  SELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'a project'\n   AND NOT (`Projects`.`id` IN (1,2,3) OR `Projects`.`array` @  ARRAY[1,2,3]::INTEGER[])\n)\nLIMIT 1;", 
            "title": "Complex filtering / OR / NOT queries"
        }, 
        {
            "location": "/docs/models-usage/#manipulating-the-dataset-with-limit-offset-order-and-group", 
            "text": "To get more relevant data, you can use limit, offset, order and grouping:  // limit the results of the query\nProject.findAll({ limit: 10 })\n\n// step over the first 10 elements\nProject.findAll({ offset: 10 })\n\n// step over the first 10 elements, and take 2\nProject.findAll({ offset: 10, limit: 2 })  The syntax for grouping and ordering are equal, so below it is only explained with a single example for group, and the rest for order. Everything you see below can also be done for group  Project.findAll({order: 'title DESC'})\n// yields ORDER BY title DESC\n\nProject.findAll({group: 'name'})\n// yields GROUP BY name  Notice how in the two examples above, the string provided is inserted verbatim into the query, i.e. column names are not escaped. When you provide a string to order/group, this will always be the case. If you want to escape column names, you should provide an array of arguments, even though you only want to order/group by a single column  something.findOne({\n  order: [\n    'name',\n    // will return `name`\n    'username DESC',\n    // will return `username DESC` -- i.e. don't do it!\n    ['username', 'DESC'],\n    // will return `username` DESC\n    sequelize.fn('max', sequelize.col('age')),\n    // will return max(`age`)\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    // will return max(`age`) DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    // will return otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']\n    // will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!\n    [{ raw: 'otherfunction(awesomefunction(`col`))' }, 'DESC']\n    // This won't be quoted, but direction will be added\n  ]\n})  To recap, the elements of the order/group array can be the following:   String - will be quoted  Array - first element will be quoted, second will be appended verbatim  Object -  Raw will be added verbatim without quoting  Everything else is ignored, and if raw is not set, the query will fail  Sequelize.fn and Sequelize.col returns functions and quoted cools", 
            "title": "Manipulating the dataset with limit, offset, order and group"
        }, 
        {
            "location": "/docs/models-usage/#raw-queries", 
            "text": "Sometimes you might be expecting a massive dataset that you just want to display, without manipulation. For each row you select, Sequelize creates an instance with functions for update, delete, get associations etc. If you have thousands of rows, this might take some time. If you only need the raw data and don't want to update anything, you can do like this to get the raw data.  // Are you expecting a massive dataset from the DB,\n// and don't want to spend the time building DAOs for each entry?\n// You can pass an extra query option to get the raw data instead:\nProject.findAll({ where: { ... }, raw: true })", 
            "title": "Raw queries"
        }, 
        {
            "location": "/docs/models-usage/#count-count-the-occurrences-of-elements-in-the-database", 
            "text": "There is also a method for counting database objects:  Project.count().then(function(c) {\n  console.log( There are   + c +   projects! )\n})\n\nProject.count({ where: [ id   ? , 25] }).then(function(c) {\n  console.log( There are   + c +   projects with an id greater than 25. )\n})", 
            "title": "count - Count the occurrences of elements in the database"
        }, 
        {
            "location": "/docs/models-usage/#max-get-the-greatest-value-of-a-specific-attribute-within-a-specific-table", 
            "text": "And here is a method for getting the max value of an attribute:f  /*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.max('age').then(function(max) {\n  // this will return 40\n})\n\nProject.max('age', { where: { age: { lt: 20 } } }).then(function(max) {\n  // will be 10\n})", 
            "title": "max - Get the greatest value of a specific attribute within a specific table"
        }, 
        {
            "location": "/docs/models-usage/#min-get-the-least-value-of-a-specific-attribute-within-a-specific-table", 
            "text": "And here is a method for getting the min value of an attribute:  /*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.min('age').then(function(min) {\n  // this will return 5\n})\n\nProject.min('age', { where: { age: { $gt: 5 } } }).then(function(min) {\n  // will be 10\n})", 
            "title": "min - Get the least value of a specific attribute within a specific table"
        }, 
        {
            "location": "/docs/models-usage/#sum-sum-the-value-of-specific-attributes", 
            "text": "In order to calculate the sum over a specific column of a table, you can\nuse the  sum  method.  /*\n  Let's assume 3 person objects with an attribute age.\n  The first one is 10 years old,\n  the second one is 5 years old,\n  the third one is 40 years old.\n*/\nProject.sum('age').then(function(sum) {\n  // this will return 55\n})\n\nProject.sum('age', { where: { age: { $gt: 5 } } }).then(function(sum) {\n  // will be 50\n})", 
            "title": "sum - Sum the value of specific attributes"
        }, 
        {
            "location": "/docs/models-usage/#eager-loading", 
            "text": "When you are retrieving data from the database there is a fair chance that you also want to get associations with the same query - this is called eager loading. The basic idea behind that, is the use of the attribute  include  when you are calling  find  or  findAll . Lets assume the following setup:  var User = sequelize.define('user', { name: Sequelize.STRING })\n  , Task = sequelize.define('task', { name: Sequelize.STRING })\n  , Tool = sequelize.define('tool', { name: Sequelize.STRING })\n\nTask.belongsTo(User)\nUser.hasMany(Task)\nUser.hasMany(Tool, { as: 'Instruments' })\n\nsequelize.sync().then(function() {\n  // this is where we continue ...\n})  OK. So, first of all, let's load all tasks with their associated user.  Task.findAll({ include: [ User ] }).then(function(tasks) {\n  console.log(JSON.stringify(tasks))\n\n  /*\n    [{\n       name :  A Task ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:40.000Z ,\n       updatedAt :  2013-03-20T20:31:40.000Z ,\n       userId : 1,\n       user : {\n         name :  John Doe ,\n         id : 1,\n         createdAt :  2013-03-20T20:31:45.000Z ,\n         updatedAt :  2013-03-20T20:31:45.000Z \n      }\n    }]\n  */\n})  Notice that the accessor (the  User  property in the resulting instance) is singular because the association is one-to-something.  Next thing: Loading of data with many-to-something associations!  User.findAll({ include: [ Task ] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n       name :  John Doe ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:45.000Z ,\n       updatedAt :  2013-03-20T20:31:45.000Z ,\n       tasks : [{\n         name :  A Task ,\n         id : 1,\n         createdAt :  2013-03-20T20:31:40.000Z ,\n         updatedAt :  2013-03-20T20:31:40.000Z ,\n         userId : 1\n      }]\n    }]\n  */\n})  Notice that the accessor (the  Tasks  property in the resulting instance) is plural because the association is many-to-something.  If an association is aliased (using the  as  option), you must specify this alias when including the model. Notice how the user's  Tool s are aliased as  Instruments  above. In order to get that right you have to specify the model you want to load, as well as the alias:  User.findAll({ include: [{ model: Tool, as: 'Instruments' }] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n       name :  John Doe ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:45.000Z ,\n       updatedAt :  2013-03-20T20:31:45.000Z ,\n       Instruments : [{\n         name :  Toothpick ,\n         id : 1,\n         createdAt : null,\n         updatedAt : null,\n         userId : 1\n      }]\n    }]\n  */\n})  You can also include by alias name by specifying a string that matches the association alias:  User.findAll({ include: ['Instruments'] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n       name :  John Doe ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:45.000Z ,\n       updatedAt :  2013-03-20T20:31:45.000Z ,\n       Instruments : [{\n         name :  Toothpick ,\n         id : 1,\n         createdAt : null,\n         updatedAt : null,\n         userId : 1\n      }]\n    }]\n  */\n})\n\nUser.findAll({ include: [{ association: 'Instruments' }] }).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n       name :  John Doe ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:45.000Z ,\n       updatedAt :  2013-03-20T20:31:45.000Z ,\n       Instruments : [{\n         name :  Toothpick ,\n         id : 1,\n         createdAt : null,\n         updatedAt : null,\n         userId : 1\n      }]\n    }]\n  */\n})  When eager loading we can also filter the associated model using  where . This will return all  User s in which the  where  clause of  Tool  model matches rows.  User.findAll({\n    include: [{\n        model: Tool,\n        as: 'Instruments',\n        where: { name: { $like: '%ooth%' } }\n    }]\n}).then(function(users) {\n    console.log(JSON.stringify(users))\n\n    /*\n      [{\n         name :  John Doe ,\n         id : 1,\n         createdAt :  2013-03-20T20:31:45.000Z ,\n         updatedAt :  2013-03-20T20:31:45.000Z ,\n         Instruments : [{\n           name :  Toothpick ,\n           id : 1,\n           createdAt : null,\n           updatedAt : null,\n           userId : 1\n        }]\n      }],\n\n      [{\n         name :  John Smith ,\n         id : 2,\n         createdAt :  2013-03-20T20:31:45.000Z ,\n         updatedAt :  2013-03-20T20:31:45.000Z ,\n         Instruments : [{\n           name :  Toothpick ,\n           id : 1,\n           createdAt : null,\n           updatedAt : null,\n           userId : 1\n        }]\n      }],\n    */\n  })  When an eager loaded model is filtered using  include.where  then  include.required  is implicitly set to true . This means that an inner join is done returning parent models with any matching children.", 
            "title": "Eager loading"
        }, 
        {
            "location": "/docs/models-usage/#including-everything", 
            "text": "To include all attributes, you can pass a single object with  all: true :  User.findAll({ include: [{ all: true }]});", 
            "title": "Including everything"
        }, 
        {
            "location": "/docs/models-usage/#including-soft-deleted-records", 
            "text": "In case you want to eager load soft deleted records you can do that by setting  include.paranoid  to  true  User.findAll({\n    include: [{\n        model: Tool,\n        where: { name: { $like: '%ooth%' } },\n        paranoid: true // query and loads the soft deleted records\n    }]\n});", 
            "title": "Including soft deleted records"
        }, 
        {
            "location": "/docs/models-usage/#ordering-eager-loaded-associations", 
            "text": "In the case of a one-to-many relationship.  Company.findAll({ include: [ Division ], order: [ [ Division, 'name' ] ] });\nCompany.findAll({ include: [ Division ], order: [ [ Division, 'name', 'DESC' ] ] });\nCompany.findAll({\n  include: [ { model: Division, as: 'Div' } ],\n  order: [ [ { model: Division, as: 'Div' }, 'name' ] ]\n});\nCompany.findAll({\n  include: [ { model: Division, as: 'Div' } ],\n  order: [ [ { model: Division, as: 'Div' }, 'name', 'DESC' ] ]\n});\nCompany.findAll({\n  include: [ { model: Division, include: [ Department ] } ],\n  order: [ [ Division, Department, 'name' ] ]\n});  In the case of many-to-many joins, you are also able to sort by attributes in the through table.  Company.findAll({\n  include: [ { model: Division, include: [ Department ] } ],\n  order: [ [ Division, DepartmentDivision, 'name' ] ]\n});", 
            "title": "Ordering Eager Loaded Associations"
        }, 
        {
            "location": "/docs/models-usage/#nested-eager-loading", 
            "text": "You can use nested eager loading to load all related models of a related model:  User.findAll({\n  include: [\n    {model: Tool, as: 'Instruments', include: [\n      {model: Teacher, include: [ /* etc */]}\n    ]}\n  ]\n}).then(function(users) {\n  console.log(JSON.stringify(users))\n\n  /*\n    [{\n       name :  John Doe ,\n       id : 1,\n       createdAt :  2013-03-20T20:31:45.000Z ,\n       updatedAt :  2013-03-20T20:31:45.000Z ,\n       Instruments : [{ // 1:M and N:M association\n         name :  Toothpick ,\n         id : 1,\n         createdAt : null,\n         updatedAt : null,\n         userId : 1,\n         Teacher : { // 1:1 association\n           name :  Jimi Hendrix \n        }\n      }]\n    }]\n  */\n})  This will produce an outer join. However, a  where  clause on a related model will create an inner join and return only the instances that have matching sub-models. To return all parent instances, you should add  required: false .  User.findAll({\n  include: [{\n    model: Tool,\n    as: 'Instruments',\n    include: [{\n      model: Teacher,\n      where: {\n        school:  Woodstock Music School \n      },\n      required: false\n    }]\n  }]\n}).then(function(users) {\n  /* ... */\n})  The query above will return all users, and all their instruments, but only those teachers associated with  Woodstock Music School .  Include all also supports nested loading:  User.findAll({ include: [{ all: true, nested: true }]});", 
            "title": "Nested eager loading"
        }, 
        {
            "location": "/docs/querying/", 
            "text": "Attributes\n\n\nTo select only some attributes, you can use the \nattributes\n option. Most often, you pass an array:\n\n\nModel.findAll({\n  attributes: ['foo', 'bar']\n});\n\n\n\n\nSELECT foo, bar ...\n\n\n\n\nAttributes can be renamed using a nested array:\n\n\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz']]\n});\n\n\n\n\nSELECT foo, bar AS baz ...\n\n\n\n\nYou can use \nsequelize.fn\n to do aggregations:\n\n\nModel.findAll({\n  attributes: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n});\n\n\n\n\nSELECT COUNT(hats) AS no_hats ...\n\n\n\n\nWhen using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with \ninstance.get('no_hats')\n.\n\n\nSometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:\n\n\n// This is a tiresome way of getting the number of hats...\nModel.findAll({\n  attributes: ['id', 'foo', 'bar', 'baz', 'quz', [sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes\nModel.findAll({\n  attributes: { include: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']] }\n});\n\n\n\n\nSELECT id, foo, bar, baz, quz, COUNT(hats) AS no_hats ...\n\n\n\n\nSimilarly, its also possible to remove a selected few attributes:\n\n\nModel.findAll({\n  attributes: { exclude: ['baz'] }\n});\n\n\n\n\nSELECT id, foo, bar, quz ...\n\n\n\n\nWhere\n\n\nWhether you are querying with findAll/find or doing bulk updates/destroys you can pass a \nwhere\n object to filter the query.\n\n\nwhere\n generally takes an object from attribute:value pairs, where value can be primitives for equality matches or keyed objects for other operators.\n\n\nIt's also possible to generate complex AND/OR conditions by nesting sets of \n$or\n and \n$and\n.\n\n\nBasics\n\n\nPost.findAll({\n  where: {\n    authorId: 2\n  }\n});\n// SELECT * FROM post WHERE authorId = 2\n\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active'\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n\nPost.destroy({\n  where: {\n    status: 'inactive'\n  }\n});\n// DELETE FROM post WHERE status = 'inactive';\n\nPost.update({\n  updatedAt: null,\n}, {\n  where: {\n    deletedAt: {\n      $ne: null\n    }\n  }\n});\n// UPDATE post SET updatedAt = null WHERE deletedAt NOT NULL;\n\nPost.findAll({\n  where: sequelize.where(sequelize.fn('char_length', sequelize.col('status')), 6)\n});\n// SELECT * FROM post WHERE char_length(status) = 6;\n\n\n\n\nOperators\n\n\n$and: {a: 5}           // AND (a = 5)\n$or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)\n$gt: 6,                // \n 6\n$gte: 6,               // \n= 6\n$lt: 10,               // \n 10\n$lte: 10,              // \n= 10\n$ne: 20,               // != 20\n$eq: 3,                // = 3\n$not: true,            // IS NOT TRUE\n$between: [6, 10],     // BETWEEN 6 AND 10\n$notBetween: [11, 15], // NOT BETWEEN 11 AND 15\n$in: [1, 2],           // IN [1, 2]\n$notIn: [1, 2],        // NOT IN [1, 2]\n$like: '%hat',         // LIKE '%hat'\n$notLike: '%hat'       // NOT LIKE '%hat'\n$iLike: '%hat'         // ILIKE '%hat' (case insensitive) (PG only)\n$notILike: '%hat'      // NOT ILIKE '%hat'  (PG only)\n$like: { $any: ['cat', 'hat']}\n                       // LIKE ANY ARRAY['cat', 'hat'] - also works for iLike and notLike\n$overlap: [1, 2]       // \n [1, 2] (PG array overlap operator)\n$contains: [1, 2]      // @\n [1, 2] (PG array contains operator)\n$contained: [1, 2]     // \n@ [1, 2] (PG array contained by operator)\n$any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n\n$col: 'user.organization_id' // = \nuser\n.\norganization_id\n, with dialect specific column identifiers, PG in this example\n\n\n\n\nRange Operators\n\n\nRange types can be queried with all supported operators.\n\n\nKeep in mind, the provided range value can\n\ndefine the bound inclusion/exclusion\n\nas well.\n\n\n// All the above equlity and inequality operators plus the following:\n\n$contains: 2           // @\n '2'::integer (PG range contains element operator)\n$contains: [1, 2]      // @\n [1, 2) (PG range contains range operator)\n$contained: [1, 2]     // \n@ [1, 2) (PG range is contained by operator)\n$overlap: [1, 2]       // \n [1, 2) (PG range overlap (have points in common) operator)\n$adjacent: [1, 2]      // -|- [1, 2) (PG range is adjacent to operator)\n$strictLeft: [1, 2]    // \n [1, 2) (PG range strictly left of operator)\n$strictRight: [1, 2]   // \n [1, 2) (PG range strictly right of operator)\n$noExtendRight: [1, 2] // \n [1, 2) (PG range does not extend to the right of operator)\n$noExtendLeft: [1, 2]  // \n [1, 2) (PG range does not extend to the left of operator)\n\n\n\n\nCombinations\n\n\n{\n  rank: {\n    $or: {\n      $lt: 1000,\n      $eq: null\n    }\n  }\n}\n// rank \n 1000 OR rank IS NULL\n\n{\n  createdAt: {\n    $lt: new Date(),\n    $gt: new Date(new Date() - 24 * 60 * 60 * 1000)\n  }\n}\n// createdAt \n [timestamp] AND createdAt \n [timestamp]\n\n{\n  $or: [\n    {\n      title: {\n        $like: 'Boat%'\n      }\n    },\n    {\n      description: {\n        $like: '%boat%'\n      }\n    }\n  ]\n}\n// title LIKE 'Boat%' OR description LIKE '%boat%'\n\n\n\n\nJSONB\n\n\nJSONB can be queried in three different ways.\n\n\nNested object\n\n\n{\n  meta: {\n    video: {\n      url: {\n        $ne: null\n      }\n    }\n  }\n}\n\n\n\n\nNested key\n\n\n{\n  \nmeta.audio.length\n: {\n    $gt: 20\n  }\n}\n\n\n\n\nContainment\n\n\n{\n  \nmeta\n: {\n    $contains: {\n      site: {\n        url: 'http://google.com'\n      }\n    }\n  }\n}\n\n\n\n\nRelations / Associations\n\n\n// Find all projects with a least one task where task.state === project.task\nProject.findAll({\n    include: [{\n        model: Task,\n        where: { state: Sequelize.col('project.state') }\n    }]\n})\n\n\n\n\nPagination / Limiting\n\n\n// Fetch 10 instances/rows\nProject.findAll({ limit: 10 })\n\n// Skip 8 instances/rows\nProject.findAll({ offset: 8 })\n\n// Skip 5 instances and fetch the 5 after that\nProject.findAll({ offset: 5, limit: 5 })\n\n\n\n\nOrdering\n\n\norder\n takes an array of items to order the query by. Generally you will want to use a tuple/array of either attribute, direction or just direction to ensure proper escaping.\n\n\nsomething.findOne({\n  order: [\n    // Will escape username and validate DESC against a list of valid direction parameters\n    ['username', 'DESC'],\n\n    // Will order by max(age)\n    sequelize.fn('max', sequelize.col('age')),\n\n    // Will order by max(age) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n\n    // Will order by  otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n\n    // Will order by name on an associated User\n    [User, 'name', 'DESC'],\n\n    // Will order by name on an associated User aliased as Friend\n    [{model: User, as: 'Friend'}, 'name', 'DESC'],\n\n    // Will order by name on a nested associated Company of an associated User\n    [User, Company, 'name', 'DESC'],\n  ]\n  // All the following statements will be treated literally so should be treated with care\n  order: 'convert(user_name using gbk)'\n  order: 'username DESC'\n  order: sequelize.literal('convert(user_name using gbk)')\n})", 
            "title": "Querying"
        }, 
        {
            "location": "/docs/querying/#attributes", 
            "text": "To select only some attributes, you can use the  attributes  option. Most often, you pass an array:  Model.findAll({\n  attributes: ['foo', 'bar']\n});  SELECT foo, bar ...  Attributes can be renamed using a nested array:  Model.findAll({\n  attributes: ['foo', ['bar', 'baz']]\n});  SELECT foo, bar AS baz ...  You can use  sequelize.fn  to do aggregations:  Model.findAll({\n  attributes: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n});  SELECT COUNT(hats) AS no_hats ...  When using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with  instance.get('no_hats') .  Sometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:  // This is a tiresome way of getting the number of hats...\nModel.findAll({\n  attributes: ['id', 'foo', 'bar', 'baz', 'quz', [sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes\nModel.findAll({\n  attributes: { include: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']] }\n});  SELECT id, foo, bar, baz, quz, COUNT(hats) AS no_hats ...  Similarly, its also possible to remove a selected few attributes:  Model.findAll({\n  attributes: { exclude: ['baz'] }\n});  SELECT id, foo, bar, quz ...", 
            "title": "Attributes"
        }, 
        {
            "location": "/docs/querying/#where", 
            "text": "Whether you are querying with findAll/find or doing bulk updates/destroys you can pass a  where  object to filter the query.  where  generally takes an object from attribute:value pairs, where value can be primitives for equality matches or keyed objects for other operators.  It's also possible to generate complex AND/OR conditions by nesting sets of  $or  and  $and .", 
            "title": "Where"
        }, 
        {
            "location": "/docs/querying/#basics", 
            "text": "Post.findAll({\n  where: {\n    authorId: 2\n  }\n});\n// SELECT * FROM post WHERE authorId = 2\n\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active'\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n\nPost.destroy({\n  where: {\n    status: 'inactive'\n  }\n});\n// DELETE FROM post WHERE status = 'inactive';\n\nPost.update({\n  updatedAt: null,\n}, {\n  where: {\n    deletedAt: {\n      $ne: null\n    }\n  }\n});\n// UPDATE post SET updatedAt = null WHERE deletedAt NOT NULL;\n\nPost.findAll({\n  where: sequelize.where(sequelize.fn('char_length', sequelize.col('status')), 6)\n});\n// SELECT * FROM post WHERE char_length(status) = 6;", 
            "title": "Basics"
        }, 
        {
            "location": "/docs/querying/#operators", 
            "text": "$and: {a: 5}           // AND (a = 5)\n$or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)\n$gt: 6,                //   6\n$gte: 6,               //  = 6\n$lt: 10,               //   10\n$lte: 10,              //  = 10\n$ne: 20,               // != 20\n$eq: 3,                // = 3\n$not: true,            // IS NOT TRUE\n$between: [6, 10],     // BETWEEN 6 AND 10\n$notBetween: [11, 15], // NOT BETWEEN 11 AND 15\n$in: [1, 2],           // IN [1, 2]\n$notIn: [1, 2],        // NOT IN [1, 2]\n$like: '%hat',         // LIKE '%hat'\n$notLike: '%hat'       // NOT LIKE '%hat'\n$iLike: '%hat'         // ILIKE '%hat' (case insensitive) (PG only)\n$notILike: '%hat'      // NOT ILIKE '%hat'  (PG only)\n$like: { $any: ['cat', 'hat']}\n                       // LIKE ANY ARRAY['cat', 'hat'] - also works for iLike and notLike\n$overlap: [1, 2]       //   [1, 2] (PG array overlap operator)\n$contains: [1, 2]      // @  [1, 2] (PG array contains operator)\n$contained: [1, 2]     //  @ [1, 2] (PG array contained by operator)\n$any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\n\n$col: 'user.organization_id' // =  user . organization_id , with dialect specific column identifiers, PG in this example", 
            "title": "Operators"
        }, 
        {
            "location": "/docs/querying/#range-operators", 
            "text": "Range types can be queried with all supported operators.  Keep in mind, the provided range value can define the bound inclusion/exclusion \nas well.  // All the above equlity and inequality operators plus the following:\n\n$contains: 2           // @  '2'::integer (PG range contains element operator)\n$contains: [1, 2]      // @  [1, 2) (PG range contains range operator)\n$contained: [1, 2]     //  @ [1, 2) (PG range is contained by operator)\n$overlap: [1, 2]       //   [1, 2) (PG range overlap (have points in common) operator)\n$adjacent: [1, 2]      // -|- [1, 2) (PG range is adjacent to operator)\n$strictLeft: [1, 2]    //   [1, 2) (PG range strictly left of operator)\n$strictRight: [1, 2]   //   [1, 2) (PG range strictly right of operator)\n$noExtendRight: [1, 2] //   [1, 2) (PG range does not extend to the right of operator)\n$noExtendLeft: [1, 2]  //   [1, 2) (PG range does not extend to the left of operator)", 
            "title": "Range Operators"
        }, 
        {
            "location": "/docs/querying/#combinations", 
            "text": "{\n  rank: {\n    $or: {\n      $lt: 1000,\n      $eq: null\n    }\n  }\n}\n// rank   1000 OR rank IS NULL\n\n{\n  createdAt: {\n    $lt: new Date(),\n    $gt: new Date(new Date() - 24 * 60 * 60 * 1000)\n  }\n}\n// createdAt   [timestamp] AND createdAt   [timestamp]\n\n{\n  $or: [\n    {\n      title: {\n        $like: 'Boat%'\n      }\n    },\n    {\n      description: {\n        $like: '%boat%'\n      }\n    }\n  ]\n}\n// title LIKE 'Boat%' OR description LIKE '%boat%'", 
            "title": "Combinations"
        }, 
        {
            "location": "/docs/querying/#jsonb", 
            "text": "JSONB can be queried in three different ways.", 
            "title": "JSONB"
        }, 
        {
            "location": "/docs/querying/#nested-object", 
            "text": "{\n  meta: {\n    video: {\n      url: {\n        $ne: null\n      }\n    }\n  }\n}", 
            "title": "Nested object"
        }, 
        {
            "location": "/docs/querying/#nested-key", 
            "text": "{\n   meta.audio.length : {\n    $gt: 20\n  }\n}", 
            "title": "Nested key"
        }, 
        {
            "location": "/docs/querying/#containment", 
            "text": "{\n   meta : {\n    $contains: {\n      site: {\n        url: 'http://google.com'\n      }\n    }\n  }\n}", 
            "title": "Containment"
        }, 
        {
            "location": "/docs/querying/#relations-associations", 
            "text": "// Find all projects with a least one task where task.state === project.task\nProject.findAll({\n    include: [{\n        model: Task,\n        where: { state: Sequelize.col('project.state') }\n    }]\n})", 
            "title": "Relations / Associations"
        }, 
        {
            "location": "/docs/querying/#pagination-limiting", 
            "text": "// Fetch 10 instances/rows\nProject.findAll({ limit: 10 })\n\n// Skip 8 instances/rows\nProject.findAll({ offset: 8 })\n\n// Skip 5 instances and fetch the 5 after that\nProject.findAll({ offset: 5, limit: 5 })", 
            "title": "Pagination / Limiting"
        }, 
        {
            "location": "/docs/querying/#ordering", 
            "text": "order  takes an array of items to order the query by. Generally you will want to use a tuple/array of either attribute, direction or just direction to ensure proper escaping.  something.findOne({\n  order: [\n    // Will escape username and validate DESC against a list of valid direction parameters\n    ['username', 'DESC'],\n\n    // Will order by max(age)\n    sequelize.fn('max', sequelize.col('age')),\n\n    // Will order by max(age) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n\n    // Will order by  otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n\n    // Will order by name on an associated User\n    [User, 'name', 'DESC'],\n\n    // Will order by name on an associated User aliased as Friend\n    [{model: User, as: 'Friend'}, 'name', 'DESC'],\n\n    // Will order by name on a nested associated Company of an associated User\n    [User, Company, 'name', 'DESC'],\n  ]\n  // All the following statements will be treated literally so should be treated with care\n  order: 'convert(user_name using gbk)'\n  order: 'username DESC'\n  order: sequelize.literal('convert(user_name using gbk)')\n})", 
            "title": "Ordering"
        }, 
        {
            "location": "/docs/scopes/", 
            "text": "Definition\n\n\nScoping allows you to define commonly used queries that you can easily use later. Scopes can include all the same attributes as regular finders, \nwhere\n, \ninclude\n, \nlimit\n etc.\n\n\nScopes are defined in the model definition and can be finder objects, or functions returning finder objects - except for the default scope, which can only be an object:\n\n\nvar Project = sequelize.define('project', {\n  // Attributes\n}, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    },\n    activeUsers: {\n      include: [\n        { model: User, where: { active: true }}\n      ]\n    }\n    random: function () {\n      return {\n        where: {\n          someNumber: Math.random()\n        }\n      }\n    },\n    accessLevel: function (value) {\n      return {\n        where: {\n          accessLevel: {\n            $gte: value\n          }\n        }\n      }\n    }\n  }\n});\n\n\n\n\nYou can also add scopes after a model has been defined by calling \naddScope\n. This is especially useful for scopes with includes, where the model in the include might not be defined at the time the other model is being defined.\n\n\nThe default scope is always applied. This means, that with the model definition above, \nProject.findAll()\n will create the following query:\n\n\nSELECT * FROM projects WHERE active = true\n\n\n\n\nThe default scope can be removed by calling \n.unscoped()\n, \n.scope(null)\n, or by invoking another scope:\n\n\nProject.scope('deleted').findAll(); // Removes the default scope\n\n\n\n\nSELECT * FROM projects WHERE deleted = true\n\n\n\n\nIt is also possible to include scoped models in a scope definition. This allows you to avoid duplicating \ninclude\n, \nattributes\n or \nwhere\n definitions.\nUsing the above example, and invoking the \nactive\n scope on the included User model (rather than specifying the condition directly in that include object):\n\n\nactiveUsers: {\n  include: [\n    { model: User.scope('active')}\n  ]\n}\n\n\n\n\nUsage\n\n\nScopes are applied by calling \n.scope\n on the model definition, passing the name of one or more scopes. \n.scope\n returns a fully functional model instance with all the regular methods: \n.findAll\n, \n.update\n, \n.count\n, \n.destroy\n etc. You can save this model instance and reuse it later:\n\n\nvar DeletedProjects = Project.scope('deleted');\n\nDeletedProjects.findAll();\n// some time passes\n\n// let's look for deleted projects again!\nDeletedProjects.findAll();\n\n\n\n\nScopes apply to \n.find\n, \n.findAll\n, \n.count\n, \n.update\n and \n.destroy\n.\n\n\nScopes which are functions can be invoked in two ways. If the scope does not take any arguments it can be invoked as normally. If the scope takes arguments, pass an object:\n\n\nProject.scope('random', { method: ['accessLevel', 19]}).findAll();\n\n\n\n\nSELECT * FROM projects WHERE someNumber = 42 AND accessLevel \n= 19\n\n\n\n\nMerging\n\n\nSeveral scopes can be applied simultaneously by passing an array of scopes to \n.scope\n, or by passing the scopes as consecutive arguments.\n\n\n// These two are equivalent\nProject.scope('deleted', 'activeUsers').findAll();\nProject.scope(['deleted', 'activeUsers']).findAll();\n\n\n\n\nSELECT * FROM projects\nINNER JOIN users ON projects.userId = users.id\nAND users.active = true\n\n\n\n\nIf you want to apply another scope alongside the default scope, pass the key \ndefaultScope\n to \n.scope\n:\n\n\nProject.scope('defaultScope', 'deleted').findAll();\n\n\n\n\nSELECT * FROM projects WHERE active = true AND deleted = true\n\n\n\n\nWhen invoking several scopes, keys from subsequent scopes will overwrite previous ones (similar to \n_.assign\n). Consider two scopes:\n\n\n{\n  scope1: {\n    where: {\n      firstName: 'bob',\n      age: {\n        $gt: 20\n      }\n    },\n    limit: 2\n  },\n  scope2: {\n    where: {\n      age: {\n        $gt: 30\n      }\n    },\n    limit: 10\n  }\n}\n\n\n\n\nCalling \n.scope('scope1', 'scope2')\n will yield the following query\n\n\nWHERE firstName = 'bob' AND age \n 30 LIMIT 10\n\n\n\n\nNote how \nlimit\n and \nage\n are overwritten by \nscope2\n, while \nfirstName\n is preserved. \nlimit\n, \noffset\n, \norder\n, \nparanoid\n, \nlock\n and \nraw\n are overwritten, while \nwhere\n and \ninclude\n are shallowly merged. This means that identical keys in the where objects, and subsequent includes of the same model will both overwrite each other.\n\n\nThe same merge logic applies when passing a find object directly to findAll on a scoped model:\n\n\nProject.scope('deleted').findAll({\n  where: {\n    firstName: 'john'\n  }\n})\n\n\n\n\nWHERE deleted = true AND firstName = 'john'\n\n\n\n\nHere the \ndeleted\n scope is merged with the finder. If we were to pass \nwhere: { firstName: 'john', deleted: false }\n to the finder, the \ndeleted\n scope would be overwritten.\n\n\nAssociations\n\n\nSequelize has two different but related scope concepts in relation to associations. The difference is subtle but important:\n\n\n\n\nAssociation scopes\n Allow you to specify default attributes when getting and setting associations - useful when implementing polymorphic associations. This scope is only invoked on the association between the two models, when using the \nget\n, \nset\n, \nadd\n and \ncreate\n associated model functions\n\n\nScopes on associated models\n Allows you to apply default and other scopes when fetching associations, and allows you to pass a scoped model when creating associations. These scopes both apply to regular finds on the model and to find through the association.\n\n\n\n\nAs an example, consider the models Post and Comment. Comment is associated to several other models (Image, Video etc.) and the association between Comment and other models is polymorphic, which means that Comment stores a \ncommentable\n column, in addition to the foreign key \ncommentable_id\n.\n\n\nThe polymorphic association can be implemented with an \nassociation scope\n :\n\n\nthis.Post.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  scope: {\n    commentable: 'post'\n  }\n});\n\n\n\n\nWhen calling \npost.getComments()\n, this will automatically add \nWHERE commentable = 'post'\n. Similarly, when adding new comments to a post, \ncommentable\n will automagically be set to \n'post'\n. The association scope is meant to live in the background without the programmer having to worry about it - it cannot be disabled. For a more complete polymorphic example, see \nAssociation scopes\n\n\nConsider then, that Post has a default scope which only shows active posts: \nwhere: { active: true }\n. This scope lives on the associated model (Post), and not on the association like the \ncommentable\n scope did. Just like the default scope is applied when calling \nPost.findAll()\n, it is also applied when calling \nUser.getPosts()\n - this will only return the active posts for that user.\n\n\nTo disable the default scope, pass \nscope: null\n to the getter: \nUser.getPosts({ scope: null })\n. Similarly, if you want to apply other scopes, pass an array like you would to \n.scope\n:\n\n\nUser.getPosts({ scope: ['scope1', 'scope2']});\n\n\n\n\nIf you want to create a shortcut method to a scope on an associated model, you can pass the scoped model to the association. Consider a shortcut to get all deleted posts for a user:\n\n\nvar Post = sequelize.define('post', attributes, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    }\n  }\n});\n\nUser.hasMany(Post); // regular getPosts association\nUser.hasMany(Post.scope('deleted'), { as: 'deletedPosts' });\n\n\n\n\n\nUser.getPosts(); // WHERE active = true\nUser.getDeletedPosts(); // WHERE deleted = true", 
            "title": "Scopes"
        }, 
        {
            "location": "/docs/scopes/#definition", 
            "text": "Scoping allows you to define commonly used queries that you can easily use later. Scopes can include all the same attributes as regular finders,  where ,  include ,  limit  etc.  Scopes are defined in the model definition and can be finder objects, or functions returning finder objects - except for the default scope, which can only be an object:  var Project = sequelize.define('project', {\n  // Attributes\n}, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    },\n    activeUsers: {\n      include: [\n        { model: User, where: { active: true }}\n      ]\n    }\n    random: function () {\n      return {\n        where: {\n          someNumber: Math.random()\n        }\n      }\n    },\n    accessLevel: function (value) {\n      return {\n        where: {\n          accessLevel: {\n            $gte: value\n          }\n        }\n      }\n    }\n  }\n});  You can also add scopes after a model has been defined by calling  addScope . This is especially useful for scopes with includes, where the model in the include might not be defined at the time the other model is being defined.  The default scope is always applied. This means, that with the model definition above,  Project.findAll()  will create the following query:  SELECT * FROM projects WHERE active = true  The default scope can be removed by calling  .unscoped() ,  .scope(null) , or by invoking another scope:  Project.scope('deleted').findAll(); // Removes the default scope  SELECT * FROM projects WHERE deleted = true  It is also possible to include scoped models in a scope definition. This allows you to avoid duplicating  include ,  attributes  or  where  definitions.\nUsing the above example, and invoking the  active  scope on the included User model (rather than specifying the condition directly in that include object):  activeUsers: {\n  include: [\n    { model: User.scope('active')}\n  ]\n}", 
            "title": "Definition"
        }, 
        {
            "location": "/docs/scopes/#usage", 
            "text": "Scopes are applied by calling  .scope  on the model definition, passing the name of one or more scopes.  .scope  returns a fully functional model instance with all the regular methods:  .findAll ,  .update ,  .count ,  .destroy  etc. You can save this model instance and reuse it later:  var DeletedProjects = Project.scope('deleted');\n\nDeletedProjects.findAll();\n// some time passes\n\n// let's look for deleted projects again!\nDeletedProjects.findAll();  Scopes apply to  .find ,  .findAll ,  .count ,  .update  and  .destroy .  Scopes which are functions can be invoked in two ways. If the scope does not take any arguments it can be invoked as normally. If the scope takes arguments, pass an object:  Project.scope('random', { method: ['accessLevel', 19]}).findAll();  SELECT * FROM projects WHERE someNumber = 42 AND accessLevel  = 19", 
            "title": "Usage"
        }, 
        {
            "location": "/docs/scopes/#merging", 
            "text": "Several scopes can be applied simultaneously by passing an array of scopes to  .scope , or by passing the scopes as consecutive arguments.  // These two are equivalent\nProject.scope('deleted', 'activeUsers').findAll();\nProject.scope(['deleted', 'activeUsers']).findAll();  SELECT * FROM projects\nINNER JOIN users ON projects.userId = users.id\nAND users.active = true  If you want to apply another scope alongside the default scope, pass the key  defaultScope  to  .scope :  Project.scope('defaultScope', 'deleted').findAll();  SELECT * FROM projects WHERE active = true AND deleted = true  When invoking several scopes, keys from subsequent scopes will overwrite previous ones (similar to  _.assign ). Consider two scopes:  {\n  scope1: {\n    where: {\n      firstName: 'bob',\n      age: {\n        $gt: 20\n      }\n    },\n    limit: 2\n  },\n  scope2: {\n    where: {\n      age: {\n        $gt: 30\n      }\n    },\n    limit: 10\n  }\n}  Calling  .scope('scope1', 'scope2')  will yield the following query  WHERE firstName = 'bob' AND age   30 LIMIT 10  Note how  limit  and  age  are overwritten by  scope2 , while  firstName  is preserved.  limit ,  offset ,  order ,  paranoid ,  lock  and  raw  are overwritten, while  where  and  include  are shallowly merged. This means that identical keys in the where objects, and subsequent includes of the same model will both overwrite each other.  The same merge logic applies when passing a find object directly to findAll on a scoped model:  Project.scope('deleted').findAll({\n  where: {\n    firstName: 'john'\n  }\n})  WHERE deleted = true AND firstName = 'john'  Here the  deleted  scope is merged with the finder. If we were to pass  where: { firstName: 'john', deleted: false }  to the finder, the  deleted  scope would be overwritten.", 
            "title": "Merging"
        }, 
        {
            "location": "/docs/scopes/#associations", 
            "text": "Sequelize has two different but related scope concepts in relation to associations. The difference is subtle but important:   Association scopes  Allow you to specify default attributes when getting and setting associations - useful when implementing polymorphic associations. This scope is only invoked on the association between the two models, when using the  get ,  set ,  add  and  create  associated model functions  Scopes on associated models  Allows you to apply default and other scopes when fetching associations, and allows you to pass a scoped model when creating associations. These scopes both apply to regular finds on the model and to find through the association.   As an example, consider the models Post and Comment. Comment is associated to several other models (Image, Video etc.) and the association between Comment and other models is polymorphic, which means that Comment stores a  commentable  column, in addition to the foreign key  commentable_id .  The polymorphic association can be implemented with an  association scope  :  this.Post.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  scope: {\n    commentable: 'post'\n  }\n});  When calling  post.getComments() , this will automatically add  WHERE commentable = 'post' . Similarly, when adding new comments to a post,  commentable  will automagically be set to  'post' . The association scope is meant to live in the background without the programmer having to worry about it - it cannot be disabled. For a more complete polymorphic example, see  Association scopes  Consider then, that Post has a default scope which only shows active posts:  where: { active: true } . This scope lives on the associated model (Post), and not on the association like the  commentable  scope did. Just like the default scope is applied when calling  Post.findAll() , it is also applied when calling  User.getPosts()  - this will only return the active posts for that user.  To disable the default scope, pass  scope: null  to the getter:  User.getPosts({ scope: null }) . Similarly, if you want to apply other scopes, pass an array like you would to  .scope :  User.getPosts({ scope: ['scope1', 'scope2']});  If you want to create a shortcut method to a scope on an associated model, you can pass the scoped model to the association. Consider a shortcut to get all deleted posts for a user:  var Post = sequelize.define('post', attributes, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    }\n  }\n});\n\nUser.hasMany(Post); // regular getPosts association\nUser.hasMany(Post.scope('deleted'), { as: 'deletedPosts' });  User.getPosts(); // WHERE active = true\nUser.getDeletedPosts(); // WHERE deleted = true", 
            "title": "Associations"
        }, 
        {
            "location": "/docs/instances/", 
            "text": "Building a non-persistent instance\n\n\nIn order to create instances of defined classes just do as follows\n You might recognize the syntax if you coded Ruby in the past\n Using the \nbuild\n-method will return an unsaved object\n which you explicitly have to save\n\n\nvar project = Project.build({\n  title: 'my awesome project',\n  description: 'woot woot. this will make me a rich man'\n})\n\u00a0\nvar task = Task.build({\n  title: 'specify the project idea',\n  description: 'bla',\n  deadline: new Date()\n})\n\n\n\n\nBuilt instances will automatically get default values when they were defined\n\n\n// first define the model\nvar Task = sequelize.define('task', {\n  title: Sequelize.STRING,\n  rating: { type: Sequelize.STRING, defaultValue: 3 }\n})\n\u00a0\n// now instantiate an object\nvar task = Task.build({title: 'very important task'})\n\u00a0\ntask.title  // ==\n 'very important task'\ntask.rating // ==\n 3\n\n\n\n\nTo get it stored in the database\n use the \nsave\n-method and catch the events ... if needed\n\n\nproject.save().then(function() {\n  // my nice callback stuff\n})\n\u00a0\ntask.save().catch(function(error) {\n  // mhhh, wth!\n})\n\u00a0\n// you can also build, save and access the object with chaining:\nTask\n  .build({ title: 'foo', description: 'bar', deadline: new Date() })\n  .save()\n  .then(function(anotherTask) {\n    // you can now access the currently saved task with the variable anotherTask... nice!\n  }).catch(function(error) {\n    // Ooops, do some error-handling\n  })\n\n\n\n\nCreating persistent instances\n\n\nBesides constructing objects\n that needs an explicit save call to get stored in the database\n there is also the possibility to do all those steps with one single command\n It's called \ncreate\n.\n\n\nTask.create({ title: 'foo', description: 'bar', deadline: new Date() }).then(function(task) {\n  // you can now access the newly created task via the variable task\n})\n\n\n\n\nIt is also possible to define which attributes can be set via the create method\n This can be especially very handy if you create database entries based on a form which can be filled by a user\n Using that would for example allow you to restrict the \nUser\n model to set only a username and an address but not an admin flag\n\n\nUser.create({ username: 'barfooz', isAdmin: true }, { fields: [ 'username' ] }).then(function(user) {\n  // let's assume the default of isAdmin is false:\n  console.log(user.get({\n    plain: true\n  })) // =\n { username: 'barfooz', isAdmin: false }\n})\n\n\n\n\nUpdating / Saving / Persisting an instance\n\n\nNow lets change some values and save changes to the database\n There are two ways to do that\n\n\n// way 1\ntask.title = 'a very different title now'\ntask.save().then(function() {})\n\u00a0\n// way 2\ntask.update({\n  title: 'a very different title now'\n}).then(function() {})\n\n\n\n\nIt's also possible to define which attributes should be saved when calling \nsave\n by passing an array of column names\n This is useful when you set attributes based on a previously defined object\n E\ng\n if you get the values of an object via a form of a web app\n Furthermore this is used internally for \nupdate\n This is how it looks like\n\n\ntask.title = 'foooo'\ntask.description = 'baaaaaar'\ntask.save({fields: ['title']}).then(function() {\n // title will now be 'foooo' but description is the very same as before\n})\n\u00a0\n// The equivalent call using update looks like this:\ntask.update({ title: 'foooo', description: 'baaaaaar'}, {fields: ['title']}).then(function() {\n // title will now be 'foooo' but description is the very same as before\n})\n\n\n\n\nWhen you call \nsave\n without changing any attribute, this method will execute nothing;\n\n\nDestroying / Deleting persistent instances\n\n\nOnce you created an object and got a reference to it\n you can delete it from the database\n The relevant method is \ndestroy\n\n\nTask.create({ title: 'a task' }).then(function(task) {\n  // now you see me...\n  return task.destroy();\n}).then(function() {\n\u00a0// now i'm gone :)\n})\n\n\n\n\nIf the \nparanoid\n options is true, the object will not be deleted, instead the \ndeletedAt\n column will be set to the current timestamp. To force the deletion, you can pass \nforce: true\n to the destroy call:\n\n\ntask.destroy({ force: true })\n\n\n\n\nWorking in bulk (creating, updating and destroying multiple rows at once)\n\n\nIn addition to updating a single instance, you can also create, update, and delete multiple instances at once. The functions you are looking for are called\n\n\n\n\nModel.bulkCreate\n\n\nModel.update\n\n\nModel.destroy\n\n\n\n\nSince you are working with multiple models, the callbacks will not return DAO instances. BulkCreate will return an array of model instances/DAOs, they will however, unlike \ncreate\n, not have the resulting values of autoIncrement attributes.\nupdate\n and \ndestroy\n will return the number of affected rows.\n\n\nFirst lets look at bulkCreate\n\n\nUser.bulkCreate([\n  { username: 'barfooz', isAdmin: true },\n  { username: 'foo', isAdmin: true },\n  { username: 'bar', isAdmin: false }\n]).then(function() { // Notice: There are no arguments here, as of right now you'll have to...\n  return User.findAll();\n}).then(function(users) {\n  console.log(users) // ... in order to get the array of user objects\n})\n\n\n\n\nTo update several rows at once:\n\n\nTask.bulkCreate([\n  {subject: 'programming', status: 'executing'},\n  {subject: 'reading', status: 'executing'},\n  {subject: 'programming', status: 'finished'}\n]).then(function() {\n  return Task.update(\n    { status: 'inactive' }, /* set attributes' value */,\n    { where: { subject: 'programming' }} /* where criteria */\n  );\n}).spread(function(affectedCount, affectedRows) {\n  // .update returns two values in an array, therefore we use .spread\n  // Notice that affectedRows will only be defined in dialects which support returning: true\n\n  // affectedCount will be 2\n  return Task.findAll();\n}).then(function(tasks) {\n  console.log(tasks) // the 'programming' tasks will both have a status of 'inactive'\n})\n\n\n\n\nAnd delete them:\n\n\nTask.bulkCreate([\n  {subject: 'programming', status: 'executing'},\n  {subject: 'reading', status: 'executing'},\n  {subject: 'programming', status: 'finished'}\n]).then(function() {\n  return Task.destroy({\n    where: {\n      subject: 'programming'\n    },\n    truncate: true /* this will ignore where and truncate the table instead */\n  });\n}).then(function(affectedRows) {\n  // affectedRows will be 2\n  return Task.findAll();\n}).then(function(tasks) {\n  console.log(tasks) // no programming, just reading :(\n})\n\n\n\n\nIf you are accepting values directly from the user, it might be beneficial to limit the columns that you want to actually insert.\nbulkCreate()\naccepts an options object as the second parameter. The object can have a \nfields\n parameter, \nan array\n to let it know which fields you want to build explicitly\n\n\nUser.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true}\n], { fields: ['username'] }).then(function() {\n  // nope bar, you can't be admin!\n})\n\n\n\n\nbulkCreate\n was originally made to be a mainstream\nfast way of inserting records\n however\n sometimes you want the luxury of being able to insert multiple rows at once without sacrificing model validations even when you explicitly tell Sequelize which columns to sift through\n You can do by adding a \nvalidate: true\n property to the options object.\n\n\nvar Tasks = sequelize.define('task', {\n  name: {\n    type: Sequelize.STRING,\n    validate: {\n      notNull: { args: true, msg: 'name cannot be null' }\n    }\n  },\n  code: {\n    type: Sequelize.STRING,\n    validate: {\n      len: [3, 10]\n    }\n  }\n})\n\u00a0\nTasks.bulkCreate([\n  {name: 'foo', code: '123'},\n  {code: '1234'},\n  {name: 'bar', code: '1'}\n], { validate: true }).catch(function(errors) {\n  /* console.log(errors) would look like:\n  [\n    { record:\n    ...\n    errors:\n      { name: 'SequelizeValidationError',\n        message: 'Validation error',\n        errors: [Object] } },\n    { record:\n      ...\n      errors:\n        { name: 'SequelizeValidationError',\n        message: 'Validation error',\n        errors: [Object] } }\n  ]\n  */\n})\n\n\n\n\nValues of an instance\n\n\nIf you log an instance you will notice\n that there is a lot of additional stuff\n In order to hide such stuff and reduce it to the very interesting information\n you can use the\nget\n-attribute\n Calling it with the option \nplain\n = true will only return the values of an instance\n\n\nPerson.create({\n  name: 'Rambow',\n  firstname: 'John'\n}).then(function(john) {\n  console.log(john.get({\n    plain: true\n  }))\n})\n\u00a0\n// result:\n\u00a0\n// { name: 'Rambow',\n//   firstname: 'John',\n//   id: 1,\n//   createdAt: Tue, 01 May 2012 19:12:16 GMT,\n//   updatedAt: Tue, 01 May 2012 19:12:16 GMT\n// }\n\n\n\n\nHint\nYou can also transform an instance into JSON by using \nJSON.stringify(instance)\n This will basically return the very same as \nvalues\n\n\nReloading instances\n\n\nIf you need to get your instance in sync\n you can use the method\nreload\n It will fetch the current data from the database and overwrite the attributes of the model on which the method has been called on\n\n\nPerson.findOne({ where: { name: 'john' } }).then(function(person) {\n  person.name = 'jane'\n  console.log(person.name) // 'jane'\n\u00a0\n  person.reload().then(function() {\n    console.log(person.name) // 'john'\n  })\n})\n\n\n\n\nIncrementing certain values of an instance\n\n\nIn order to increment values of an instance without running into concurrency issues\n you may use \nincrement\n\n\nFirst of all you can define a field and the value you want to add to it\n\n\nUser.findById(1).then(function(user) {\n  return user.increment('my-integer-field', {by: 2})\n}).then(/* ... */)\n\n\n\n\nSecond\n you can define multiple fields and the value you want to add to them\n\n\nUser.findById(1).then(function(user) {\n  return user.increment([ 'my-integer-field', 'my-very-other-field' ], {by: 2})\n}).then(/* ... */)\n\n\n\n\nThird\n you can define an object containing fields and its increment values\n\n\nUser.findById(1).then(function(user) {\n  return user.increment({\n    'my-integer-field':    2,\n    'my-very-other-field': 3\n  })\n}).then(/* ... */)\n\n\n\n\nDecrementing certain values of an instance\n\n\nIn order to decrement values of an instance without running into concurrency issues\n you may use \ndecrement\n\n\nFirst of all you can define a field and the value you want to add to it\n\n\nUser.findById(1).then(function(user) {\n  return user.decrement('my-integer-field', {by: 2})\n}).then(/* ... */)\n\n\n\n\nSecond\n you can define multiple fields and the value you want to add to them\n\n\nUser.findById(1).then(function(user) {\n  return user.decrement([ 'my-integer-field', 'my-very-other-field' ], {by: 2})\n}).then(/* ... */)\n\n\n\n\nThird\n you can define an object containing fields and its decrement values\n\n\nUser.findById(1).then(function(user) {\n  return user.decrement({\n    'my-integer-field':    2,\n    'my-very-other-field': 3\n  })\n}).then(/* ... */)", 
            "title": "Instances"
        }, 
        {
            "location": "/docs/instances/#building-a-non-persistent-instance", 
            "text": "In order to create instances of defined classes just do as follows  You might recognize the syntax if you coded Ruby in the past  Using the  build -method will return an unsaved object  which you explicitly have to save  var project = Project.build({\n  title: 'my awesome project',\n  description: 'woot woot. this will make me a rich man'\n})\n\u00a0\nvar task = Task.build({\n  title: 'specify the project idea',\n  description: 'bla',\n  deadline: new Date()\n})  Built instances will automatically get default values when they were defined  // first define the model\nvar Task = sequelize.define('task', {\n  title: Sequelize.STRING,\n  rating: { type: Sequelize.STRING, defaultValue: 3 }\n})\n\u00a0\n// now instantiate an object\nvar task = Task.build({title: 'very important task'})\n\u00a0\ntask.title  // ==  'very important task'\ntask.rating // ==  3  To get it stored in the database  use the  save -method and catch the events ... if needed  project.save().then(function() {\n  // my nice callback stuff\n})\n\u00a0\ntask.save().catch(function(error) {\n  // mhhh, wth!\n})\n\u00a0\n// you can also build, save and access the object with chaining:\nTask\n  .build({ title: 'foo', description: 'bar', deadline: new Date() })\n  .save()\n  .then(function(anotherTask) {\n    // you can now access the currently saved task with the variable anotherTask... nice!\n  }).catch(function(error) {\n    // Ooops, do some error-handling\n  })", 
            "title": "Building a non-persistent instance"
        }, 
        {
            "location": "/docs/instances/#creating-persistent-instances", 
            "text": "Besides constructing objects  that needs an explicit save call to get stored in the database  there is also the possibility to do all those steps with one single command  It's called  create .  Task.create({ title: 'foo', description: 'bar', deadline: new Date() }).then(function(task) {\n  // you can now access the newly created task via the variable task\n})  It is also possible to define which attributes can be set via the create method  This can be especially very handy if you create database entries based on a form which can be filled by a user  Using that would for example allow you to restrict the  User  model to set only a username and an address but not an admin flag  User.create({ username: 'barfooz', isAdmin: true }, { fields: [ 'username' ] }).then(function(user) {\n  // let's assume the default of isAdmin is false:\n  console.log(user.get({\n    plain: true\n  })) // =  { username: 'barfooz', isAdmin: false }\n})", 
            "title": "Creating persistent instances"
        }, 
        {
            "location": "/docs/instances/#updating-saving-persisting-an-instance", 
            "text": "Now lets change some values and save changes to the database  There are two ways to do that  // way 1\ntask.title = 'a very different title now'\ntask.save().then(function() {})\n\u00a0\n// way 2\ntask.update({\n  title: 'a very different title now'\n}).then(function() {})  It's also possible to define which attributes should be saved when calling  save  by passing an array of column names  This is useful when you set attributes based on a previously defined object  E g  if you get the values of an object via a form of a web app  Furthermore this is used internally for  update  This is how it looks like  task.title = 'foooo'\ntask.description = 'baaaaaar'\ntask.save({fields: ['title']}).then(function() {\n // title will now be 'foooo' but description is the very same as before\n})\n\u00a0\n// The equivalent call using update looks like this:\ntask.update({ title: 'foooo', description: 'baaaaaar'}, {fields: ['title']}).then(function() {\n // title will now be 'foooo' but description is the very same as before\n})  When you call  save  without changing any attribute, this method will execute nothing;", 
            "title": "Updating / Saving / Persisting an instance"
        }, 
        {
            "location": "/docs/instances/#destroying-deleting-persistent-instances", 
            "text": "Once you created an object and got a reference to it  you can delete it from the database  The relevant method is  destroy  Task.create({ title: 'a task' }).then(function(task) {\n  // now you see me...\n  return task.destroy();\n}).then(function() {\n\u00a0// now i'm gone :)\n})  If the  paranoid  options is true, the object will not be deleted, instead the  deletedAt  column will be set to the current timestamp. To force the deletion, you can pass  force: true  to the destroy call:  task.destroy({ force: true })", 
            "title": "Destroying / Deleting persistent instances"
        }, 
        {
            "location": "/docs/instances/#working-in-bulk-creating-updating-and-destroying-multiple-rows-at-once", 
            "text": "In addition to updating a single instance, you can also create, update, and delete multiple instances at once. The functions you are looking for are called   Model.bulkCreate  Model.update  Model.destroy   Since you are working with multiple models, the callbacks will not return DAO instances. BulkCreate will return an array of model instances/DAOs, they will however, unlike  create , not have the resulting values of autoIncrement attributes. update  and  destroy  will return the number of affected rows.  First lets look at bulkCreate  User.bulkCreate([\n  { username: 'barfooz', isAdmin: true },\n  { username: 'foo', isAdmin: true },\n  { username: 'bar', isAdmin: false }\n]).then(function() { // Notice: There are no arguments here, as of right now you'll have to...\n  return User.findAll();\n}).then(function(users) {\n  console.log(users) // ... in order to get the array of user objects\n})  To update several rows at once:  Task.bulkCreate([\n  {subject: 'programming', status: 'executing'},\n  {subject: 'reading', status: 'executing'},\n  {subject: 'programming', status: 'finished'}\n]).then(function() {\n  return Task.update(\n    { status: 'inactive' }, /* set attributes' value */,\n    { where: { subject: 'programming' }} /* where criteria */\n  );\n}).spread(function(affectedCount, affectedRows) {\n  // .update returns two values in an array, therefore we use .spread\n  // Notice that affectedRows will only be defined in dialects which support returning: true\n\n  // affectedCount will be 2\n  return Task.findAll();\n}).then(function(tasks) {\n  console.log(tasks) // the 'programming' tasks will both have a status of 'inactive'\n})  And delete them:  Task.bulkCreate([\n  {subject: 'programming', status: 'executing'},\n  {subject: 'reading', status: 'executing'},\n  {subject: 'programming', status: 'finished'}\n]).then(function() {\n  return Task.destroy({\n    where: {\n      subject: 'programming'\n    },\n    truncate: true /* this will ignore where and truncate the table instead */\n  });\n}).then(function(affectedRows) {\n  // affectedRows will be 2\n  return Task.findAll();\n}).then(function(tasks) {\n  console.log(tasks) // no programming, just reading :(\n})  If you are accepting values directly from the user, it might be beneficial to limit the columns that you want to actually insert. bulkCreate() accepts an options object as the second parameter. The object can have a  fields  parameter,  an array  to let it know which fields you want to build explicitly  User.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true}\n], { fields: ['username'] }).then(function() {\n  // nope bar, you can't be admin!\n})  bulkCreate  was originally made to be a mainstream fast way of inserting records  however  sometimes you want the luxury of being able to insert multiple rows at once without sacrificing model validations even when you explicitly tell Sequelize which columns to sift through  You can do by adding a  validate: true  property to the options object.  var Tasks = sequelize.define('task', {\n  name: {\n    type: Sequelize.STRING,\n    validate: {\n      notNull: { args: true, msg: 'name cannot be null' }\n    }\n  },\n  code: {\n    type: Sequelize.STRING,\n    validate: {\n      len: [3, 10]\n    }\n  }\n})\n\u00a0\nTasks.bulkCreate([\n  {name: 'foo', code: '123'},\n  {code: '1234'},\n  {name: 'bar', code: '1'}\n], { validate: true }).catch(function(errors) {\n  /* console.log(errors) would look like:\n  [\n    { record:\n    ...\n    errors:\n      { name: 'SequelizeValidationError',\n        message: 'Validation error',\n        errors: [Object] } },\n    { record:\n      ...\n      errors:\n        { name: 'SequelizeValidationError',\n        message: 'Validation error',\n        errors: [Object] } }\n  ]\n  */\n})", 
            "title": "Working in bulk (creating, updating and destroying multiple rows at once)"
        }, 
        {
            "location": "/docs/instances/#values-of-an-instance", 
            "text": "If you log an instance you will notice  that there is a lot of additional stuff  In order to hide such stuff and reduce it to the very interesting information  you can use the get -attribute  Calling it with the option  plain  = true will only return the values of an instance  Person.create({\n  name: 'Rambow',\n  firstname: 'John'\n}).then(function(john) {\n  console.log(john.get({\n    plain: true\n  }))\n})\n\u00a0\n// result:\n\u00a0\n// { name: 'Rambow',\n//   firstname: 'John',\n//   id: 1,\n//   createdAt: Tue, 01 May 2012 19:12:16 GMT,\n//   updatedAt: Tue, 01 May 2012 19:12:16 GMT\n// }  Hint You can also transform an instance into JSON by using  JSON.stringify(instance)  This will basically return the very same as  values", 
            "title": "Values of an instance"
        }, 
        {
            "location": "/docs/instances/#reloading-instances", 
            "text": "If you need to get your instance in sync  you can use the method reload  It will fetch the current data from the database and overwrite the attributes of the model on which the method has been called on  Person.findOne({ where: { name: 'john' } }).then(function(person) {\n  person.name = 'jane'\n  console.log(person.name) // 'jane'\n\u00a0\n  person.reload().then(function() {\n    console.log(person.name) // 'john'\n  })\n})", 
            "title": "Reloading instances"
        }, 
        {
            "location": "/docs/instances/#incrementing-certain-values-of-an-instance", 
            "text": "In order to increment values of an instance without running into concurrency issues  you may use  increment  First of all you can define a field and the value you want to add to it  User.findById(1).then(function(user) {\n  return user.increment('my-integer-field', {by: 2})\n}).then(/* ... */)  Second  you can define multiple fields and the value you want to add to them  User.findById(1).then(function(user) {\n  return user.increment([ 'my-integer-field', 'my-very-other-field' ], {by: 2})\n}).then(/* ... */)  Third  you can define an object containing fields and its increment values  User.findById(1).then(function(user) {\n  return user.increment({\n    'my-integer-field':    2,\n    'my-very-other-field': 3\n  })\n}).then(/* ... */)", 
            "title": "Incrementing certain values of an instance"
        }, 
        {
            "location": "/docs/instances/#decrementing-certain-values-of-an-instance", 
            "text": "In order to decrement values of an instance without running into concurrency issues  you may use  decrement  First of all you can define a field and the value you want to add to it  User.findById(1).then(function(user) {\n  return user.decrement('my-integer-field', {by: 2})\n}).then(/* ... */)  Second  you can define multiple fields and the value you want to add to them  User.findById(1).then(function(user) {\n  return user.decrement([ 'my-integer-field', 'my-very-other-field' ], {by: 2})\n}).then(/* ... */)  Third  you can define an object containing fields and its decrement values  User.findById(1).then(function(user) {\n  return user.decrement({\n    'my-integer-field':    2,\n    'my-very-other-field': 3\n  })\n}).then(/* ... */)", 
            "title": "Decrementing certain values of an instance"
        }, 
        {
            "location": "/docs/associations/", 
            "text": "This section describes the various association types in sequelize. When calling a method such as \nUser.hasOne(Project)\n, we say that the \nUser\n model (the model that the function is being invoked on) is the \nsource\n and the \nProject\n model (the model being passed as an argument) is the \ntarget\n.\n\n\nOne-To-One associations\n\n\nOne-To-One associations are associations between exactly two models connected by a single foreign key.\n\n\nBelongsTo\n\n\nBelongsTo associations are associations where the foreign key for the one-to-one relation exists on the \nsource model\n.\n\n\nA simple example would be a \nPlayer\n being part of a \nTeam\n with the foreign key on the player.\n\n\nvar Player = this.sequelize.define('player', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});\n\nPlayer.belongsTo(Team); // Will add a teamId attribute to Player to hold the primary key value for Team\n\n\n\n\nForeign keys\n\n\nBy default the foreign key for a belongsTo relation will be generated from the target model name and the target primary key name.\n\n\nThe default casing is \ncamelCase\n however if the source model is configured with \nunderscored: true\n the foreignKey will be \nsnake_case\n.\n\n\nvar User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company); // Will add companyId to user\n\nvar User = this.sequelize.define('user', {/* attributes */}, {underscored: true})\n  , Company  = this.sequelize.define('company', {\n    uuid: {\n      type: Sequelize.UUID,\n      primaryKey: true\n    }\n  });\n\nUser.belongsTo(Company); // Will add company_uuid to user\n\n\n\n\nIn cases where \nas\n has been defined it will be used in place of the target model name.\n\n\nvar User = this.sequelize.define('user', {/* attributes */})\n  , UserRole  = this.sequelize.define('userRole', {/* attributes */});\n\nUser.belongsTo(UserRole, {as: 'role'}); // Adds roleId to user rather than userRoleId\n\n\n\n\nIn all cases the default foreign key can be overwritten with the \nforeignKey\n option.\nWhen the foreign key option is used, Sequelize will use it as-is:\n\n\nvar User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: 'fk_company'}); // Adds fk_company to User\n\n\n\n\nTarget keys\n\n\nThe target key is the column on the target model that the foreign key column on the source model points to. By default the target key for a belongsTo relation will be the target model's primary key. To define a custom column, use the \ntargetKey\n option.\n\n\nvar User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: 'fk_companyname', targetKey: 'name'}); // Adds fk_companyname to User\n\n\n\n\nHasOne\n\n\nHasOne associations are associations where the foreign key for the one-to-one relation exists on the \ntarget model\n.\n\n\nvar User = sequelize.define('user', {/* ... */})\nvar Project = sequelize.define('project', {/* ... */})\n\u00a0\n// One-way associations\nProject.hasOne(User)\n\n/*\n  In this example hasOne will add an attribute projectId to the User model!\n  Furthermore, Project.prototype will gain the methods getUser and setUser according\n  to the first parameter passed to define. If you have underscore style\n  enabled, the added attribute will be project_id instead of projectId.\n\n  The foreign key will be placed on the users table.\n\n  You can also define the foreign key, e.g. if you already have an existing\n  database and want to work on it:\n*/\n\u00a0\nProject.hasOne(User, { foreignKey: 'initiator_id' })\n\u00a0\n/*\n  Because Sequelize will use the model's name (first parameter of define) for\n  the accessor methods, it is also possible to pass a special option to hasOne:\n*/\n\u00a0\nProject.hasOne(User, { as: 'Initiator' })\n// Now you will get Project#getInitiator and Project#setInitiator\n\u00a0\n// Or let's define some self references\nvar Person = sequelize.define('person', { /* ... */})\n\u00a0\nPerson.hasOne(Person, {as: 'Father'})\n// this will add the attribute FatherId to Person\n\u00a0\n// also possible:\nPerson.hasOne(Person, {as: 'Father', foreignKey: 'DadId'})\n// this will add the attribute DadId to Person\n\u00a0\n// In both cases you will be able to do:\nPerson#setFather\nPerson#getFather\n\u00a0\n// If you need to join a table twice you can double join the same table\nTeam.hasOne(Game, {as: 'HomeTeam', foreignKey : 'homeTeamId'});\nTeam.hasOne(Game, {as: 'AwayTeam', foreignKey : 'awayTeamId'});\n\nGame.belongsTo(Team);\n\n\n\n\nEven though it is called a HasOne association, for most 1:1 relations you usually want the BelongsTo association since BelongsTo will add the foreignKey on the source where hasOne will add on the target.\n\n\nDifference between HasOne and BelongsTo\n\n\nIn Sequelize 1:1 relationship can be set using HasOne and BelongsTo. They are suitable for different scenarios. Lets study this difference using an example.\n\n\nSuppose we have two tables to link \nPlayer\n and \nTeam\n. Lets define their models.\n\n\nvar Player = this.sequelize.define('player', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});\n\n\n\n\nWhen we link two model in Sequelize we can refer them as pairs of \nsource\n and \ntarget\n models. Like this\n\n\nHaving \nPlayer\n as the \nsource\n and \nTeam\n as the \ntarget\n\n\nPlayer.belongsTo(Team);\n//Or\nPlayer.hasOne(Team);\n\n\n\n\nHaving \nTeam\n as the \nsource\n and \nPlayer\n as the \ntarget\n\n\nTeam.belongsTo(Player);\n//Or\nTeam.hasOne(Player);\n\n\n\n\nHasOne and BelongsTo insert the association key in different models from each other. HasOne inserts the association key in \ntarget\n model whereas BelongsTo inserts the association key in the \nsource\n model.\n\n\nHere is an example demonstrating use cases of BelongsTo and HasOne.\n\n\nvar Player = this.sequelize.define('player', {/* attributes */})\n  , Coach  = this.sequelize.define('coach', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});\n\n\n\n\nSuppose our \nPlayer\n model has information about its team as \nteamId\n column. Information about each Team's \nCoach\n is stored in the \nTeam\n model as \ncoachId\n column. These both scenarios requires different kind of 1:1 relation because foreign key relation is present on different models each time.\n\n\nWhen information about association is present in \nsource\n model we can use \nbelongsTo\n. In this case \nPlayer\n is suitable for \nbelongsTo\n because it has \nteamId\n column.\n\n\nPlayer.belongsTo(Team)  // `teamId` will be added on Player / Source model\n\n\n\n\nWhen information about association is present in \ntarget\n model we can use \nhasOne\n. In this case \nCoach\n is suitable for \nhasOne\n because \nTeam\n model store information about its \nCoach\n as \ncoachId\n field.\n\n\nCoach.hasOne(Team)  // `coachId` will be added on Team / Target model\n\n\n\n\nOne-To-Many associations\n\n\nOne-To-Many associations are connecting one source with multiple targets. The targets however are again connected to exactly one specific source.\n\n\nvar User = sequelize.define('user', {/* ... */})\nvar Project = sequelize.define('project', {/* ... */})\n\u00a0\n// OK. Now things get more complicated (not really visible to the user :)).\n// First let's define a hasMany association\nProject.hasMany(User, {as: 'Workers'})\n\n\n\n\nThis will add the attribute \nprojectId\n or \nproject_id\n to User. Instances of Project will get the accessors \ngetWorkers\n and \nsetWorkers\n. We could just leave it the way it is and let it be a one-way association.\nBut we want more! Let's define it the other way around by creating a many to many association in the next section:\n\n\nBelongs-To-Many associations\n\n\nBelongs-To-Many associations are used to connect sources with multiple targets. Furthermore the targets can also have connections to multiple sources.\n\n\nProject.belongsToMany(User, {through: 'UserProject'});\nUser.belongsToMany(Project, {through: 'UserProject'});\n\n\n\n\nThis will create a new model called UserProject with the equivalent foreign keys \nprojectId\n and \nuserId\n. Whether the attributes are camelcase or not depends on the two models joined by the table (in this case User and Project).\n\n\nDefining \nthrough\n is required. Sequelize would previously attempt to autogenerate names but that would not always lead to the most logical setups.\n\n\nThis will add methods \ngetUsers\n, \nsetUsers\n, \naddUser\n,\naddUsers\n to \nProject\n, and \ngetProjects\n, \nsetProjects\n, \naddProject\n, and \naddProjects\n to \nUser\n.\n\n\nSometimes you may want to rename your models when using them in associations. Let's define users as workers and projects as tasks by using the alias (\nas\n) option. We will also manually define the foreign keys to use:\n\n\nUser.belongsToMany(Project, { as: 'Tasks', through: 'worker_tasks', foreignKey: 'userId' })\nProject.belongsToMany(User, { as: 'Workers', through: 'worker_tasks', foreignKey: 'projectId' })\n\n\n\n\nforeignKey\n will allow you to set \nsource model\n key in the \nthrough\n relation.\n\notherKey\n will allow you to set \ntarget model\n key in the \nthrough\n relation.\n\n\nUser.belongsToMany(Project, { as: 'Tasks', through: 'worker_tasks', foreignKey: 'userId', otherKey: 'projectId'})\n\n\n\n\nOf course you can also define self references with belongsToMany:\n\n\nPerson.belongsToMany(Person, { as: 'Children', through: 'PersonChildren' })\n// This will create the table PersonChildren which stores the ids of the objects.\n\n\n\n\n\nIf you want additional attributes in your join table, you can define a model for the join table in sequelize, before you define the association, and then tell sequelize that it should use that model for joining, instead of creating a new one:\n\n\nUser = sequelize.define('user', {})\nProject = sequelize.define('project', {})\nUserProjects = sequelize.define('userProjects', {\n    status: DataTypes.STRING\n})\n\u00a0\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })\n\n\n\n\nTo add a new project to a user and set its status, you pass an extra object to the setter, which contains the attributes for the join table\n\n\nuser.addProject(project, { status: 'started' })\n\n\n\n\nBy default the code above will add projectId and userId to the UserProjects table, and \nremove any previously defined primary key attribute\n - the table will be uniquely identified by the combination of the keys of the two tables, and there is no reason to have other PK columns. To enforce a primary key on the \nUserProjects\n model you can add it manually.\n\n\nUserProjects = sequelize.define('userProjects', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  status: DataTypes.STRING\n})\n\n\n\n\nWith Belongs-To-Many you can query based on \nthrough\n relation and select specific attributes. For example using \nfindAll\n with \nthrough\n\n\nUser.findAll({\n  include: [{\n    model: Project,\n    through: {\n      attributes: ['createdAt', 'startedAt', 'finishedAt'],\n      where: {completed: true}\n    }\n  }]\n});\n\n\n\n\nScopes\n\n\nThis section concerns association scopes. For a definition of association scopes vs. scopes on associated models, see \nScopes\n.\n\n\nAssociation scopes allow you to place a scope (a set of default attributes for \nget\n and \ncreate\n) on the association. Scopes can be placed both on the associated model (the target of the association), and on the through table for n:m relations.\n\n\n1:m\n\n\nAssume we have tables Comment, Post and Image. A comment can be associated to either an image or a post via \ncommentable_id\n and \ncommentable\n - we say that Post and Image are \nCommentable\n\n\nthis.Comment = this.sequelize.define('comment', {\n  title: Sequelize.STRING,\n  commentable: Sequelize.STRING,\n  commentable_id: Sequelize.INTEGER\n});\n\nthis.Comment.prototype.getItem = function() {\n  return this['get' + this.get('commentable').substr(0, 1).toUpperCase() + this.get('commentable').substr(1)]();\n};\n\nthis.Post.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  scope: {\n    commentable: 'post'\n  }\n});\nthis.Comment.belongsTo(this.Post, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  as: 'post'\n});\n\nthis.Image.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  scope: {\n    commentable: 'image'\n  }\n});\nthis.Comment.belongsTo(this.Image, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  as: 'image'\n});\n\n\n\n\nconstraints: false,\n disables references constraints - since the \ncommentable_id\n column references several tables, we cannot add a \nREFERENCES\n constraint to it. Note that the Image -\n Comment and Post -\n Comment relations define a scope, \ncommentable: 'image'\n and \ncommentable: 'post'\n respectively. This scope is automatically applied when using the association functions:\n\n\nimage.getComments()\nSELECT * FROM comments WHERE commentable_id = 42 AND commentable = 'image';\n\nimage.createComment({\n  title: 'Awesome!'\n})\nINSERT INTO comments (title, commentable_id, commentable) VALUES ('Awesome!', 42, 'image');\n\nimage.addComment(comment);\nUPDATE comments SET commentable_id = 42, commentable = 'image'\n\n\n\n\nThe \ngetItem\n utility function on \nComment\n completes the picture - it simply converts the \ncommentable\n string into a call to either \ngetImage\n or \ngetPost\n, providing an abstraction over whether a comment belongs to a post or an image.\n\n\nn:m\n\n\nContinuing with the idea of a polymorphic model, consider a tag table - an item can have multiple tags, and a tag can be related to several items.\n\n\nFor brevity, the example only shows a Post model, but in reality Tag would be related to several other models.\n\n\nItemTag = sequelize.define('item_tag', {\n  id : {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  tag_id: {\n    type: DataTypes.INTEGER,\n    unique: 'item_tag_taggable'\n  },\n  taggable: {\n    type: DataTypes.STRING,\n    unique: 'item_tag_taggable'\n  },\n  taggable_id: {\n    type: DataTypes.INTEGER,\n    unique: 'item_tag_taggable',\n    references: null\n  }\n});\nTag = sequelize.define('tag', {\n  name: DataTypes.STRING\n});\n\nPost.belongsToMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: 'post'\n    }\n  },\n  foreignKey: 'taggable_id',\n  constraints: false\n});\nTag.belongsToMany(Post, {\n  through: {\n    model: ItemTag,\n    unique: false\n  },\n  foreignKey: 'tag_id',\n  constraints: false\n});\n\n\n\n\nNotice that the scoped column (\ntaggable\n) is now on the through model (\nItemTag\n).\n\n\nWe could also define a more restrictive association, for example to get all pending tags for a post by applying a scope of both the through model (\nItemTag\n) and the target model (\nTag\n):\n\n\nPost.hasMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: 'post'\n    }\n  },\n  scope: {\n    status: 'pending'\n  },\n  as: 'pendingTags',\n  foreignKey: 'taggable_id',\n  constraints: false\n});\n\nPost.getPendingTags();\n\n\n\n\nSELECT `tag`.*  INNER JOIN `item_tags` AS `item_tag`\nON `tag`.`id` = `item_tag`.`tagId`\n  AND `item_tag`.`taggable_id` = 42\n  AND `item_tag`.`taggable` = 'post'\nWHERE (`tag`.`status` = 'pending');\n\n\n\n\nconstraints: false\n disables references constraints on the \ntaggable_id\n column. Because the column is polymorphic, we cannot say that it \nREFERENCES\n a specific table.\n\n\nNaming strategy\n\n\nBy default sequelize will use the model name (the name passed to \nsequelize.define\n) to figure out the name of the model when used in associations. For example, a model named \nuser\n will add the functions \nget/set/add User\n to instances of the associated model, and a property named \n.user\n in eager loading, while a model named \nUser\n will add the same functions, but a property named \n.User\n (notice the upper case U) in eager loading.\n\n\nAs we've already seen, you can alias models in associations using \nas\n. In single associations (has one and belongs to), the alias should be singular, while for many associations (has many) it should be plural. Sequelize then uses the \ninflection \nlibrary to convert the alias to its singular form. However, this might not always work for irregular or non-english words. In this case, you can provide both the plural and the singular form of the alias:\n\n\nUser.belongsToMany(Project, { as: { singular: 'task', plural: 'tasks' }})\n// Notice that inflection has no problem singularizing tasks, this is just for illustrative purposes.\n\n\n\n\nIf you know that a model will always use the same alias in associations, you can provide it when creating the model\n\n\nvar Project = sequelize.define('project', attributes, {\n  name: {\n    singular: 'task',\n    plural: 'tasks',\n  }\n})\n\u00a0\nUser.belongsToMany(Project);\n\n\n\n\nThis will add the functions \nadd/set/get Tasks\n to user instances.\n\n\nRemember, that using \nas\n to change the name of the association will also change the name of the foreign key. When using \nas\n, it is safest to also specify the foreign key.\n\n\nInvoice.belongsTo(Subscription)\nSubscription.hasMany(Invoice)\n\n\n\n\nWithout \nas\n, this adds \nsubscriptionId\n as expected. However, if you were to say \nInvoice.belongsTo(Subscription, { as: 'TheSubscription' })\n, you will have both \nsubscriptionId\n and \ntheSubscriptionId\n, because sequelize is not smart enough to figure that the calls are two sides of the same relation. 'foreignKey' fixes this problem;\n\n\nInvoice.belongsTo(Subscription, , { as: 'TheSubscription', foreignKey: 'subscription_id' })\nSubscription.hasMany(Invoice, { foreignKey: 'subscription_id' )\n\n\n\n\nAssociating objects\n\n\nBecause Sequelize is doing a lot of magic, you have to call \nSequelize.sync\n after setting the associations! Doing so will allow you the following:\n\n\nProject.belongsToMany(Task)\nTask.belongsToMany(Project)\n\u00a0\nProject.create()...\nTask.create()...\nTask.create()...\n\u00a0\n// save them... and then:\nproject.setTasks([task1, task2]).then(function() {\n  // saved!\n})\n\u00a0\n// ok, now they are saved... how do I get them later on?\nproject.getTasks().then(function(associatedTasks) {\n  // associatedTasks is an array of tasks\n})\n\u00a0\n// You can also pass filters to the getter method.\n// They are equal to the options you can pass to a usual finder method.\nproject.getTasks({ where: 'id \n 10' }).then(function(tasks) {\n  // tasks with an id greater than 10 :)\n})\n\u00a0\n// You can also only retrieve certain fields of a associated object.\nproject.getTasks({attributes: ['title']}).then(function(tasks) {\n    // retrieve tasks with the attributes \ntitle\n and \nid\n\n})\n\n\n\n\nTo remove created associations you can just call the set method without a specific id:\n\n\n// remove the association with task1\nproject.setTasks([task2]).then(function(associatedTasks) {\n  // you will get task2 only\n})\n\u00a0\n// remove 'em all\nproject.setTasks([]).then(function(associatedTasks) {\n  // you will get an empty array\n})\n\u00a0\n// or remove 'em more directly\nproject.removeTask(task1).then(function() {\n  // it's gone\n})\n\u00a0\n// and add 'em again\nproject.addTask(task1).then(function() {\n  // it's back again\n})\n\n\n\n\nYou can of course also do it vice versa:\n\n\n// project is associated with task1 and task2\ntask2.setProject(null).then(function() {\n  // and it's gone\n})\n\n\n\n\nFor hasOne/belongsTo its basically the same:\n\n\nTask.hasOne(User, {as: \nAuthor\n})\nTask#setAuthor(anAuthor)\n\n\n\n\nAdding associations to a relation with a custom join table can be done in two ways (continuing with the associations defined in the previous chapter):\n\n\n// Either by adding a property with the name of the join table model to the object, before creating the association\nproject.UserProjects = {\n  status: 'active'\n}\nu.addProject(project)\n\u00a0\n// Or by providing a second argument when adding the association, containing the data that should go in the join table\nu.addProject(project, { status: 'active' })\n\u00a0\n\u00a0\n// When associating multiple objects, you can combine the two options above. In this case the second argument\n// will be treated as a defaults object, that will be used if no data is provided\nproject1.UserProjects = {\n    status: 'inactive'\n}\n\u00a0\nu.setProjects([project1, project2], { status: 'active' })\n// The code above will record inactive for project one, and active for project two in the join table\n\n\n\n\nWhen getting data on an association that has a custom join table, the data from the join table will be returned as a DAO instance:\n\n\nu.getProjects().then(function(projects) {\n  var project = projects[0]\n\u00a0\n  if (project.UserProjects.status === 'active') {\n    // .. do magic\n\u00a0\n    // since this is a real DAO instance, you can save it directly after you are done doing magic\n    return project.UserProjects.save()\n  }\n})\n\n\n\n\nIf you only need some of the attributes from the join table, you can provide an array with the attributes you want:\n\n\n// This will select only name from the Projects table, and only status from the UserProjects table\nuser.getProjects({ attributes: ['name'], joinTableAttributes: ['status']})\n\n\n\n\nCheck associations\n\n\nYou can also check if an object is already associated with another one (N:M only). Here is how you'd do it:\n\n\n// check if an object is one of associated ones:\nProject.create({ /* */ }).then(function(project) {\n  return User.create({ /* */ }).then(function(user) {\n    return project.hasUser(user).then(function(result) {\n      // result would be false\n      return project.addUser(user).then(function() {\n        return project.hasUser(user).then(function(result) {\n          // result would be true\n        })\n      })\n    })\n  })\n})\n\u00a0\n// check if all associated objects are as expected:\n// let's assume we have already a project and two users\nproject.setUsers([user1, user2]).then(function() {\n  return project.hasUsers([user1]);\n}).then(function(result) {\n  // result would be false\n  return project.hasUsers([user1, user2]);\n}).then(function(result) {\n  // result would be true\n})\n\n\n\n\nForeign Keys\n\n\nWhen you create associations between your models in sequelize, foreign key references with constraints will automatically be created. The setup below:\n\n\nvar Task = this.sequelize.define('task', { title: Sequelize.STRING })\n  , User = this.sequelize.define('user', { username: Sequelize.STRING })\n\u00a0\nUser.hasMany(Task)\nTask.belongsTo(User)\n\n\n\n\nWill generate the following SQL:\n\n\nCREATE TABLE IF NOT EXISTS `User` (\n  `id` INTEGER PRIMARY KEY,\n  `username` VARCHAR(255)\n);\n\nCREATE TABLE IF NOT EXISTS `Task` (\n  `id` INTEGER PRIMARY KEY,\n  `title` VARCHAR(255),\n  `user_id` INTEGER REFERENCES `User` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);\n\n\n\n\nThe relation between task and user injects the \nuser_id\n foreign key on tasks, and marks it as a reference to the \nUser\n table. By default \nuser_id\n will be set to \nNULL\n if the referenced user is deleted, and updated if the id of the user id updated. These options can be overridden by passing \nonUpdate\n and \nonDelete\n options to the association calls. The validation options are \nRESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL\n.\n\n\nFor 1:1 and 1:m associations the default option is \nSET NULL\n for deletion, and \nCASCADE\n for updates. For n:m, the default for both is \nCASCADE\n. This means, that if you delete or update a row from one side of an n:m association, all the rows in the join table referencing that row will also be deleted or updated.\n\n\nAdding constraints between tables means that tables must be created in the database in a certain order, when using \nsequelize.sync\n. If Task has a reference to User, the User table must be created before the Task table can be created. This can sometimes lead to circular references, where sequelize cannot find an order in which to sync. Imagine a scenario of documents and versions. A document can have multiple versions, and for convenience, a document has an reference to it's current version.\n\n\nvar Document = this.sequelize.define('document', {\n      author: Sequelize.STRING\n    })\n  , Version = this.sequelize.define('version', {\n      timestamp: Sequelize.DATE\n    })\n\nDocument.hasMany(Version) // This adds document_id to version\nDocument.belongsTo(Version, { as: 'Current', foreignKey: 'current_version_id'}) // This adds current_version_id to document\n\n\n\n\nHowever, the code above will result in the following error: \nCyclic dependency found. 'Document' is dependent of itself. Dependency Chain: Document -\n Version =\n Document\n. In order to alleviate that, we can pass \nconstraints: false\n to one of the associations:\n\n\nDocument.hasMany(Version)\nDocument.belongsTo(Version, { as: 'Current', foreignKey: 'current_version_id', constraints: false})\n\n\n\n\nWhich will allow us to sync the tables correctly:\n\n\nCREATE TABLE IF NOT EXISTS `Document` (\n  `id` INTEGER PRIMARY KEY,\n  `author` VARCHAR(255),\n  `current_version_id` INTEGER\n);\nCREATE TABLE IF NOT EXISTS `Version` (\n  `id` INTEGER PRIMARY KEY,\n  `timestamp` DATETIME,\n  `document_id` INTEGER REFERENCES `Document` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);\n\n\n\n\nEnforcing a foreign key reference without constraints\n\n\nSome times you may want to reference another table, without adding any constraints, or associations. In that case you can manually add the reference attributes to your schema definition, and mark the relations between them.\n\n\nvar Series, Trainer, Video\n\u00a0\n// Series has a trainer_id=Trainer.id foreign reference key after we call Trainer.hasMany(series)\nSeries = sequelize.define('series', {\n  title:        DataTypes.STRING,\n  sub_title:    DataTypes.STRING,\n  description:  DataTypes.TEXT,\n\u00a0\n  // Set FK relationship (hasMany) with `Trainer`\n  trainer_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: \ntrainers\n,\n      key: \nid\n\n    }\n  }\n})\n\u00a0\nTrainer = sequelize.define('trainer', {\n  first_name: DataTypes.STRING,\n  last_name:  DataTypes.STRING\n});\n\u00a0\n// Video has a series_id=Series.id foreign reference key after we call Series.hasOne(Video)...\nVideo = sequelize.define('video', {\n  title:        DataTypes.STRING,\n  sequence:     DataTypes.INTEGER,\n  description:  DataTypes.TEXT,\n\u00a0\n  // set relationship (hasOne) with `Series`\n  series_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Series, // Can be both a string representing the table name, or a reference to the model\n      key:   \nid\n\n    }\n  }\n});\n\u00a0\nSeries.hasOne(Video);\nTrainer.hasMany(Series);\n\n\n\n\nCreating with associations\n\n\nAn instance can be created with nested association in one step, provided all elements are new.\n\n\nCreating elements of a \"BelongsTo\" or \"HasOne\" association\n\n\nConsider the following models:\n\n\nvar Product = this.sequelize.define('product', {\n  title: Sequelize.STRING\n});\nvar User = this.sequelize.define('user', {\n  first_name: Sequelize.STRING,\n  last_name: Sequelize.STRING\n});\n\nProduct.belongsTo(User);\n// Also works for `hasOne`\n\n\n\n\nA new \nProduct\n and \nUser\n can be created in one step in the following way:\n\n\nreturn Product.create({\n  title: 'Chair',\n  user: {\n    first_name: 'Mick',\n    last_name: 'Broadstone'\n  }\n}, {\n  include: [ User ]\n});\n\n\n\n\nHere, our user model is called \nuser\n, with a lowercase u - This means that the property in the object should also be \nuser\n. If the name given to \nsequelize.define\n was \nUser\n, the key in the object should also be \nUser\n.\n\n\nCreating elements of a \"BelongsTo\" association with an alias\n\n\nThe previous example can be extended to support an association alias.\n\n\nvar Creator = Product.belongsTo(User, {as: 'creator'});\n\nreturn Product.create({\n  title: 'Chair',\n  creator: {\n    first_name: 'Matt',\n    last_name: 'Hansen'\n  }\n}, {\n  include: [ Creator ]\n});\n\n\n\n\nCreating elements of a \"HasMany\" or \"BelongsToMany\" association\n\n\nLet's introduce the ability to associate a project with many tags. Setting up the models could look like:\n\n\nvar Tag = this.sequelize.define('tag', {\n  name: Sequelize.STRING\n});\n\nProduct.hasMany(Tag);\n// Also works for `belongsToMany`.\n\n\n\n\nNow we can create a project with multiple tags in the following way:\n\n\nProduct.create({\n  id: 1,\n  title: 'Chair',\n  tags: [\n    { name: 'Alpha'},\n    { name: 'Beta'}\n  ]\n}, {\n  include: [ Tag ]\n})\n\n\n\n\nAnd, we can modify this example to support an alias as well:\n\n\nvar Categories = Product.hasMany(Tag, {as: 'categories'});\n\nProduct.create({\n  id: 1,\n  title: 'Chair',\n  categories: [\n    {id: 1, name: 'Alpha'},\n    {id: 2, name: 'Beta'}\n  ]\n}, {\n  include: [{\n    model: Categories,\n    as: 'categories'\n  }]\n})", 
            "title": "Relations / Associations"
        }, 
        {
            "location": "/docs/associations/#one-to-one-associations", 
            "text": "One-To-One associations are associations between exactly two models connected by a single foreign key.", 
            "title": "One-To-One associations"
        }, 
        {
            "location": "/docs/associations/#belongsto", 
            "text": "BelongsTo associations are associations where the foreign key for the one-to-one relation exists on the  source model .  A simple example would be a  Player  being part of a  Team  with the foreign key on the player.  var Player = this.sequelize.define('player', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});\n\nPlayer.belongsTo(Team); // Will add a teamId attribute to Player to hold the primary key value for Team", 
            "title": "BelongsTo"
        }, 
        {
            "location": "/docs/associations/#foreign-keys", 
            "text": "By default the foreign key for a belongsTo relation will be generated from the target model name and the target primary key name.  The default casing is  camelCase  however if the source model is configured with  underscored: true  the foreignKey will be  snake_case .  var User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company); // Will add companyId to user\n\nvar User = this.sequelize.define('user', {/* attributes */}, {underscored: true})\n  , Company  = this.sequelize.define('company', {\n    uuid: {\n      type: Sequelize.UUID,\n      primaryKey: true\n    }\n  });\n\nUser.belongsTo(Company); // Will add company_uuid to user  In cases where  as  has been defined it will be used in place of the target model name.  var User = this.sequelize.define('user', {/* attributes */})\n  , UserRole  = this.sequelize.define('userRole', {/* attributes */});\n\nUser.belongsTo(UserRole, {as: 'role'}); // Adds roleId to user rather than userRoleId  In all cases the default foreign key can be overwritten with the  foreignKey  option.\nWhen the foreign key option is used, Sequelize will use it as-is:  var User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: 'fk_company'}); // Adds fk_company to User", 
            "title": "Foreign keys"
        }, 
        {
            "location": "/docs/associations/#target-keys", 
            "text": "The target key is the column on the target model that the foreign key column on the source model points to. By default the target key for a belongsTo relation will be the target model's primary key. To define a custom column, use the  targetKey  option.  var User = this.sequelize.define('user', {/* attributes */})\n  , Company  = this.sequelize.define('company', {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: 'fk_companyname', targetKey: 'name'}); // Adds fk_companyname to User", 
            "title": "Target keys"
        }, 
        {
            "location": "/docs/associations/#hasone", 
            "text": "HasOne associations are associations where the foreign key for the one-to-one relation exists on the  target model .  var User = sequelize.define('user', {/* ... */})\nvar Project = sequelize.define('project', {/* ... */})\n\u00a0\n// One-way associations\nProject.hasOne(User)\n\n/*\n  In this example hasOne will add an attribute projectId to the User model!\n  Furthermore, Project.prototype will gain the methods getUser and setUser according\n  to the first parameter passed to define. If you have underscore style\n  enabled, the added attribute will be project_id instead of projectId.\n\n  The foreign key will be placed on the users table.\n\n  You can also define the foreign key, e.g. if you already have an existing\n  database and want to work on it:\n*/\n\u00a0\nProject.hasOne(User, { foreignKey: 'initiator_id' })\n\u00a0\n/*\n  Because Sequelize will use the model's name (first parameter of define) for\n  the accessor methods, it is also possible to pass a special option to hasOne:\n*/\n\u00a0\nProject.hasOne(User, { as: 'Initiator' })\n// Now you will get Project#getInitiator and Project#setInitiator\n\u00a0\n// Or let's define some self references\nvar Person = sequelize.define('person', { /* ... */})\n\u00a0\nPerson.hasOne(Person, {as: 'Father'})\n// this will add the attribute FatherId to Person\n\u00a0\n// also possible:\nPerson.hasOne(Person, {as: 'Father', foreignKey: 'DadId'})\n// this will add the attribute DadId to Person\n\u00a0\n// In both cases you will be able to do:\nPerson#setFather\nPerson#getFather\n\u00a0\n// If you need to join a table twice you can double join the same table\nTeam.hasOne(Game, {as: 'HomeTeam', foreignKey : 'homeTeamId'});\nTeam.hasOne(Game, {as: 'AwayTeam', foreignKey : 'awayTeamId'});\n\nGame.belongsTo(Team);  Even though it is called a HasOne association, for most 1:1 relations you usually want the BelongsTo association since BelongsTo will add the foreignKey on the source where hasOne will add on the target.", 
            "title": "HasOne"
        }, 
        {
            "location": "/docs/associations/#difference-between-hasone-and-belongsto", 
            "text": "In Sequelize 1:1 relationship can be set using HasOne and BelongsTo. They are suitable for different scenarios. Lets study this difference using an example.  Suppose we have two tables to link  Player  and  Team . Lets define their models.  var Player = this.sequelize.define('player', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});  When we link two model in Sequelize we can refer them as pairs of  source  and  target  models. Like this  Having  Player  as the  source  and  Team  as the  target  Player.belongsTo(Team);\n//Or\nPlayer.hasOne(Team);  Having  Team  as the  source  and  Player  as the  target  Team.belongsTo(Player);\n//Or\nTeam.hasOne(Player);  HasOne and BelongsTo insert the association key in different models from each other. HasOne inserts the association key in  target  model whereas BelongsTo inserts the association key in the  source  model.  Here is an example demonstrating use cases of BelongsTo and HasOne.  var Player = this.sequelize.define('player', {/* attributes */})\n  , Coach  = this.sequelize.define('coach', {/* attributes */})\n  , Team  = this.sequelize.define('team', {/* attributes */});  Suppose our  Player  model has information about its team as  teamId  column. Information about each Team's  Coach  is stored in the  Team  model as  coachId  column. These both scenarios requires different kind of 1:1 relation because foreign key relation is present on different models each time.  When information about association is present in  source  model we can use  belongsTo . In this case  Player  is suitable for  belongsTo  because it has  teamId  column.  Player.belongsTo(Team)  // `teamId` will be added on Player / Source model  When information about association is present in  target  model we can use  hasOne . In this case  Coach  is suitable for  hasOne  because  Team  model store information about its  Coach  as  coachId  field.  Coach.hasOne(Team)  // `coachId` will be added on Team / Target model", 
            "title": "Difference between HasOne and BelongsTo"
        }, 
        {
            "location": "/docs/associations/#one-to-many-associations", 
            "text": "One-To-Many associations are connecting one source with multiple targets. The targets however are again connected to exactly one specific source.  var User = sequelize.define('user', {/* ... */})\nvar Project = sequelize.define('project', {/* ... */})\n\u00a0\n// OK. Now things get more complicated (not really visible to the user :)).\n// First let's define a hasMany association\nProject.hasMany(User, {as: 'Workers'})  This will add the attribute  projectId  or  project_id  to User. Instances of Project will get the accessors  getWorkers  and  setWorkers . We could just leave it the way it is and let it be a one-way association.\nBut we want more! Let's define it the other way around by creating a many to many association in the next section:", 
            "title": "One-To-Many associations"
        }, 
        {
            "location": "/docs/associations/#belongs-to-many-associations", 
            "text": "Belongs-To-Many associations are used to connect sources with multiple targets. Furthermore the targets can also have connections to multiple sources.  Project.belongsToMany(User, {through: 'UserProject'});\nUser.belongsToMany(Project, {through: 'UserProject'});  This will create a new model called UserProject with the equivalent foreign keys  projectId  and  userId . Whether the attributes are camelcase or not depends on the two models joined by the table (in this case User and Project).  Defining  through  is required. Sequelize would previously attempt to autogenerate names but that would not always lead to the most logical setups.  This will add methods  getUsers ,  setUsers ,  addUser , addUsers  to  Project , and  getProjects ,  setProjects ,  addProject , and  addProjects  to  User .  Sometimes you may want to rename your models when using them in associations. Let's define users as workers and projects as tasks by using the alias ( as ) option. We will also manually define the foreign keys to use:  User.belongsToMany(Project, { as: 'Tasks', through: 'worker_tasks', foreignKey: 'userId' })\nProject.belongsToMany(User, { as: 'Workers', through: 'worker_tasks', foreignKey: 'projectId' })  foreignKey  will allow you to set  source model  key in the  through  relation. otherKey  will allow you to set  target model  key in the  through  relation.  User.belongsToMany(Project, { as: 'Tasks', through: 'worker_tasks', foreignKey: 'userId', otherKey: 'projectId'})  Of course you can also define self references with belongsToMany:  Person.belongsToMany(Person, { as: 'Children', through: 'PersonChildren' })\n// This will create the table PersonChildren which stores the ids of the objects.  If you want additional attributes in your join table, you can define a model for the join table in sequelize, before you define the association, and then tell sequelize that it should use that model for joining, instead of creating a new one:  User = sequelize.define('user', {})\nProject = sequelize.define('project', {})\nUserProjects = sequelize.define('userProjects', {\n    status: DataTypes.STRING\n})\n\u00a0\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })  To add a new project to a user and set its status, you pass an extra object to the setter, which contains the attributes for the join table  user.addProject(project, { status: 'started' })  By default the code above will add projectId and userId to the UserProjects table, and  remove any previously defined primary key attribute  - the table will be uniquely identified by the combination of the keys of the two tables, and there is no reason to have other PK columns. To enforce a primary key on the  UserProjects  model you can add it manually.  UserProjects = sequelize.define('userProjects', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  status: DataTypes.STRING\n})  With Belongs-To-Many you can query based on  through  relation and select specific attributes. For example using  findAll  with  through  User.findAll({\n  include: [{\n    model: Project,\n    through: {\n      attributes: ['createdAt', 'startedAt', 'finishedAt'],\n      where: {completed: true}\n    }\n  }]\n});", 
            "title": "Belongs-To-Many associations"
        }, 
        {
            "location": "/docs/associations/#scopes", 
            "text": "This section concerns association scopes. For a definition of association scopes vs. scopes on associated models, see  Scopes .  Association scopes allow you to place a scope (a set of default attributes for  get  and  create ) on the association. Scopes can be placed both on the associated model (the target of the association), and on the through table for n:m relations.", 
            "title": "Scopes"
        }, 
        {
            "location": "/docs/associations/#1m", 
            "text": "Assume we have tables Comment, Post and Image. A comment can be associated to either an image or a post via  commentable_id  and  commentable  - we say that Post and Image are  Commentable  this.Comment = this.sequelize.define('comment', {\n  title: Sequelize.STRING,\n  commentable: Sequelize.STRING,\n  commentable_id: Sequelize.INTEGER\n});\n\nthis.Comment.prototype.getItem = function() {\n  return this['get' + this.get('commentable').substr(0, 1).toUpperCase() + this.get('commentable').substr(1)]();\n};\n\nthis.Post.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  scope: {\n    commentable: 'post'\n  }\n});\nthis.Comment.belongsTo(this.Post, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  as: 'post'\n});\n\nthis.Image.hasMany(this.Comment, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  scope: {\n    commentable: 'image'\n  }\n});\nthis.Comment.belongsTo(this.Image, {\n  foreignKey: 'commentable_id',\n  constraints: false,\n  as: 'image'\n});  constraints: false,  disables references constraints - since the  commentable_id  column references several tables, we cannot add a  REFERENCES  constraint to it. Note that the Image -  Comment and Post -  Comment relations define a scope,  commentable: 'image'  and  commentable: 'post'  respectively. This scope is automatically applied when using the association functions:  image.getComments()\nSELECT * FROM comments WHERE commentable_id = 42 AND commentable = 'image';\n\nimage.createComment({\n  title: 'Awesome!'\n})\nINSERT INTO comments (title, commentable_id, commentable) VALUES ('Awesome!', 42, 'image');\n\nimage.addComment(comment);\nUPDATE comments SET commentable_id = 42, commentable = 'image'  The  getItem  utility function on  Comment  completes the picture - it simply converts the  commentable  string into a call to either  getImage  or  getPost , providing an abstraction over whether a comment belongs to a post or an image.", 
            "title": "1:m"
        }, 
        {
            "location": "/docs/associations/#nm", 
            "text": "Continuing with the idea of a polymorphic model, consider a tag table - an item can have multiple tags, and a tag can be related to several items.  For brevity, the example only shows a Post model, but in reality Tag would be related to several other models.  ItemTag = sequelize.define('item_tag', {\n  id : {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  tag_id: {\n    type: DataTypes.INTEGER,\n    unique: 'item_tag_taggable'\n  },\n  taggable: {\n    type: DataTypes.STRING,\n    unique: 'item_tag_taggable'\n  },\n  taggable_id: {\n    type: DataTypes.INTEGER,\n    unique: 'item_tag_taggable',\n    references: null\n  }\n});\nTag = sequelize.define('tag', {\n  name: DataTypes.STRING\n});\n\nPost.belongsToMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: 'post'\n    }\n  },\n  foreignKey: 'taggable_id',\n  constraints: false\n});\nTag.belongsToMany(Post, {\n  through: {\n    model: ItemTag,\n    unique: false\n  },\n  foreignKey: 'tag_id',\n  constraints: false\n});  Notice that the scoped column ( taggable ) is now on the through model ( ItemTag ).  We could also define a more restrictive association, for example to get all pending tags for a post by applying a scope of both the through model ( ItemTag ) and the target model ( Tag ):  Post.hasMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: 'post'\n    }\n  },\n  scope: {\n    status: 'pending'\n  },\n  as: 'pendingTags',\n  foreignKey: 'taggable_id',\n  constraints: false\n});\n\nPost.getPendingTags();  SELECT `tag`.*  INNER JOIN `item_tags` AS `item_tag`\nON `tag`.`id` = `item_tag`.`tagId`\n  AND `item_tag`.`taggable_id` = 42\n  AND `item_tag`.`taggable` = 'post'\nWHERE (`tag`.`status` = 'pending');  constraints: false  disables references constraints on the  taggable_id  column. Because the column is polymorphic, we cannot say that it  REFERENCES  a specific table.", 
            "title": "n:m"
        }, 
        {
            "location": "/docs/associations/#naming-strategy", 
            "text": "By default sequelize will use the model name (the name passed to  sequelize.define ) to figure out the name of the model when used in associations. For example, a model named  user  will add the functions  get/set/add User  to instances of the associated model, and a property named  .user  in eager loading, while a model named  User  will add the same functions, but a property named  .User  (notice the upper case U) in eager loading.  As we've already seen, you can alias models in associations using  as . In single associations (has one and belongs to), the alias should be singular, while for many associations (has many) it should be plural. Sequelize then uses the  inflection  library to convert the alias to its singular form. However, this might not always work for irregular or non-english words. In this case, you can provide both the plural and the singular form of the alias:  User.belongsToMany(Project, { as: { singular: 'task', plural: 'tasks' }})\n// Notice that inflection has no problem singularizing tasks, this is just for illustrative purposes.  If you know that a model will always use the same alias in associations, you can provide it when creating the model  var Project = sequelize.define('project', attributes, {\n  name: {\n    singular: 'task',\n    plural: 'tasks',\n  }\n})\n\u00a0\nUser.belongsToMany(Project);  This will add the functions  add/set/get Tasks  to user instances.  Remember, that using  as  to change the name of the association will also change the name of the foreign key. When using  as , it is safest to also specify the foreign key.  Invoice.belongsTo(Subscription)\nSubscription.hasMany(Invoice)  Without  as , this adds  subscriptionId  as expected. However, if you were to say  Invoice.belongsTo(Subscription, { as: 'TheSubscription' }) , you will have both  subscriptionId  and  theSubscriptionId , because sequelize is not smart enough to figure that the calls are two sides of the same relation. 'foreignKey' fixes this problem;  Invoice.belongsTo(Subscription, , { as: 'TheSubscription', foreignKey: 'subscription_id' })\nSubscription.hasMany(Invoice, { foreignKey: 'subscription_id' )", 
            "title": "Naming strategy"
        }, 
        {
            "location": "/docs/associations/#associating-objects", 
            "text": "Because Sequelize is doing a lot of magic, you have to call  Sequelize.sync  after setting the associations! Doing so will allow you the following:  Project.belongsToMany(Task)\nTask.belongsToMany(Project)\n\u00a0\nProject.create()...\nTask.create()...\nTask.create()...\n\u00a0\n// save them... and then:\nproject.setTasks([task1, task2]).then(function() {\n  // saved!\n})\n\u00a0\n// ok, now they are saved... how do I get them later on?\nproject.getTasks().then(function(associatedTasks) {\n  // associatedTasks is an array of tasks\n})\n\u00a0\n// You can also pass filters to the getter method.\n// They are equal to the options you can pass to a usual finder method.\nproject.getTasks({ where: 'id   10' }).then(function(tasks) {\n  // tasks with an id greater than 10 :)\n})\n\u00a0\n// You can also only retrieve certain fields of a associated object.\nproject.getTasks({attributes: ['title']}).then(function(tasks) {\n    // retrieve tasks with the attributes  title  and  id \n})  To remove created associations you can just call the set method without a specific id:  // remove the association with task1\nproject.setTasks([task2]).then(function(associatedTasks) {\n  // you will get task2 only\n})\n\u00a0\n// remove 'em all\nproject.setTasks([]).then(function(associatedTasks) {\n  // you will get an empty array\n})\n\u00a0\n// or remove 'em more directly\nproject.removeTask(task1).then(function() {\n  // it's gone\n})\n\u00a0\n// and add 'em again\nproject.addTask(task1).then(function() {\n  // it's back again\n})  You can of course also do it vice versa:  // project is associated with task1 and task2\ntask2.setProject(null).then(function() {\n  // and it's gone\n})  For hasOne/belongsTo its basically the same:  Task.hasOne(User, {as:  Author })\nTask#setAuthor(anAuthor)  Adding associations to a relation with a custom join table can be done in two ways (continuing with the associations defined in the previous chapter):  // Either by adding a property with the name of the join table model to the object, before creating the association\nproject.UserProjects = {\n  status: 'active'\n}\nu.addProject(project)\n\u00a0\n// Or by providing a second argument when adding the association, containing the data that should go in the join table\nu.addProject(project, { status: 'active' })\n\u00a0\n\u00a0\n// When associating multiple objects, you can combine the two options above. In this case the second argument\n// will be treated as a defaults object, that will be used if no data is provided\nproject1.UserProjects = {\n    status: 'inactive'\n}\n\u00a0\nu.setProjects([project1, project2], { status: 'active' })\n// The code above will record inactive for project one, and active for project two in the join table  When getting data on an association that has a custom join table, the data from the join table will be returned as a DAO instance:  u.getProjects().then(function(projects) {\n  var project = projects[0]\n\u00a0\n  if (project.UserProjects.status === 'active') {\n    // .. do magic\n\u00a0\n    // since this is a real DAO instance, you can save it directly after you are done doing magic\n    return project.UserProjects.save()\n  }\n})  If you only need some of the attributes from the join table, you can provide an array with the attributes you want:  // This will select only name from the Projects table, and only status from the UserProjects table\nuser.getProjects({ attributes: ['name'], joinTableAttributes: ['status']})", 
            "title": "Associating objects"
        }, 
        {
            "location": "/docs/associations/#check-associations", 
            "text": "You can also check if an object is already associated with another one (N:M only). Here is how you'd do it:  // check if an object is one of associated ones:\nProject.create({ /* */ }).then(function(project) {\n  return User.create({ /* */ }).then(function(user) {\n    return project.hasUser(user).then(function(result) {\n      // result would be false\n      return project.addUser(user).then(function() {\n        return project.hasUser(user).then(function(result) {\n          // result would be true\n        })\n      })\n    })\n  })\n})\n\u00a0\n// check if all associated objects are as expected:\n// let's assume we have already a project and two users\nproject.setUsers([user1, user2]).then(function() {\n  return project.hasUsers([user1]);\n}).then(function(result) {\n  // result would be false\n  return project.hasUsers([user1, user2]);\n}).then(function(result) {\n  // result would be true\n})", 
            "title": "Check associations"
        }, 
        {
            "location": "/docs/associations/#foreign-keys_1", 
            "text": "When you create associations between your models in sequelize, foreign key references with constraints will automatically be created. The setup below:  var Task = this.sequelize.define('task', { title: Sequelize.STRING })\n  , User = this.sequelize.define('user', { username: Sequelize.STRING })\n\u00a0\nUser.hasMany(Task)\nTask.belongsTo(User)  Will generate the following SQL:  CREATE TABLE IF NOT EXISTS `User` (\n  `id` INTEGER PRIMARY KEY,\n  `username` VARCHAR(255)\n);\n\nCREATE TABLE IF NOT EXISTS `Task` (\n  `id` INTEGER PRIMARY KEY,\n  `title` VARCHAR(255),\n  `user_id` INTEGER REFERENCES `User` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);  The relation between task and user injects the  user_id  foreign key on tasks, and marks it as a reference to the  User  table. By default  user_id  will be set to  NULL  if the referenced user is deleted, and updated if the id of the user id updated. These options can be overridden by passing  onUpdate  and  onDelete  options to the association calls. The validation options are  RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL .  For 1:1 and 1:m associations the default option is  SET NULL  for deletion, and  CASCADE  for updates. For n:m, the default for both is  CASCADE . This means, that if you delete or update a row from one side of an n:m association, all the rows in the join table referencing that row will also be deleted or updated.  Adding constraints between tables means that tables must be created in the database in a certain order, when using  sequelize.sync . If Task has a reference to User, the User table must be created before the Task table can be created. This can sometimes lead to circular references, where sequelize cannot find an order in which to sync. Imagine a scenario of documents and versions. A document can have multiple versions, and for convenience, a document has an reference to it's current version.  var Document = this.sequelize.define('document', {\n      author: Sequelize.STRING\n    })\n  , Version = this.sequelize.define('version', {\n      timestamp: Sequelize.DATE\n    })\n\nDocument.hasMany(Version) // This adds document_id to version\nDocument.belongsTo(Version, { as: 'Current', foreignKey: 'current_version_id'}) // This adds current_version_id to document  However, the code above will result in the following error:  Cyclic dependency found. 'Document' is dependent of itself. Dependency Chain: Document -  Version =  Document . In order to alleviate that, we can pass  constraints: false  to one of the associations:  Document.hasMany(Version)\nDocument.belongsTo(Version, { as: 'Current', foreignKey: 'current_version_id', constraints: false})  Which will allow us to sync the tables correctly:  CREATE TABLE IF NOT EXISTS `Document` (\n  `id` INTEGER PRIMARY KEY,\n  `author` VARCHAR(255),\n  `current_version_id` INTEGER\n);\nCREATE TABLE IF NOT EXISTS `Version` (\n  `id` INTEGER PRIMARY KEY,\n  `timestamp` DATETIME,\n  `document_id` INTEGER REFERENCES `Document` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);", 
            "title": "Foreign Keys"
        }, 
        {
            "location": "/docs/associations/#enforcing-a-foreign-key-reference-without-constraints", 
            "text": "Some times you may want to reference another table, without adding any constraints, or associations. In that case you can manually add the reference attributes to your schema definition, and mark the relations between them.  var Series, Trainer, Video\n\u00a0\n// Series has a trainer_id=Trainer.id foreign reference key after we call Trainer.hasMany(series)\nSeries = sequelize.define('series', {\n  title:        DataTypes.STRING,\n  sub_title:    DataTypes.STRING,\n  description:  DataTypes.TEXT,\n\u00a0\n  // Set FK relationship (hasMany) with `Trainer`\n  trainer_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model:  trainers ,\n      key:  id \n    }\n  }\n})\n\u00a0\nTrainer = sequelize.define('trainer', {\n  first_name: DataTypes.STRING,\n  last_name:  DataTypes.STRING\n});\n\u00a0\n// Video has a series_id=Series.id foreign reference key after we call Series.hasOne(Video)...\nVideo = sequelize.define('video', {\n  title:        DataTypes.STRING,\n  sequence:     DataTypes.INTEGER,\n  description:  DataTypes.TEXT,\n\u00a0\n  // set relationship (hasOne) with `Series`\n  series_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Series, // Can be both a string representing the table name, or a reference to the model\n      key:    id \n    }\n  }\n});\n\u00a0\nSeries.hasOne(Video);\nTrainer.hasMany(Series);", 
            "title": "Enforcing a foreign key reference without constraints"
        }, 
        {
            "location": "/docs/associations/#creating-with-associations", 
            "text": "An instance can be created with nested association in one step, provided all elements are new.", 
            "title": "Creating with associations"
        }, 
        {
            "location": "/docs/associations/#creating-elements-of-a-belongsto-or-hasone-association", 
            "text": "Consider the following models:  var Product = this.sequelize.define('product', {\n  title: Sequelize.STRING\n});\nvar User = this.sequelize.define('user', {\n  first_name: Sequelize.STRING,\n  last_name: Sequelize.STRING\n});\n\nProduct.belongsTo(User);\n// Also works for `hasOne`  A new  Product  and  User  can be created in one step in the following way:  return Product.create({\n  title: 'Chair',\n  user: {\n    first_name: 'Mick',\n    last_name: 'Broadstone'\n  }\n}, {\n  include: [ User ]\n});  Here, our user model is called  user , with a lowercase u - This means that the property in the object should also be  user . If the name given to  sequelize.define  was  User , the key in the object should also be  User .", 
            "title": "Creating elements of a \"BelongsTo\" or \"HasOne\" association"
        }, 
        {
            "location": "/docs/associations/#creating-elements-of-a-belongsto-association-with-an-alias", 
            "text": "The previous example can be extended to support an association alias.  var Creator = Product.belongsTo(User, {as: 'creator'});\n\nreturn Product.create({\n  title: 'Chair',\n  creator: {\n    first_name: 'Matt',\n    last_name: 'Hansen'\n  }\n}, {\n  include: [ Creator ]\n});", 
            "title": "Creating elements of a \"BelongsTo\" association with an alias"
        }, 
        {
            "location": "/docs/associations/#creating-elements-of-a-hasmany-or-belongstomany-association", 
            "text": "Let's introduce the ability to associate a project with many tags. Setting up the models could look like:  var Tag = this.sequelize.define('tag', {\n  name: Sequelize.STRING\n});\n\nProduct.hasMany(Tag);\n// Also works for `belongsToMany`.  Now we can create a project with multiple tags in the following way:  Product.create({\n  id: 1,\n  title: 'Chair',\n  tags: [\n    { name: 'Alpha'},\n    { name: 'Beta'}\n  ]\n}, {\n  include: [ Tag ]\n})  And, we can modify this example to support an alias as well:  var Categories = Product.hasMany(Tag, {as: 'categories'});\n\nProduct.create({\n  id: 1,\n  title: 'Chair',\n  categories: [\n    {id: 1, name: 'Alpha'},\n    {id: 2, name: 'Beta'}\n  ]\n}, {\n  include: [{\n    model: Categories,\n    as: 'categories'\n  }]\n})", 
            "title": "Creating elements of a \"HasMany\" or \"BelongsToMany\" association"
        }, 
        {
            "location": "/docs/hooks/", 
            "text": "Hooks (also known as callbacks or lifecycle events), are functions which are called before and after calls in sequelize are executed. For example, if you want to always set a value on a model before saving it, you can add a \nbeforeUpdate\n hook.\n\n\nFor a full list of hooks, see \nHooks API\n.\n\n\nOrder of Operations\n\n\n(1)\n  beforeBulkCreate(instances, options, fn)\n  beforeBulkDestroy(options, fn)\n  beforeBulkUpdate(options, fn)\n(2)\n  beforeValidate(instance, options, fn)\n(-)\n  validate\n(3)\n  afterValidate(instance, options, fn)\n  - or -\n  validationFailed(instance, options, error, fn)\n(4)\n  beforeCreate(instance, options, fn)\n  beforeDestroy(instance, options, fn)\n  beforeUpdate(instance, options, fn)\n  beforeSave(instance, options, fn)\n  beforeUpsert(values, options, fn)\n(-)\n  create\n  destroy\n  update\n(5)\n  afterCreate(instance, options, fn)\n  afterDestroy(instance, options, fn)\n  afterUpdate(instance, options, fn)\n  afterSave(instance, options, fn)\n  afterUpsert(created, options, fn)\n(6)\n  afterBulkCreate(instances, options, fn)\n  afterBulkDestroy(options, fn)\n  afterBulkUpdate(options, fn)\n\n\n\n\nDeclaring Hooks\n\n\nArguments to hooks are passed by reference. This means, that you can change the values, and this will be reflected in the insert / update statement. A hook may contain async actions - in this case the hook function should return a promise.\n\n\nThere are currently three ways to programmatically add hooks:\n\n\n// Method 1 via the .define() method\nvar User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  mood: {\n    type: DataTypes.ENUM,\n    values: ['happy', 'sad', 'neutral']\n  }\n}, {\n  hooks: {\n    beforeValidate: function(user, options) {\n      user.mood = 'happy'\n    },\n    afterValidate: function(user, options) {\n      user.username = 'Toni'\n    }\n  }\n})\n\n// Method 2 via the .hook() method\nUser.hook('beforeValidate', function(user, options) {\n  user.mood = 'happy'\n})\n\nUser.hook('afterValidate', function(user, options) {\n  return sequelize.Promise.reject(\nI'm afraid I can't let you do that!\n)\n})\n\n// Method 3 via the direct method\nUser.beforeCreate(function(user, options) {\n  return hashPassword(user.password).then(function (hashedPw) {\n    user.password = hashedPw;\n  });\n})\n\nUser.afterValidate('myHookAfter', function(user, options, fn) {\n  user.username = 'Toni'\n})\n\n\n\n\nRemoving hooks\n\n\nOnly a hook with name param can be removed.\n\n\nvar Book = sequelize.define('book', {\n  title: DataTypes.STRING\n})\n\nBook.addHook('afterCreate', 'notifyUsers', function(book, options) {\n  // ...\n})\n\nBook.removeHook('afterCreate', 'notifyUsers')\n\n\n\n\nGlobal / universal hooks\n\n\nGlobal hooks are hooks which are run for all models. They can define behaviours that you want for all your models, and are especially useful for plugins. They can be defined in two ways, which have slightly different semantics:\n\n\nSequelize.options.define (default hook)\n\n\nvar sequelize = new Sequelize(..., {\n    define: {\n        hooks: {\n            beforeCreate: function () {\n                // Do stuff\n            }\n        }\n    }\n});\n\n\n\n\nThis adds a default hook to all models, which is run if the model does not define its own \nbeforeCreate\n hook:\n\n\nvar User = sequelize.define('user');\nvar Project = sequelize.define('project', {}, {\n    hooks: {\n        beforeCreate: function () {\n            // Do other stuff\n        }\n    }\n});\n\nUser.create() // Runs the global hook\nProject.create() // Runs its own hook (because the global hook is overwritten)\n\n\n\n\nSequelize.addHook (permanent hook)\n\n\nsequelize.addHook('beforeCreate', function () {\n    // Do stuff\n});\n\n\n\n\nThis hooks is always run before create, regardless of whether the model specifies its own \nbeforeCreate\n hook:\n\n\nvar User = sequelize.define('user');\nvar Project = sequelize.define('project', {}, {\n    hooks: {\n        beforeCreate: function () {\n            // Do other stuff\n        }\n    }\n});\n\nUser.create() // Runs the global hook\nProject.create() // Runs its own hook, followed by the global hook\n\n\n\n\nLocal hooks are always run before global hooks.\n\n\nInstance hooks\n\n\nThe following hooks will emit whenever you're editing a single object\n\n\nbeforeValidate\nafterValidate or validationFailed\nbeforeCreate / beforeUpdate  / beforeDestroy\nafterCreate / afterUpdate / afterDestroy\n\n\n\n\n// ...define ...\nUser.beforeCreate(function(user) {\n  if (user.accessLevel \n 10 \n user.username !== \nBoss\n) {\n    throw new Error(\nYou can't grant this user an access level above 10!\n)\n  }\n})\n\n\n\n\nThis example will return an error:\n\n\nUser.create({username: 'Not a Boss', accessLevel: 20}).catch(function(err) {\n  console.log(err) // You can't grant this user an access level above 10!\n})\n\n\n\n\nThe following example would return successful:\n\n\nUser.create({username: 'Boss', accessLevel: 20}).then(function(user) {\n  console.log(user) // user object with username as Boss and accessLevel of 20\n})\n\n\n\n\nModel hooks\n\n\nSometimes you'll be editing more than one record at a time by utilizing the \nbulkCreate, update, destroy\n methods on the model. The following will emit whenever you're using one of those methods.\n\n\nbeforeBulkCreate / beforeBulkUpdate / beforeBulkDestroy\nafterBulkCreate / afterBulkUpdate / afterBulkDestroy\n\n\n\n\nIf you want to emit hooks for each individual record, along with the bulk hooks you can pass \nindividualHooks: true\n to the call.\n\n\nModel.destroy({ where: {accessLevel: 0}, individualHooks: true})\n// Will select all records that are about to be deleted and emit before- + after- Destroy on each instance\n\nModel.update({username: 'Toni'}, { where: {accessLevel: 0}, individualHooks: true})\n// Will select all records that are about to be updated and emit before- + after- Update on each instance\n\n\n\n\nSome model hooks have two or three parameters sent to each hook depending on it's type.\n\n\nModel.beforeBulkCreate(function(records, fields) {\n  // records = the first argument sent to .bulkCreate\n  // fields = the second argument sent to .bulkCreate\n})\n\nModel.bulkCreate([\n  {username: 'Toni'}, // part of records argument\n  {username: 'Tobi'} // part of records argument\n], ['username'] /* part of fields argument */)\n\nModel.beforeBulkUpdate(function(attributes, where) {\n  // attributes = first argument sent to Model.update\n  // where = second argument sent to Model.update\n})\n\nModel.update({gender: 'Male'} /*attributes argument*/, { where: {username: 'Tom'}} /*where argument*/)\n\nModel.beforeBulkDestroy(function(whereClause) {\n  // whereClause = first argument sent to Model.destroy\n})\n\nModel.destroy({ where: {username: 'Tom'}} /*whereClause argument*/)\n\n\n\n\nIf you use \nModel.bulkCreate(...)\n with the \nupdatesOnDuplicate\n option, changes made in the hook to fields that aren't given in the \nupdatesOnDuplicate\n array will not be persisted to the database. However it is possible to change the updatesOnDuplicate option inside the hook if this is what you want.\n\n\n// Bulk updating existing users with updatesOnDuplicate option\nUsers.bulkCreate([{ id: 1, isMemeber: true},\n                 { id: 2, isMember: false}],\n                 { updatesOnDuplicate: ['isMember']})\n\nUser.beforeBulkCreate(function (users, options) {\n  users.forEach(function (user) {\n    if (user.isMember) {\n      user.memberSince = new Date()\n    }\n  })\n\n  // Add memberSince to updatesOnDuplicate otherwise the memberSince date wont be\n  // saved to the database\n  options.updatesOnDuplicate.push('memberSince')\n})\n\n\n\n\nAssociations\n\n\nFor the most part hooks will work the same for instances when being associated except a few things\n\n\n\n\nWhen using add/set functions the beforeUpdate/afterUpdate hooks will run.\n\n\nThe only way to call beforeDestroy/afterDestroy hooks are on associations with \nonDelete: 'cascade'\n and the option \nhooks: true\n. For instance:\n\n\n\n\nvar Projects = sequelize.define('projects', {\n  title: DataTypes.STRING\n})\n\nvar Tasks = sequelize.define('tasks', {\n  title: DataTypes.STRING\n})\n\nProjects.hasMany(Tasks, { onDelete: 'cascade', hooks: true })\nTasks.belongsTo(Projects)\n\n\n\n\nThis code will run beforeDestroy/afterDestroy on the Tasks table. Sequelize, by default, will try to optimize your queries as much as possible. When calling cascade on delete, Sequelize will simply execute a\n\n\nDELETE FROM `table` WHERE associatedIdentifier = associatedIdentifier.primaryKey\n\n\n\n\nHowever, adding \nhooks: true\n explicitly tells Sequelize that optimization is not of your concern and will perform a \nSELECT\n on the associated objects and destroy each instance one by one in order to be able to call the hooks with the right parameters.\n\n\nIf your association is of type \nn:m\n, you may be interested in firing hooks on the through model when using the \nremove\n call. Internally, sequelize is using \nModel.destroy\n resulting in calling the \nbulkDestroy\n instead of the \nbefore/afterDestroy\n hooks on each through instance.\n\n\nThis can be simply solved by passing \n{individualHooks: true}\n to the \nremove\n call, resulting on each hook to be called on each removed through instance object.\n\n\nA Note About Transactions\n\n\nNote that many model operations in Sequelize allow you to specify a transaction in the options parameter of the method. If a transaction \nis\n specified in the original call, it will be present in the options parameter passed to the hook function. For example, consider the following snippet:\n\n\n// Here we use the promise-style of async hooks rather than\n// the callback.\nUser.hook('afterCreate', function(user, options) {\n  // 'transaction' will be available in options.transaction\n\n  // This operation will be part of the same transaction as the\n  // original User.create call.\n  return User.update({\n    mood: 'sad'\n  }, {\n    where: {\n      id: user.id\n    },\n    transaction: options.transaction\n  });\n});\n\n\nsequelize.transaction(function(t) {\n  User.create({\n    username: 'someguy',\n    mood: 'happy',\n    transaction: t\n  });\n});\n\n\n\n\nIf we had not included the transaction option in our call to \nUser.update\n in the preceding code, no change would have occurred, since our newly created user does not exist in the database until the pending transaction has been committed.\n\n\nInternal Transactions\n\n\nIt is very important to recognize that sequelize may make use of transactions internally for certain operations such as \nModel.findOrCreate\n. If your hook functions execute read or write operations that rely on the object's presence in the database, or modify the object's stored values like the example in the preceding section, you should always specify \n{ transaction: options.transaction }\n.\n\n\nIf the hook has been called in the process of a transacted operation, this makes sure that your dependent read/write is a part of that same transaction. If the hook is not transacted, you have simply specified \n{ transaction: null }\n and can expect the default behaviour.", 
            "title": "Hooks"
        }, 
        {
            "location": "/docs/hooks/#order-of-operations", 
            "text": "(1)\n  beforeBulkCreate(instances, options, fn)\n  beforeBulkDestroy(options, fn)\n  beforeBulkUpdate(options, fn)\n(2)\n  beforeValidate(instance, options, fn)\n(-)\n  validate\n(3)\n  afterValidate(instance, options, fn)\n  - or -\n  validationFailed(instance, options, error, fn)\n(4)\n  beforeCreate(instance, options, fn)\n  beforeDestroy(instance, options, fn)\n  beforeUpdate(instance, options, fn)\n  beforeSave(instance, options, fn)\n  beforeUpsert(values, options, fn)\n(-)\n  create\n  destroy\n  update\n(5)\n  afterCreate(instance, options, fn)\n  afterDestroy(instance, options, fn)\n  afterUpdate(instance, options, fn)\n  afterSave(instance, options, fn)\n  afterUpsert(created, options, fn)\n(6)\n  afterBulkCreate(instances, options, fn)\n  afterBulkDestroy(options, fn)\n  afterBulkUpdate(options, fn)", 
            "title": "Order of Operations"
        }, 
        {
            "location": "/docs/hooks/#declaring-hooks", 
            "text": "Arguments to hooks are passed by reference. This means, that you can change the values, and this will be reflected in the insert / update statement. A hook may contain async actions - in this case the hook function should return a promise.  There are currently three ways to programmatically add hooks:  // Method 1 via the .define() method\nvar User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  mood: {\n    type: DataTypes.ENUM,\n    values: ['happy', 'sad', 'neutral']\n  }\n}, {\n  hooks: {\n    beforeValidate: function(user, options) {\n      user.mood = 'happy'\n    },\n    afterValidate: function(user, options) {\n      user.username = 'Toni'\n    }\n  }\n})\n\n// Method 2 via the .hook() method\nUser.hook('beforeValidate', function(user, options) {\n  user.mood = 'happy'\n})\n\nUser.hook('afterValidate', function(user, options) {\n  return sequelize.Promise.reject( I'm afraid I can't let you do that! )\n})\n\n// Method 3 via the direct method\nUser.beforeCreate(function(user, options) {\n  return hashPassword(user.password).then(function (hashedPw) {\n    user.password = hashedPw;\n  });\n})\n\nUser.afterValidate('myHookAfter', function(user, options, fn) {\n  user.username = 'Toni'\n})", 
            "title": "Declaring Hooks"
        }, 
        {
            "location": "/docs/hooks/#removing-hooks", 
            "text": "Only a hook with name param can be removed.  var Book = sequelize.define('book', {\n  title: DataTypes.STRING\n})\n\nBook.addHook('afterCreate', 'notifyUsers', function(book, options) {\n  // ...\n})\n\nBook.removeHook('afterCreate', 'notifyUsers')", 
            "title": "Removing hooks"
        }, 
        {
            "location": "/docs/hooks/#global-universal-hooks", 
            "text": "Global hooks are hooks which are run for all models. They can define behaviours that you want for all your models, and are especially useful for plugins. They can be defined in two ways, which have slightly different semantics:", 
            "title": "Global / universal hooks"
        }, 
        {
            "location": "/docs/hooks/#sequelizeoptionsdefine-default-hook", 
            "text": "var sequelize = new Sequelize(..., {\n    define: {\n        hooks: {\n            beforeCreate: function () {\n                // Do stuff\n            }\n        }\n    }\n});  This adds a default hook to all models, which is run if the model does not define its own  beforeCreate  hook:  var User = sequelize.define('user');\nvar Project = sequelize.define('project', {}, {\n    hooks: {\n        beforeCreate: function () {\n            // Do other stuff\n        }\n    }\n});\n\nUser.create() // Runs the global hook\nProject.create() // Runs its own hook (because the global hook is overwritten)", 
            "title": "Sequelize.options.define (default hook)"
        }, 
        {
            "location": "/docs/hooks/#sequelizeaddhook-permanent-hook", 
            "text": "sequelize.addHook('beforeCreate', function () {\n    // Do stuff\n});  This hooks is always run before create, regardless of whether the model specifies its own  beforeCreate  hook:  var User = sequelize.define('user');\nvar Project = sequelize.define('project', {}, {\n    hooks: {\n        beforeCreate: function () {\n            // Do other stuff\n        }\n    }\n});\n\nUser.create() // Runs the global hook\nProject.create() // Runs its own hook, followed by the global hook  Local hooks are always run before global hooks.", 
            "title": "Sequelize.addHook (permanent hook)"
        }, 
        {
            "location": "/docs/hooks/#instance-hooks", 
            "text": "The following hooks will emit whenever you're editing a single object  beforeValidate\nafterValidate or validationFailed\nbeforeCreate / beforeUpdate  / beforeDestroy\nafterCreate / afterUpdate / afterDestroy  // ...define ...\nUser.beforeCreate(function(user) {\n  if (user.accessLevel   10   user.username !==  Boss ) {\n    throw new Error( You can't grant this user an access level above 10! )\n  }\n})  This example will return an error:  User.create({username: 'Not a Boss', accessLevel: 20}).catch(function(err) {\n  console.log(err) // You can't grant this user an access level above 10!\n})  The following example would return successful:  User.create({username: 'Boss', accessLevel: 20}).then(function(user) {\n  console.log(user) // user object with username as Boss and accessLevel of 20\n})", 
            "title": "Instance hooks"
        }, 
        {
            "location": "/docs/hooks/#model-hooks", 
            "text": "Sometimes you'll be editing more than one record at a time by utilizing the  bulkCreate, update, destroy  methods on the model. The following will emit whenever you're using one of those methods.  beforeBulkCreate / beforeBulkUpdate / beforeBulkDestroy\nafterBulkCreate / afterBulkUpdate / afterBulkDestroy  If you want to emit hooks for each individual record, along with the bulk hooks you can pass  individualHooks: true  to the call.  Model.destroy({ where: {accessLevel: 0}, individualHooks: true})\n// Will select all records that are about to be deleted and emit before- + after- Destroy on each instance\n\nModel.update({username: 'Toni'}, { where: {accessLevel: 0}, individualHooks: true})\n// Will select all records that are about to be updated and emit before- + after- Update on each instance  Some model hooks have two or three parameters sent to each hook depending on it's type.  Model.beforeBulkCreate(function(records, fields) {\n  // records = the first argument sent to .bulkCreate\n  // fields = the second argument sent to .bulkCreate\n})\n\nModel.bulkCreate([\n  {username: 'Toni'}, // part of records argument\n  {username: 'Tobi'} // part of records argument\n], ['username'] /* part of fields argument */)\n\nModel.beforeBulkUpdate(function(attributes, where) {\n  // attributes = first argument sent to Model.update\n  // where = second argument sent to Model.update\n})\n\nModel.update({gender: 'Male'} /*attributes argument*/, { where: {username: 'Tom'}} /*where argument*/)\n\nModel.beforeBulkDestroy(function(whereClause) {\n  // whereClause = first argument sent to Model.destroy\n})\n\nModel.destroy({ where: {username: 'Tom'}} /*whereClause argument*/)  If you use  Model.bulkCreate(...)  with the  updatesOnDuplicate  option, changes made in the hook to fields that aren't given in the  updatesOnDuplicate  array will not be persisted to the database. However it is possible to change the updatesOnDuplicate option inside the hook if this is what you want.  // Bulk updating existing users with updatesOnDuplicate option\nUsers.bulkCreate([{ id: 1, isMemeber: true},\n                 { id: 2, isMember: false}],\n                 { updatesOnDuplicate: ['isMember']})\n\nUser.beforeBulkCreate(function (users, options) {\n  users.forEach(function (user) {\n    if (user.isMember) {\n      user.memberSince = new Date()\n    }\n  })\n\n  // Add memberSince to updatesOnDuplicate otherwise the memberSince date wont be\n  // saved to the database\n  options.updatesOnDuplicate.push('memberSince')\n})", 
            "title": "Model hooks"
        }, 
        {
            "location": "/docs/hooks/#associations", 
            "text": "For the most part hooks will work the same for instances when being associated except a few things   When using add/set functions the beforeUpdate/afterUpdate hooks will run.  The only way to call beforeDestroy/afterDestroy hooks are on associations with  onDelete: 'cascade'  and the option  hooks: true . For instance:   var Projects = sequelize.define('projects', {\n  title: DataTypes.STRING\n})\n\nvar Tasks = sequelize.define('tasks', {\n  title: DataTypes.STRING\n})\n\nProjects.hasMany(Tasks, { onDelete: 'cascade', hooks: true })\nTasks.belongsTo(Projects)  This code will run beforeDestroy/afterDestroy on the Tasks table. Sequelize, by default, will try to optimize your queries as much as possible. When calling cascade on delete, Sequelize will simply execute a  DELETE FROM `table` WHERE associatedIdentifier = associatedIdentifier.primaryKey  However, adding  hooks: true  explicitly tells Sequelize that optimization is not of your concern and will perform a  SELECT  on the associated objects and destroy each instance one by one in order to be able to call the hooks with the right parameters.  If your association is of type  n:m , you may be interested in firing hooks on the through model when using the  remove  call. Internally, sequelize is using  Model.destroy  resulting in calling the  bulkDestroy  instead of the  before/afterDestroy  hooks on each through instance.  This can be simply solved by passing  {individualHooks: true}  to the  remove  call, resulting on each hook to be called on each removed through instance object.", 
            "title": "Associations"
        }, 
        {
            "location": "/docs/hooks/#a-note-about-transactions", 
            "text": "Note that many model operations in Sequelize allow you to specify a transaction in the options parameter of the method. If a transaction  is  specified in the original call, it will be present in the options parameter passed to the hook function. For example, consider the following snippet:  // Here we use the promise-style of async hooks rather than\n// the callback.\nUser.hook('afterCreate', function(user, options) {\n  // 'transaction' will be available in options.transaction\n\n  // This operation will be part of the same transaction as the\n  // original User.create call.\n  return User.update({\n    mood: 'sad'\n  }, {\n    where: {\n      id: user.id\n    },\n    transaction: options.transaction\n  });\n});\n\n\nsequelize.transaction(function(t) {\n  User.create({\n    username: 'someguy',\n    mood: 'happy',\n    transaction: t\n  });\n});  If we had not included the transaction option in our call to  User.update  in the preceding code, no change would have occurred, since our newly created user does not exist in the database until the pending transaction has been committed.", 
            "title": "A Note About Transactions"
        }, 
        {
            "location": "/docs/hooks/#internal-transactions", 
            "text": "It is very important to recognize that sequelize may make use of transactions internally for certain operations such as  Model.findOrCreate . If your hook functions execute read or write operations that rely on the object's presence in the database, or modify the object's stored values like the example in the preceding section, you should always specify  { transaction: options.transaction } .  If the hook has been called in the process of a transacted operation, this makes sure that your dependent read/write is a part of that same transaction. If the hook is not transacted, you have simply specified  { transaction: null }  and can expect the default behaviour.", 
            "title": "Internal Transactions"
        }, 
        {
            "location": "/docs/transactions/", 
            "text": "Sequelize supports two ways of using transactions:\n\n\n\n\nOne which will automatically commit or rollback the transaction based on the result of a promise chain and, (if enabled) pass the transaction to all calls within the callback\n\n\nAnd one which leaves committing, rolling back and passing the transaction to the user.\n\n\n\n\nThe key difference is that the managed transaction uses a callback that expects a promise to be returned to it while the unmanaged transaction returns a promise.\n\n\nManaged transaction (auto-callback)\n\n\nManaged transactions handle committing or rolling back the transaction automagically. You start a managed transaction by passing a callback to \nsequelize.transaction\n.\n\n\nNotice how the callback passed to \ntransaction\n returns a promise chain, and does not explicitly call \nt.commit()\n nor \nt.rollback()\n. If all promises in the returned chain are resolved successfully the transaction is committed. If one or several of the promises are rejected, the transaction is rolled back.\n\n\nreturn sequelize.transaction(function (t) {\n\n  // chain all your queries here. make sure you return them.\n  return User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, {transaction: t}).then(function (user) {\n    return user.setShooter({\n      firstName: 'John',\n      lastName: 'Boothe'\n    }, {transaction: t});\n  });\n\n}).then(function (result) {\n  // Transaction has been committed\n  // result is whatever the result of the promise chain returned to the transaction callback\n}).catch(function (err) {\n  // Transaction has been rolled back\n  // err is whatever rejected the promise chain returned to the transaction callback\n});\n\n\n\n\nThrow errors to rollback\n\n\nWhen using the managed transaction you should \nnever\n commit or rollback the transaction manually. If all queries are successful, but you still want to rollback the transaction (for example because of a validation failure) you should throw an error to break and reject the chain:\n\n\nreturn sequelize.transaction(function (t) {\n  return User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, {transaction: t}).then(function (user) {\n    // Woops, the query was successful but we still want to roll back!\n    throw new Error();\n  });\n});\n\n\n\n\nAutomatically pass transactions to all queries\n\n\nIn the examples above, the transaction is still manually passed, by passing \n{ transaction: t }\n as the second argument. To automatically pass the transaction to all queries you must install the \ncontinuation local storage\n (CLS) module and instantiate a namespace in your own code:\n\n\nvar cls = require('continuation-local-storage'),\n    namespace = cls.createNamespace('my-very-own-namespace');\n\n\n\n\nTo enable CLS you must tell sequelize which namespace to use by using a static method of the sequelize constructor:\n\n\nvar Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\nnew Sequelize(....);\n\n\n\n\nNotice, that the \nuseCLS()\n method is on the \nconstructor\n, not on an instance of sequelize. This means that all instances will share the same namespace, and that CLS is all-or-nothing - you cannot enable it only for some instances.\n\n\nCLS works like a thread-local storage for callbacks. What this means in practice is that different callback chains can access local variables by using the CLS namespace. When CLS is enabled sequelize will set the \ntransaction\n property on the namespace when a new transaction is created. Since variables set within a callback chain are private to that chain several concurrent transactions can exist at the same time:\n\n\nsequelize.transaction(function (t1) {\n  namespace.get('transaction') === t1; // true\n});\n\nsequelize.transaction(function (t2) {\n  namespace.get('transaction') === t2; // true\n});\n\n\n\n\nIn most case you won't need to access \nnamespace.get('transaction')\n directly, since all queries will automatically look for a transaction on the namespace:\n\n\nsequelize.transaction(function (t1) {\n  // With CLS enabled, the user will be created inside the transaction\n  return User.create({ name: 'Alice' });\n});\n\n\n\n\nAfter you've used \nSequelize.useCLS()\n all promises returned from sequelize will be patched to maintain CLS context. CLS is a complicated subject - more details in the docs for \ncls-bluebird\n, the patch used to make bluebird promises work with CLS.\n\n\nConcurrent/Partial transactions\n\n\nYou can have concurrent transactions within a sequence of queries or have some of them excluded from any transactions. Use the \n{transaction: }\n option to control which transaction a query belong to:\n\n\nWithout CLS enabled\n\n\nsequelize.transaction(function (t1) {\n  return sequelize.transaction(function (t2) {\n    // With CLS enable, queries here will by default use t2\n    // Pass in the `transaction` option to define/alter the transaction they belong to.\n    return Promise.all([\n        User.create({ name: 'Bob' }, { transaction: null }),\n        User.create({ name: 'Mallory' }, { transaction: t1 }),\n        User.create({ name: 'John' }) // this would default to t2\n    ]);\n  });\n});\n\n\n\n\nIsolation levels\n\n\nThe possible isolations levels to use when starting a transaction:\n\n\nSequelize.Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED // \nREAD UNCOMMITTED\n\nSequelize.Transaction.ISOLATION_LEVELS.READ_COMMITTED // \nREAD COMMITTED\n\nSequelize.Transaction.ISOLATION_LEVELS.REPEATABLE_READ  // \nREPEATABLE READ\n\nSequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE // \nSERIALIZABLE\n\n\n\n\n\nBy default, sequelize uses \"REPEATABLE READ\". If you want to use a different isolation level, pass in the desired level as the first argument:\n\n\nreturn sequelize.transaction({\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n  }, function (t) {\n\n  // your transactions\n\n  });\n\n\n\n\nUnmanaged transaction (then-callback)\n\n\nUnmanaged transactions force you to manually rollback or commit the transaction. If you don't do that, the transaction will hang until it times out. To start an unmanaged transaction, call \nsequelize.transaction()\n without a callback (you can still pass an options object) and call \nthen\n on the returned promise. Notice that \ncommit()\n and \nrollback()\n returns a promise.\n\n\nreturn sequelize.transaction().then(function (t) {\n  return User.create({\n    firstName: 'Homer',\n    lastName: 'Simpson'\n  }, {transaction: t}).then(function (user) {\n    return user.addSibling({\n      firstName: 'Lisa',\n      lastName: 'Simpson'\n    }, {transaction: t});\n  }).then(function () {\n    return t.commit();\n  }).catch(function (err) {\n    return t.rollback();\n  });\n});\n\n\n\n\nOptions\n\n\nThe \ntransaction\n method can be called with an options object as the first argument, that\nallows the configuration of the transaction.\n\n\nreturn sequelize.transaction({ /* options */ });\n\n\n\n\nThe following options (with it's default values) are available:\n\n\n{\n  autocommit: true,\n  isolationLevel: 'REPEATABLE_READ',\n  deferrable: 'NOT DEFERRABLE' // implicit default of postgres\n}\n\n\n\n\nThe \nisolationLevel\n can either be set globally when initializing the Sequelize instance or\nlocally for every transaction:\n\n\n// globally\nnew Sequelize('db', 'user', 'pw', {\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});\n\n// locally\nsequelize.transaction({\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});\n\n\n\n\nThe \ndeferrable\n option triggers an additional query after the transaction start\nthat optionally set the constraint checks to be deferred or immediate. Please note\nthat this is only supported in PostgreSQL.\n\n\nsequelize.transaction({\n  // to defer all constraints:\n  deferrable: Sequelize.Deferrable.SET_DEFERRED,\n\n  // to defer a specific constraint:\n  deferrable: Sequelize.Deferrable.SET_DEFERRED(['some_constraint']),\n\n  // to not defer constraints:\n  deferrable: Sequelize.Deferrable.SET_IMMEDIATE\n})\n\n\n\n\nUsage with other sequelize methods\n\n\nThe \ntransaction\n option goes with most other options, which are usually the first argument of a method.\nFor methods that take values, like \n.create\n, \n.update()\n, \n.updateAttributes()\n etc. \ntransaction\n should be passed to the option in the second argument.\nIf unsure, refer to the API documentation for the method you are using to be sure of the signature.", 
            "title": "Transactions"
        }, 
        {
            "location": "/docs/transactions/#managed-transaction-auto-callback", 
            "text": "Managed transactions handle committing or rolling back the transaction automagically. You start a managed transaction by passing a callback to  sequelize.transaction .  Notice how the callback passed to  transaction  returns a promise chain, and does not explicitly call  t.commit()  nor  t.rollback() . If all promises in the returned chain are resolved successfully the transaction is committed. If one or several of the promises are rejected, the transaction is rolled back.  return sequelize.transaction(function (t) {\n\n  // chain all your queries here. make sure you return them.\n  return User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, {transaction: t}).then(function (user) {\n    return user.setShooter({\n      firstName: 'John',\n      lastName: 'Boothe'\n    }, {transaction: t});\n  });\n\n}).then(function (result) {\n  // Transaction has been committed\n  // result is whatever the result of the promise chain returned to the transaction callback\n}).catch(function (err) {\n  // Transaction has been rolled back\n  // err is whatever rejected the promise chain returned to the transaction callback\n});", 
            "title": "Managed transaction (auto-callback)"
        }, 
        {
            "location": "/docs/transactions/#throw-errors-to-rollback", 
            "text": "When using the managed transaction you should  never  commit or rollback the transaction manually. If all queries are successful, but you still want to rollback the transaction (for example because of a validation failure) you should throw an error to break and reject the chain:  return sequelize.transaction(function (t) {\n  return User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, {transaction: t}).then(function (user) {\n    // Woops, the query was successful but we still want to roll back!\n    throw new Error();\n  });\n});", 
            "title": "Throw errors to rollback"
        }, 
        {
            "location": "/docs/transactions/#automatically-pass-transactions-to-all-queries", 
            "text": "In the examples above, the transaction is still manually passed, by passing  { transaction: t }  as the second argument. To automatically pass the transaction to all queries you must install the  continuation local storage  (CLS) module and instantiate a namespace in your own code:  var cls = require('continuation-local-storage'),\n    namespace = cls.createNamespace('my-very-own-namespace');  To enable CLS you must tell sequelize which namespace to use by using a static method of the sequelize constructor:  var Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\nnew Sequelize(....);  Notice, that the  useCLS()  method is on the  constructor , not on an instance of sequelize. This means that all instances will share the same namespace, and that CLS is all-or-nothing - you cannot enable it only for some instances.  CLS works like a thread-local storage for callbacks. What this means in practice is that different callback chains can access local variables by using the CLS namespace. When CLS is enabled sequelize will set the  transaction  property on the namespace when a new transaction is created. Since variables set within a callback chain are private to that chain several concurrent transactions can exist at the same time:  sequelize.transaction(function (t1) {\n  namespace.get('transaction') === t1; // true\n});\n\nsequelize.transaction(function (t2) {\n  namespace.get('transaction') === t2; // true\n});  In most case you won't need to access  namespace.get('transaction')  directly, since all queries will automatically look for a transaction on the namespace:  sequelize.transaction(function (t1) {\n  // With CLS enabled, the user will be created inside the transaction\n  return User.create({ name: 'Alice' });\n});  After you've used  Sequelize.useCLS()  all promises returned from sequelize will be patched to maintain CLS context. CLS is a complicated subject - more details in the docs for  cls-bluebird , the patch used to make bluebird promises work with CLS.", 
            "title": "Automatically pass transactions to all queries"
        }, 
        {
            "location": "/docs/transactions/#concurrentpartial-transactions", 
            "text": "You can have concurrent transactions within a sequence of queries or have some of them excluded from any transactions. Use the  {transaction: }  option to control which transaction a query belong to:", 
            "title": "Concurrent/Partial transactions"
        }, 
        {
            "location": "/docs/transactions/#without-cls-enabled", 
            "text": "sequelize.transaction(function (t1) {\n  return sequelize.transaction(function (t2) {\n    // With CLS enable, queries here will by default use t2\n    // Pass in the `transaction` option to define/alter the transaction they belong to.\n    return Promise.all([\n        User.create({ name: 'Bob' }, { transaction: null }),\n        User.create({ name: 'Mallory' }, { transaction: t1 }),\n        User.create({ name: 'John' }) // this would default to t2\n    ]);\n  });\n});", 
            "title": "Without CLS enabled"
        }, 
        {
            "location": "/docs/transactions/#isolation-levels", 
            "text": "The possible isolations levels to use when starting a transaction:  Sequelize.Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED //  READ UNCOMMITTED \nSequelize.Transaction.ISOLATION_LEVELS.READ_COMMITTED //  READ COMMITTED \nSequelize.Transaction.ISOLATION_LEVELS.REPEATABLE_READ  //  REPEATABLE READ \nSequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE //  SERIALIZABLE   By default, sequelize uses \"REPEATABLE READ\". If you want to use a different isolation level, pass in the desired level as the first argument:  return sequelize.transaction({\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n  }, function (t) {\n\n  // your transactions\n\n  });", 
            "title": "Isolation levels"
        }, 
        {
            "location": "/docs/transactions/#unmanaged-transaction-then-callback", 
            "text": "Unmanaged transactions force you to manually rollback or commit the transaction. If you don't do that, the transaction will hang until it times out. To start an unmanaged transaction, call  sequelize.transaction()  without a callback (you can still pass an options object) and call  then  on the returned promise. Notice that  commit()  and  rollback()  returns a promise.  return sequelize.transaction().then(function (t) {\n  return User.create({\n    firstName: 'Homer',\n    lastName: 'Simpson'\n  }, {transaction: t}).then(function (user) {\n    return user.addSibling({\n      firstName: 'Lisa',\n      lastName: 'Simpson'\n    }, {transaction: t});\n  }).then(function () {\n    return t.commit();\n  }).catch(function (err) {\n    return t.rollback();\n  });\n});", 
            "title": "Unmanaged transaction (then-callback)"
        }, 
        {
            "location": "/docs/transactions/#options", 
            "text": "The  transaction  method can be called with an options object as the first argument, that\nallows the configuration of the transaction.  return sequelize.transaction({ /* options */ });  The following options (with it's default values) are available:  {\n  autocommit: true,\n  isolationLevel: 'REPEATABLE_READ',\n  deferrable: 'NOT DEFERRABLE' // implicit default of postgres\n}  The  isolationLevel  can either be set globally when initializing the Sequelize instance or\nlocally for every transaction:  // globally\nnew Sequelize('db', 'user', 'pw', {\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});\n\n// locally\nsequelize.transaction({\n  isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});  The  deferrable  option triggers an additional query after the transaction start\nthat optionally set the constraint checks to be deferred or immediate. Please note\nthat this is only supported in PostgreSQL.  sequelize.transaction({\n  // to defer all constraints:\n  deferrable: Sequelize.Deferrable.SET_DEFERRED,\n\n  // to defer a specific constraint:\n  deferrable: Sequelize.Deferrable.SET_DEFERRED(['some_constraint']),\n\n  // to not defer constraints:\n  deferrable: Sequelize.Deferrable.SET_IMMEDIATE\n})", 
            "title": "Options"
        }, 
        {
            "location": "/docs/transactions/#usage-with-other-sequelize-methods", 
            "text": "The  transaction  option goes with most other options, which are usually the first argument of a method.\nFor methods that take values, like  .create ,  .update() ,  .updateAttributes()  etc.  transaction  should be passed to the option in the second argument.\nIf unsure, refer to the API documentation for the method you are using to be sure of the signature.", 
            "title": "Usage with other sequelize methods"
        }, 
        {
            "location": "/docs/legacy/", 
            "text": "While out of the box Sequelize will seem a bit opinionated it's trivial to both legacy and forward proof your application by defining (otherwise generated) table and field names.\n\n\nTables\n\n\nsequelize.define('user', {\n\n}, {\n  tableName: 'users'\n});\n\n\n\n\nFields\n\n\nsequelize.define('modelName', {\n  userId: {\n    type: Sequelize.INTEGER,\n    field: 'user_id'\n  }\n});\n\n\n\n\nPrimary keys\n\n\nSequelize will assume your table has a \nid\n primary key property by default.\n\n\nTo define your own primary key:\n\n\nsequelize.define('collection', {\n  uid: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true // Automatically gets converted to SERIAL for postgres\n  }\n});\n\nsequelize.define('collection', {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});\n\n\n\n\nAnd if your model has no primary key at all you can use \nModel.removeAttribute('id');\n\n\nForeign keys\n\n\n// 1:1\nOrganization.belongsTo(User, {foreignKey: 'owner_id'});\nUser.hasOne(Organization, {foreignKey: 'owner_id'});\n\n// 1:M\nProject.hasMany(Task, {foreignkey: 'tasks_pk'});\nTask.belongsTo(Project, {foreignKey: 'tasks_pk'});\n\n// N:M\nUser.hasMany(Role, {through: 'user_has_roles', foreignKey: 'user_role_user_id'});\nRole.hasMany(User, {through: 'user_has_roles', foreignKey: 'roles_identifier'});", 
            "title": "Working with legacy tables"
        }, 
        {
            "location": "/docs/legacy/#tables", 
            "text": "sequelize.define('user', {\n\n}, {\n  tableName: 'users'\n});", 
            "title": "Tables"
        }, 
        {
            "location": "/docs/legacy/#fields", 
            "text": "sequelize.define('modelName', {\n  userId: {\n    type: Sequelize.INTEGER,\n    field: 'user_id'\n  }\n});", 
            "title": "Fields"
        }, 
        {
            "location": "/docs/legacy/#primary-keys", 
            "text": "Sequelize will assume your table has a  id  primary key property by default.  To define your own primary key:  sequelize.define('collection', {\n  uid: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true // Automatically gets converted to SERIAL for postgres\n  }\n});\n\nsequelize.define('collection', {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});  And if your model has no primary key at all you can use  Model.removeAttribute('id');", 
            "title": "Primary keys"
        }, 
        {
            "location": "/docs/legacy/#foreign-keys", 
            "text": "// 1:1\nOrganization.belongsTo(User, {foreignKey: 'owner_id'});\nUser.hasOne(Organization, {foreignKey: 'owner_id'});\n\n// 1:M\nProject.hasMany(Task, {foreignkey: 'tasks_pk'});\nTask.belongsTo(Project, {foreignKey: 'tasks_pk'});\n\n// N:M\nUser.hasMany(Role, {through: 'user_has_roles', foreignKey: 'user_role_user_id'});\nRole.hasMany(User, {through: 'user_has_roles', foreignKey: 'roles_identifier'});", 
            "title": "Foreign keys"
        }, 
        {
            "location": "/docs/raw-queries/", 
            "text": "As there are often use cases in which it is just easier to execute raw / already prepared SQL queries, you can utilize the function \nsequelize.query\n.\n\n\nBy default the function will return two arguments - a results array, and an object containing metadata (affected rows etc.). Note that since this is a raw query, the metadata (property names etc.) is dialect specific. Some dialects return the metadata \"within\" the results object (as properties on an array). However, two arguments will always be returned, but for MSSQL and MySQL it will be two references to the same object.\n\n\nsequelize.query(\nUPDATE users SET y = 42 WHERE x = 12\n).spread(function(results, metadata) {\n  // Results will be an empty array and metadata will contain the number of affected rows.\n})\n\n\n\n\nIn cases where you don't need to access the metadata you can pass in a query type to tell sequelize how to format the results. For example, for a simple select query you could do:\n\n\nsequelize.query(\nSELECT * FROM `users`\n, { type: sequelize.QueryTypes.SELECT})\n  .then(function(users) {\n    // We don't need spread here, since only the results will be returned for select queries\n  })\n\n\n\n\nSeveral other query types are available. \nPeek into the source for details\n\n\nA second option is the model. If you pass a model the returned data will be instances of that model.\n\n\n// Callee is the model definition. This allows you to easily map a query to a predefined model\nsequelize.query('SELECT * FROM projects', { model: Projects }).then(function(projects){\n  // Each record will now be a instance of Project\n})\n\n\n\n\nReplacements\n\n\nReplacements in a query can be done in two different ways, either using named parameters (starting with \n:\n), or unnamed, represented by a \n?\n. Replacements are passed in the options object.\n\n\n\n\nIf an array is passed, \n?\n will be replaced in the order that they appear in the array\n\n\nIf an object is passed, \n:key\n will be replaced with the keys from that object. If the object contains keys not found in the query or vice versa, an exception will be thrown.\n\n\n\n\nsequelize.query('SELECT * FROM projects WHERE status = ?',\n  { replacements: ['active'], type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\nsequelize.query('SELECT * FROM projects WHERE status = :status ',\n  { replacements: { status: 'active' }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\n\n\n\nArray replacements will automatically be handled, the following query searches for projects where the status matches an array of values.\n\n\nsequelize.query('SELECT * FROM projects WHERE status IN(:status) ',\n  { replacements: { status: ['active', 'inactive'] }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\n\n\n\nTo use the wildcard operator %, append it to your replacement. The following query matches users with names that start with 'ben'.\n\n\nsequelize.query('SELECT * FROM users WHERE name LIKE :search_name ',\n  { replacements: { search_name: 'ben%'  }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\n\n\n\nBind Parameter\n\n\nBind parameters are like replacements. Except replacements are escaped and inserted into the query by sequelize before the query is sent to the database, while bind parameters are sent to the database outside the SQL query text. A query can have either bind parameters or replacements.\n\n\nOnly SQLite and PostgreSQL support bind parameters. Other dialects will insert them into the SQL query in the same way it is done for replacements. Bind parameters are referred to by either $1, $2, ... (numeric) or $key (alpha-numeric). This is independent of the dialect.\n\n\n\n\nIf an array is passed, \n$1\n is bound to the 1st element in the array (\nbind[0]\n)\n\n\nIf an object is passed, \n$key\n is bound to \nobject['key']\n. Each key must begin with a non-numeric char. \n$1\n is not a valid key, even if \nobject['1']\n exists.\n\n\nIn either case \n$$\n can be used to escape a literal \n$\n sign.\n\n\n\n\nThe array or object must contain all bound values or Sequelize will throw an exception. This applies even to cases in which the database may ignore the bound parameter.\n\n\nThe database may add further restrictions to this. Bind parameters cannot be SQL keywords, nor table or column names. They are also ignored in quoted text or data. In PostgreSQL it may also be needed to typecast them, if the type cannot be inferred from the context \n$1::varchar\n.\n\n\nsequelize.query('SELECT *, \ntext with literal $$1 and literal $$status\n as t FROM projects WHERE status = $1',\n  { bind: ['active'], type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\nsequelize.query('SELECT *, \ntext with literal $$1 and literal $$status\n as t FROM projects WHERE status = $status',\n  { bind: { status: 'active' }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})", 
            "title": "Raw queries"
        }, 
        {
            "location": "/docs/raw-queries/#replacements", 
            "text": "Replacements in a query can be done in two different ways, either using named parameters (starting with  : ), or unnamed, represented by a  ? . Replacements are passed in the options object.   If an array is passed,  ?  will be replaced in the order that they appear in the array  If an object is passed,  :key  will be replaced with the keys from that object. If the object contains keys not found in the query or vice versa, an exception will be thrown.   sequelize.query('SELECT * FROM projects WHERE status = ?',\n  { replacements: ['active'], type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\nsequelize.query('SELECT * FROM projects WHERE status = :status ',\n  { replacements: { status: 'active' }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})  Array replacements will automatically be handled, the following query searches for projects where the status matches an array of values.  sequelize.query('SELECT * FROM projects WHERE status IN(:status) ',\n  { replacements: { status: ['active', 'inactive'] }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})  To use the wildcard operator %, append it to your replacement. The following query matches users with names that start with 'ben'.  sequelize.query('SELECT * FROM users WHERE name LIKE :search_name ',\n  { replacements: { search_name: 'ben%'  }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})", 
            "title": "Replacements"
        }, 
        {
            "location": "/docs/raw-queries/#bind-parameter", 
            "text": "Bind parameters are like replacements. Except replacements are escaped and inserted into the query by sequelize before the query is sent to the database, while bind parameters are sent to the database outside the SQL query text. A query can have either bind parameters or replacements.  Only SQLite and PostgreSQL support bind parameters. Other dialects will insert them into the SQL query in the same way it is done for replacements. Bind parameters are referred to by either $1, $2, ... (numeric) or $key (alpha-numeric). This is independent of the dialect.   If an array is passed,  $1  is bound to the 1st element in the array ( bind[0] )  If an object is passed,  $key  is bound to  object['key'] . Each key must begin with a non-numeric char.  $1  is not a valid key, even if  object['1']  exists.  In either case  $$  can be used to escape a literal  $  sign.   The array or object must contain all bound values or Sequelize will throw an exception. This applies even to cases in which the database may ignore the bound parameter.  The database may add further restrictions to this. Bind parameters cannot be SQL keywords, nor table or column names. They are also ignored in quoted text or data. In PostgreSQL it may also be needed to typecast them, if the type cannot be inferred from the context  $1::varchar .  sequelize.query('SELECT *,  text with literal $$1 and literal $$status  as t FROM projects WHERE status = $1',\n  { bind: ['active'], type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})\n\nsequelize.query('SELECT *,  text with literal $$1 and literal $$status  as t FROM projects WHERE status = $status',\n  { bind: { status: 'active' }, type: sequelize.QueryTypes.SELECT }\n).then(function(projects) {\n  console.log(projects)\n})", 
            "title": "Bind Parameter"
        }, 
        {
            "location": "/docs/migrations/", 
            "text": "Sequelize \n2.0.0\n introduces a new CLI which is based on \ngulp\n and combines \nsequelize-cli\n and \ngulp-sequelize\n. The CLI ships support for migrations and project bootstrapping. With migrations you can transfer your existing database into another state and vice versa: Those state transitions are saved in migration files, which describe the way how to get to the new state and how to revert the changes in order to get back to the old state.\n\n\nThe CLI\n\n\nIn order to use the CLI you need to install the respective package:\n\n\n$ npm install --save sequelize-cli\n\n\n\n\nAs with any npm package, you can use the global flag (\n-g\n) to install the CLI globally. If you have installed the CLI without the global flag, use \nnode_modules/.bin/sequelize [command]\n instead of \nsequelize [command]\n.\n\n\nThe CLI currently supports the following commands:\n\n\n$ sequelize db:migrate        # Run pending migrations.\n$ sequelize db:migrate:undo   # Revert the last migration run.\n$ sequelize help              # Display this help text.\n$ sequelize init              # Initializes the project.\n$ sequelize migration:create  # Generates a new migration file.\n$ sequelize version           # Prints the version number.\n\n\n\n\nFurther and more detailed information about the available commands\ncan be obtained via the help command:\n\n\n$ sequelize help:init\n$ sequelize help:db:migrate\n$ sequelize help:db:migrate:undo\n# etc\n\n\n\n\nThe latter one for example will print out the following output:\n\n\nSequelize [CLI: v0.0.2, ORM: v1.7.5]\n\nCOMMANDS\n    sequelize db:migrate:undo -- Revert the last migration run.\n\nDESCRIPTION\n    Revert the last migration run.\n\nOPTIONS\n    --env           The environment to run the command in. Default: development\n    --options-path  The path to a JSON file with additional options. Default: none\n    --coffee        Enables coffee script support. Default: false\n    --config        The path to the config file. Default: config/config.json\n\n\n\n\nSkeleton\n\n\nThe following skeleton shows a typical migration file. All migrations are expected to be located in a folder called \nmigrations\n at the very top of the project. The sequelize binary can generate a migration skeleton. See the above section for more details.\n\n\nmodule.exports = {\n  up: function(queryInterface, Sequelize) {\n    // logic for transforming into the new state\n  },\n\u00a0\n  down: function(queryInterface, Sequelize) {\n    // logic for reverting the changes\n  }\n}\n\n\n\n\nThe passed \nqueryInterface\n object can be used to modify the database. The \nSequelize\n object stores the available data types such as \nSTRING\n or \nINTEGER\n. Function \nup\n or \ndown\n should return a \nPromise\n. Here is some code:\n\n\nmodule.exports = {\n  up: function(queryInterface, Sequelize) {\n    return queryInterface.dropAllTables();\n  }\n}\n\n\n\n\nThe available methods of the queryInterface object are the following.\n\n\nFunctions\n\n\nUsing the \nqueryInterface\n object describe before, you will have access to most of already introduced functions. Furthermore there are some other methods, which are designed to actually change the database schema.\n\n\ncreateTable(tableName, attributes, options)\n\n\nThis method allows creation of new tables. It is allowed to pass simple or complex attribute definitions. You can define the encoding of the table and the table's engine via options\n\n\nqueryInterface.createTable(\n  'nameOfTheNewTable',\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    createdAt: {\n      type: Sequelize.DATE\n    },\n    updatedAt: {\n      type: Sequelize.DATE\n    },\n    attr1: Sequelize.STRING,\n    attr2: Sequelize.INTEGER,\n    attr3: {\n      type: Sequelize.BOOLEAN,\n      defaultValue: false,\n      allowNull: false\n    },\n    //foreign key usage\n    attr4: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: 'another_table_name',\n            key: 'id'\n        },\n        onUpdate: 'cascade',\n        onDelete: 'cascade'\n    }\n  },\n  {\n    engine: 'MYISAM',                     // default: 'InnoDB'\n    charset: 'latin1',                    // default: null\n    schema: 'public'                      // default: public, PostgreSQL only.\n  }\n)\n\n\n\n\ndropTable(tableName, options)\n\n\nThis method allows deletion of an existing table.\n\n\nqueryInterface.dropTable('nameOfTheExistingTable')\n\n\n\n\ndropAllTables(options)\n\n\nThis method allows deletion of all existing tables in the database.\n\n\nqueryInterface.dropAllTables()\n\n\n\n\nrenameTable(before, after, options)\n\n\nThis method allows renaming of an existing table.\n\n\nqueryInterface.renameTable('Person', 'User')\n\n\n\n\nshowAllTables(options)\n\n\nThis method returns the name of all existing tables in the database.\n\n\nqueryInterface.showAllTables().then(function(tableNames) {})\n\n\n\n\ndescribeTable(tableName, options)\n\n\nThis method returns an array of hashes containing information about all attributes in the table.\n\n\nqueryInterface.describeTable('Person').then(function(attributes) {\n  /*\n    attributes will be something like:\n\u00a0\n    {\n      name: {\n        type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n        allowNull:    true,\n        defaultValue: null\n      },\n      isBetaMember: {\n        type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n        allowNull:    false,\n        defaultValue: false\n      }\n    }\n  */\n})\n\n\n\n\naddColumn(tableNameOrOptions, attributeName, dataTypeOrOptions, options)\n\n\nThis method allows adding columns to an existing table. The data type can be simple or complex.\n\n\nqueryInterface.addColumn(\n  'nameOfAnExistingTable',\n  'nameOfTheNewAttribute',\n  Sequelize.STRING\n)\n\u00a0\n// or\n\u00a0\nqueryInterface.addColumn(\n  'nameOfAnExistingTable',\n  'nameOfTheNewAttribute',\n  {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n)\n\n// or with an explicit schema:\n\nqueryInterface.addColumn({\n    tableName: 'Person',\n    schema: 'public'\n  },\n  'signature',\n  Sequelize.STRING\n)\n\n\n\n\n\nremoveColumn(tableNameOrOptions, attributeName, options)\n\n\nThis method allows deletion of a specific column of an existing table.\n\n\nqueryInterface.removeColumn('Person', 'signature')\n\n// or with an explicit schema:\n\nqueryInterface.removeColumn({\n  tableName: 'Person',\n  schema: 'public'\n}, 'signature');\n\n\n\n\nchangeColumn(tableName, attributeName, dataTypeOrOptions, options)\n\n\nThis method changes the meta data of an attribute. It is possible to change the default value, allowance of null or the data type. Please make sure, that you are completely describing the new data type.\n\n\nqueryInterface.changeColumn(\n  'nameOfAnExistingTable',\n  'nameOfAnExistingAttribute',\n  {\n    type: Sequelize.FLOAT,\n    allowNull: false,\n    defaultValue: 0.0\n  }\n)\n\n\n\n\nrenameColumn(tableName, attrNameBefore, attrNameAfter, options)\n\n\nThis methods allows renaming attributes.\n\n\nqueryInterface.renameColumn('Person', 'signature', 'sig')\n\n\n\n\naddIndex(tableName, attributes, options)\n\n\nThis methods creates indexes for specific attributes of a table. The index name will be automatically generated if it is not passed via in the options (see below).\n\n\n// This example will create the index person_firstname_lastname\nqueryInterface.addIndex('Person', ['firstname', 'lastname'])\n\n// This example will create a unique index with the name SuperDuperIndex using the optional 'options' field.\n// Possible options:\n// - indicesType: UNIQUE|FULLTEXT|SPATIAL\n// - indexName: The name of the index. Default is __\n// - parser: For FULLTEXT columns set your parser\n// - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect\n// - logging: A function that receives the sql query, e.g. console.log\nqueryInterface.addIndex(\n  'Person',\n  ['firstname', 'lastname'],\n  {\n    indexName: 'SuperDuperIndex',\n    indicesType: 'UNIQUE'\n  }\n)\n\n\n\n\nremoveIndex(tableName, indexNameOrAttributes, options)\n\n\nThis method deletes an existing index of a table.\n\n\nqueryInterface.removeIndex('Person', 'SuperDuperIndex')\n\u00a0\n// or\n\u00a0\nqueryInterface.removeIndex('Person', ['firstname', 'lastname'])\n\n\n\n\nProgrammatic use\n\n\nSequelize has a \nsister library\n for programmatically handling execution and logging of migration tasks.", 
            "title": "Migrations"
        }, 
        {
            "location": "/docs/migrations/#the-cli", 
            "text": "In order to use the CLI you need to install the respective package:  $ npm install --save sequelize-cli  As with any npm package, you can use the global flag ( -g ) to install the CLI globally. If you have installed the CLI without the global flag, use  node_modules/.bin/sequelize [command]  instead of  sequelize [command] .  The CLI currently supports the following commands:  $ sequelize db:migrate        # Run pending migrations.\n$ sequelize db:migrate:undo   # Revert the last migration run.\n$ sequelize help              # Display this help text.\n$ sequelize init              # Initializes the project.\n$ sequelize migration:create  # Generates a new migration file.\n$ sequelize version           # Prints the version number.  Further and more detailed information about the available commands\ncan be obtained via the help command:  $ sequelize help:init\n$ sequelize help:db:migrate\n$ sequelize help:db:migrate:undo\n# etc  The latter one for example will print out the following output:  Sequelize [CLI: v0.0.2, ORM: v1.7.5]\n\nCOMMANDS\n    sequelize db:migrate:undo -- Revert the last migration run.\n\nDESCRIPTION\n    Revert the last migration run.\n\nOPTIONS\n    --env           The environment to run the command in. Default: development\n    --options-path  The path to a JSON file with additional options. Default: none\n    --coffee        Enables coffee script support. Default: false\n    --config        The path to the config file. Default: config/config.json", 
            "title": "The CLI"
        }, 
        {
            "location": "/docs/migrations/#skeleton", 
            "text": "The following skeleton shows a typical migration file. All migrations are expected to be located in a folder called  migrations  at the very top of the project. The sequelize binary can generate a migration skeleton. See the above section for more details.  module.exports = {\n  up: function(queryInterface, Sequelize) {\n    // logic for transforming into the new state\n  },\n\u00a0\n  down: function(queryInterface, Sequelize) {\n    // logic for reverting the changes\n  }\n}  The passed  queryInterface  object can be used to modify the database. The  Sequelize  object stores the available data types such as  STRING  or  INTEGER . Function  up  or  down  should return a  Promise . Here is some code:  module.exports = {\n  up: function(queryInterface, Sequelize) {\n    return queryInterface.dropAllTables();\n  }\n}  The available methods of the queryInterface object are the following.", 
            "title": "Skeleton"
        }, 
        {
            "location": "/docs/migrations/#functions", 
            "text": "Using the  queryInterface  object describe before, you will have access to most of already introduced functions. Furthermore there are some other methods, which are designed to actually change the database schema.", 
            "title": "Functions"
        }, 
        {
            "location": "/docs/migrations/#createtabletablename-attributes-options", 
            "text": "This method allows creation of new tables. It is allowed to pass simple or complex attribute definitions. You can define the encoding of the table and the table's engine via options  queryInterface.createTable(\n  'nameOfTheNewTable',\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    createdAt: {\n      type: Sequelize.DATE\n    },\n    updatedAt: {\n      type: Sequelize.DATE\n    },\n    attr1: Sequelize.STRING,\n    attr2: Sequelize.INTEGER,\n    attr3: {\n      type: Sequelize.BOOLEAN,\n      defaultValue: false,\n      allowNull: false\n    },\n    //foreign key usage\n    attr4: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: 'another_table_name',\n            key: 'id'\n        },\n        onUpdate: 'cascade',\n        onDelete: 'cascade'\n    }\n  },\n  {\n    engine: 'MYISAM',                     // default: 'InnoDB'\n    charset: 'latin1',                    // default: null\n    schema: 'public'                      // default: public, PostgreSQL only.\n  }\n)", 
            "title": "createTable(tableName, attributes, options)"
        }, 
        {
            "location": "/docs/migrations/#droptabletablename-options", 
            "text": "This method allows deletion of an existing table.  queryInterface.dropTable('nameOfTheExistingTable')", 
            "title": "dropTable(tableName, options)"
        }, 
        {
            "location": "/docs/migrations/#dropalltablesoptions", 
            "text": "This method allows deletion of all existing tables in the database.  queryInterface.dropAllTables()", 
            "title": "dropAllTables(options)"
        }, 
        {
            "location": "/docs/migrations/#renametablebefore-after-options", 
            "text": "This method allows renaming of an existing table.  queryInterface.renameTable('Person', 'User')", 
            "title": "renameTable(before, after, options)"
        }, 
        {
            "location": "/docs/migrations/#showalltablesoptions", 
            "text": "This method returns the name of all existing tables in the database.  queryInterface.showAllTables().then(function(tableNames) {})", 
            "title": "showAllTables(options)"
        }, 
        {
            "location": "/docs/migrations/#describetabletablename-options", 
            "text": "This method returns an array of hashes containing information about all attributes in the table.  queryInterface.describeTable('Person').then(function(attributes) {\n  /*\n    attributes will be something like:\n\u00a0\n    {\n      name: {\n        type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n        allowNull:    true,\n        defaultValue: null\n      },\n      isBetaMember: {\n        type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n        allowNull:    false,\n        defaultValue: false\n      }\n    }\n  */\n})", 
            "title": "describeTable(tableName, options)"
        }, 
        {
            "location": "/docs/migrations/#addcolumntablenameoroptions-attributename-datatypeoroptions-options", 
            "text": "This method allows adding columns to an existing table. The data type can be simple or complex.  queryInterface.addColumn(\n  'nameOfAnExistingTable',\n  'nameOfTheNewAttribute',\n  Sequelize.STRING\n)\n\u00a0\n// or\n\u00a0\nqueryInterface.addColumn(\n  'nameOfAnExistingTable',\n  'nameOfTheNewAttribute',\n  {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n)\n\n// or with an explicit schema:\n\nqueryInterface.addColumn({\n    tableName: 'Person',\n    schema: 'public'\n  },\n  'signature',\n  Sequelize.STRING\n)", 
            "title": "addColumn(tableNameOrOptions, attributeName, dataTypeOrOptions, options)"
        }, 
        {
            "location": "/docs/migrations/#removecolumntablenameoroptions-attributename-options", 
            "text": "This method allows deletion of a specific column of an existing table.  queryInterface.removeColumn('Person', 'signature')\n\n// or with an explicit schema:\n\nqueryInterface.removeColumn({\n  tableName: 'Person',\n  schema: 'public'\n}, 'signature');", 
            "title": "removeColumn(tableNameOrOptions, attributeName, options)"
        }, 
        {
            "location": "/docs/migrations/#changecolumntablename-attributename-datatypeoroptions-options", 
            "text": "This method changes the meta data of an attribute. It is possible to change the default value, allowance of null or the data type. Please make sure, that you are completely describing the new data type.  queryInterface.changeColumn(\n  'nameOfAnExistingTable',\n  'nameOfAnExistingAttribute',\n  {\n    type: Sequelize.FLOAT,\n    allowNull: false,\n    defaultValue: 0.0\n  }\n)", 
            "title": "changeColumn(tableName, attributeName, dataTypeOrOptions, options)"
        }, 
        {
            "location": "/docs/migrations/#renamecolumntablename-attrnamebefore-attrnameafter-options", 
            "text": "This methods allows renaming attributes.  queryInterface.renameColumn('Person', 'signature', 'sig')", 
            "title": "renameColumn(tableName, attrNameBefore, attrNameAfter, options)"
        }, 
        {
            "location": "/docs/migrations/#addindextablename-attributes-options", 
            "text": "This methods creates indexes for specific attributes of a table. The index name will be automatically generated if it is not passed via in the options (see below).  // This example will create the index person_firstname_lastname\nqueryInterface.addIndex('Person', ['firstname', 'lastname'])\n\n// This example will create a unique index with the name SuperDuperIndex using the optional 'options' field.\n// Possible options:\n// - indicesType: UNIQUE|FULLTEXT|SPATIAL\n// - indexName: The name of the index. Default is __\n// - parser: For FULLTEXT columns set your parser\n// - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect\n// - logging: A function that receives the sql query, e.g. console.log\nqueryInterface.addIndex(\n  'Person',\n  ['firstname', 'lastname'],\n  {\n    indexName: 'SuperDuperIndex',\n    indicesType: 'UNIQUE'\n  }\n)", 
            "title": "addIndex(tableName, attributes, options)"
        }, 
        {
            "location": "/docs/migrations/#removeindextablename-indexnameorattributes-options", 
            "text": "This method deletes an existing index of a table.  queryInterface.removeIndex('Person', 'SuperDuperIndex')\n\u00a0\n// or\n\u00a0\nqueryInterface.removeIndex('Person', ['firstname', 'lastname'])", 
            "title": "removeIndex(tableName, indexNameOrAttributes, options)"
        }, 
        {
            "location": "/docs/migrations/#programmatic-use", 
            "text": "Sequelize has a  sister library  for programmatically handling execution and logging of migration tasks.", 
            "title": "Programmatic use"
        }, 
        {
            "location": "/api/sequelize/", 
            "text": "Class Sequelize\n\n\nView code\n\n\nThis is the main class, the entry point to sequelize. To use it, you just need to import sequelize:\n\n\nvar Sequelize = require('sequelize');\n\n\n\n\nIn addition to sequelize, the connection library for the dialect you want to use should also be installed in your project. You don't need to import it however, as sequelize will take care of that.\n\n\n\n\n\n\nnew Sequelize(database, [username=null], [password=null], [options={}])\n\n\nView code\n\n\nInstantiate sequelize with name of database, username and password\n\n\nExample usage\n\n\n// without password and options\nvar sequelize = new Sequelize('database', 'username')\n\n// without options\nvar sequelize = new Sequelize('database', 'username', 'password')\n\n// without password / with blank password\nvar sequelize = new Sequelize('database', 'username', null, {})\n\n// with password and options\nvar sequelize = new Sequelize('my_database', 'john', 'doe', {})\n\n// with uri (see below)\nvar sequelize = new Sequelize('mysql://localhost:3306/database', {})\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndatabase\n\n\nString\n\n\nThe name of the database\n\n\n\n\n\n\n[username=null]\n\n\nString\n\n\nThe username which is used to authenticate against the database.\n\n\n\n\n\n\n[password=null]\n\n\nString\n\n\nThe password which is used to authenticate against the database.\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\nAn object with options.\n\n\n\n\n\n\n[options.dialect='mysql']\n\n\nString\n\n\nThe dialect of the database you are connecting to. One of mysql, postgres, sqlite and mssql.\n\n\n\n\n\n\n[options.dialectModulePath=null]\n\n\nString\n\n\nIf specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'pg.js' here\n\n\n\n\n\n\n[options.dialectOptions]\n\n\nObject\n\n\nAn object of additional options, which are passed directly to the connection library\n\n\n\n\n\n\n[options.storage]\n\n\nString\n\n\nOnly used by sqlite. Defaults to ':memory:'\n\n\n\n\n\n\n[options.host='localhost']\n\n\nString\n\n\nThe host of the relational database.\n\n\n\n\n\n\n[options.port=]\n\n\nInteger\n\n\nThe port of the relational database.\n\n\n\n\n\n\n[options.protocol='tcp']\n\n\nString\n\n\nThe protocol of the relational database.\n\n\n\n\n\n\n[options.define={}]\n\n\nObject\n\n\nDefault options for model definitions. See sequelize.define for options\n\n\n\n\n\n\n[options.query={}]\n\n\nObject\n\n\nDefault options for sequelize.query\n\n\n\n\n\n\n[options.set={}]\n\n\nObject\n\n\nDefault options for sequelize.set\n\n\n\n\n\n\n[options.sync={}]\n\n\nObject\n\n\nDefault options for sequelize.sync\n\n\n\n\n\n\n[options.timezone='+00:00']\n\n\nString\n\n\nThe timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.\n\n\n\n\n\n\n[options.logging=console.log]\n\n\nFunction\n\n\nA function that gets executed every time Sequelize would log something.\n\n\n\n\n\n\n[options.omitNull=false]\n\n\nBoolean\n\n\nA flag that defines if null values should be passed to SQL queries or not.\n\n\n\n\n\n\n[options.native=false]\n\n\nBoolean\n\n\nA flag that defines if native library shall be used or not. Currently only has an effect for postgres\n\n\n\n\n\n\n[options.replication=false]\n\n\nBoolean\n\n\nUse read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: \nhost\n, \nport\n, \nusername\n, \npassword\n, \ndatabase\n\n\n\n\n\n\n[options.pool={}]\n\n\nObject\n\n\nShould sequelize use a connection pool. Default is true\n\n\n\n\n\n\n[options.pool.max]\n\n\nInteger\n\n\n\n\n\n\n\n\n[options.pool.min]\n\n\nInteger\n\n\n\n\n\n\n\n\n[options.pool.idle]\n\n\nInteger\n\n\nThe maximum time, in milliseconds, that a connection can be idle before being released\n\n\n\n\n\n\n[options.pool.validateConnection]\n\n\nFunction\n\n\nA function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected\n\n\n\n\n\n\n[options.quoteIdentifiers=true]\n\n\nBoolean\n\n\nSet to \nfalse\n to make table names and attributes case-insensitive on Postgres and skip double quoting of them.\n\n\n\n\n\n\n[options.transactionType='DEFERRED']\n\n\nString\n\n\nSet the default transaction type. See \nSequelize.Transaction.TYPES\n for possible options. Sqlite only.\n\n\n\n\n\n\n[options.isolationLevel='REPEATABLE_READ']\n\n\nString\n\n\nSet the default transaction isolation level. See \nSequelize.Transaction.ISOLATION_LEVELS\n for possible options.\n\n\n\n\n\n\n[options.retry]\n\n\nObject\n\n\nSet of flags that control when a query is automatically retried.\n\n\n\n\n\n\n[options.retry.match]\n\n\nArray\n\n\nOnly retry a query if the error matches one of these strings.\n\n\n\n\n\n\n[options.retry.max]\n\n\nInteger\n\n\nHow many times a failing query is automatically retried. Set to 0 to disable retrying on SQL_BUSY error.\n\n\n\n\n\n\n[options.typeValidation=false]\n\n\nBoolean\n\n\nRun built in type validators on insert and update, e.g. validate that arguments passed to integer fields are integer-like.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\nnew Sequelize(uri, [options={}])\n\n\nView code\n\n\nInstantiate sequelize with an URI\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuri\n\n\nString\n\n\nA full database URI\n\n\n\n\n\n\n[options={}]\n\n\nobject\n\n\nSee above for possible options\n\n\n\n\n\n\n\n\n\n\n\n\nmodels\n\n\nView code\n\n\nModels are stored here under the name given to \nsequelize.define\n\n\n\n\n\n\nversion\n\n\nView code\n\n\nSequelize version number.\n\n\n\n\n\n\nSequelize\n\n\nView code\n\n\nA reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\n\n\nSee:\n\n\n\n\nSequelize\n\n\n\n\n\n\n\n\nUtils\n\n\nView code\n\n\nA reference to sequelize utilities. Most users will not need to use these utils directly. However, you might want to use \nSequelize.Utils._\n, which is a reference to the lodash library, if you don't already have it imported in your project.\n\n\n\n\n\n\nPromise\n\n\nView code\n\n\nA handy reference to the bluebird Promise class\n\n\n\n\n\n\nQueryTypes\n\n\nView code\n\n\nAvailable query types for use with \nsequelize.query\n\n\n\n\n\n\nValidator\n\n\nView code\n\n\nExposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\n\n\nSee:\n\n\n\n\n\n\nTransaction\n\n\nView code\n\n\nA reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\n\n\nSee:\n\n\n\n\nTransaction\n\n\nSequelize#transaction\n\n\n\n\n\n\n\n\nDeferrable\n\n\nView code\n\n\nA reference to the deferrable collection. Use this to access the different deferrable options.\n\n\nSee:\n\n\n\n\nDeferrable\n\n\nSequelize#transaction\n\n\n\n\n\n\n\n\nInstance\n\n\nView code\n\n\nA reference to the sequelize instance class.\n\n\nSee:\n\n\n\n\nInstance\n\n\n\n\n\n\n\n\nAssociation\n\n\nView code\n\n\nA reference to the sequelize association class.\n\n\nSee:\n\n\n\n\nAssociation\n\n\n\n\n\n\n\n\nError\n\n\nView code\n\n\nA general error class\n\n\nSee:\n\n\n\n\nErrors#BaseError\n\n\n\n\n\n\n\n\nValidationError\n\n\nView code\n\n\nEmitted when a validation fails\n\n\nSee:\n\n\n\n\nErrors#ValidationError\n\n\n\n\n\n\n\n\nValidationErrorItem\n\n\nView code\n\n\nDescribes a validation error on an instance path\n\n\nSee:\n\n\n\n\nErrors#ValidationErrorItem\n\n\n\n\n\n\n\n\nDatabaseError\n\n\nView code\n\n\nA base class for all database related errors.\n\n\nSee:\n\n\n\n\nErrors#DatabaseError\n\n\n\n\n\n\n\n\nTimeoutError\n\n\nView code\n\n\nThrown when a database query times out because of a deadlock\n\n\nSee:\n\n\n\n\nErrors#TimeoutError\n\n\n\n\n\n\n\n\nUniqueConstraintError\n\n\nView code\n\n\nThrown when a unique constraint is violated in the database\n\n\nSee:\n\n\n\n\nErrors#UniqueConstraintError\n\n\n\n\n\n\n\n\nExclusionConstraintError\n\n\nView code\n\n\nThrown when an exclusion constraint is violated in the database\n\n\nSee:\n\n\n\n\nErrors#ExclusionConstraintError\n\n\n\n\n\n\n\n\nForeignKeyConstraintError\n\n\nView code\n\n\nThrown when a foreign key constraint is violated in the database\n\n\nSee:\n\n\n\n\nErrors#ForeignKeyConstraintError\n\n\n\n\n\n\n\n\nConnectionError\n\n\nView code\n\n\nA base class for all connection related errors.\n\n\nSee:\n\n\n\n\nErrors#ConnectionError\n\n\n\n\n\n\n\n\nConnectionRefusedError\n\n\nView code\n\n\nThrown when a connection to a database is refused\n\n\nSee:\n\n\n\n\nErrors#ConnectionRefusedError\n\n\n\n\n\n\n\n\nAccessDeniedError\n\n\nView code\n\n\nThrown when a connection to a database is refused due to insufficient access\n\n\nSee:\n\n\n\n\nErrors#AccessDeniedError\n\n\n\n\n\n\n\n\nHostNotFoundError\n\n\nView code\n\n\nThrown when a connection to a database has a hostname that was not found\n\n\nSee:\n\n\n\n\nErrors#HostNotFoundError\n\n\n\n\n\n\n\n\nHostNotReachableError\n\n\nView code\n\n\nThrown when a connection to a database has a hostname that was not reachable\n\n\nSee:\n\n\n\n\nErrors#HostNotReachableError\n\n\n\n\n\n\n\n\nInvalidConnectionError\n\n\nView code\n\n\nThrown when a connection to a database has invalid values for any of the connection parameters\n\n\nSee:\n\n\n\n\nErrors#InvalidConnectionError\n\n\n\n\n\n\n\n\nConnectionTimedOutError\n\n\nView code\n\n\nThrown when a connection to a database times out\n\n\nSee:\n\n\n\n\nErrors#ConnectionTimedOutError\n\n\n\n\n\n\n\n\nInstanceError\n\n\nView code\n\n\nThrown when a some problem occurred with Instance methods (see message for details)\n\n\nSee:\n\n\n\n\nErrors#InstanceError\n\n\n\n\n\n\n\n\ngetDialect()\n -\n \nString\n\n\nView code\n\n\nReturns the specified dialect.\n\nReturns:\n The specified dialect.\n\n\n\n\n\n\ngetQueryInterface()\n -\n \nQueryInterface\n\n\nView code\n\n\nReturns an instance of QueryInterface.\n\n\nSee:\n\n\n\n\nQueryInterface\n\n\n\n\nReturns:\n An instance (singleton) of QueryInterface.\n\n\n\n\n\n\ndefine(modelName, attributes, [options])\n -\n \nModel\n\n\nView code\n\n\nDefine a new model, representing a table in the DB.\n\n\nThe table columns are define by the hash that is given as the second argument. Each attribute of the hash represents a column. A short table definition might look like this:\n\n\nsequelize.define('modelName', {\n    columnA: {\n        type: Sequelize.BOOLEAN,\n        validate: {\n          is: [\n[a-z]\n,'i'],        // will only allow letters\n          max: 23,                  // only allow values \n= 23\n          isIn: {\n            args: [['en', 'zh']],\n            msg: \nMust be English or Chinese\n\n          }\n        },\n        field: 'column_a'\n        // Other attributes here\n    },\n    columnB: Sequelize.STRING,\n    columnC: 'MY VERY OWN COLUMN TYPE'\n})\n\nsequelize.models.modelName // The model will now be available in models under the name given to define\n\n\n\n\nAs shown above, column definitions can be either strings, a reference to one of the datatypes that are predefined on the Sequelize constructor, or an object that allows you to specify both the type of the column, and other attributes such as default values, foreign key constraints and custom setters and getters.\n\n\nFor a list of possible data types, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types\n\n\nFor more about getters and setters, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters\n\n\nFor more about instance and class methods, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models\n\n\nFor more about validation, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations\n\n\nSee:\n\n\n\n\nDataTypes\n\n\nHooks\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelName\n\n\nString\n\n\nThe name of the model. The model will be stored in \nsequelize.models\n under this name\n\n\n\n\n\n\nattributes\n\n\nObject\n\n\nAn object, where each attribute is a column of the table. Each column can be either a DataType, a string or a type-description object, with the properties described below:\n\n\n\n\n\n\nattributes.column\n\n\nString \n DataType \n Object\n\n\nThe description of a database column\n\n\n\n\n\n\nattributes.column.type\n\n\nString \n DataType\n\n\nA string or a data type\n\n\n\n\n\n\n[attributes.column.allowNull=true]\n\n\nBoolean\n\n\nIf false, the column will have a NOT NULL constraint, and a not null validation will be run before an instance is saved.\n\n\n\n\n\n\n[attributes.column.defaultValue=null]\n\n\nAny\n\n\nA literal default value, a JavaScript function, or an SQL function (see \nsequelize.fn\n)\n\n\n\n\n\n\n[attributes.column.unique=false]\n\n\nString \n Boolean\n\n\nIf true, the column will get a unique constraint. If a string is provided, the column will be part of a composite unique index. If multiple columns have the same string, they will be part of the same unique index\n\n\n\n\n\n\n[attributes.column.primaryKey=false]\n\n\nBoolean\n\n\n\n\n\n\n\n\n[attributes.column.field=null]\n\n\nString\n\n\nIf set, sequelize will map the attribute name to a different name in the database\n\n\n\n\n\n\n[attributes.column.autoIncrement=false]\n\n\nBoolean\n\n\n\n\n\n\n\n\n[attributes.column.comment=null]\n\n\nString\n\n\n\n\n\n\n\n\n[attributes.column.references=null]\n\n\nString \n Model\n\n\nAn object with reference configurations\n\n\n\n\n\n\n[attributes.column.references.model]\n\n\nString \n Model\n\n\nIf this column references another table, provide it here as a Model, or a string\n\n\n\n\n\n\n[attributes.column.references.key='id']\n\n\nString\n\n\nThe column of the foreign table that this column references\n\n\n\n\n\n\n[attributes.column.onUpdate]\n\n\nString\n\n\nWhat should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION\n\n\n\n\n\n\n[attributes.column.onDelete]\n\n\nString\n\n\nWhat should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION\n\n\n\n\n\n\n[attributes.column.get]\n\n\nFunction\n\n\nProvide a custom getter for this column. Use \nthis.getDataValue(String)\n to manipulate the underlying values.\n\n\n\n\n\n\n[attributes.column.set]\n\n\nFunction\n\n\nProvide a custom setter for this column. Use \nthis.setDataValue(String, Value)\n to manipulate the underlying values.\n\n\n\n\n\n\n[attributes.validate]\n\n\nObject\n\n\nAn object of validations to execute for this column every time the model is saved. Can be either the name of a validation provided by validator.js, a validation function provided by extending validator.js (see the \nDAOValidator\n property for more details), or a custom validation function. Custom validation functions are called with the value of the field, and can possibly take a second callback argument, to signal that they are asynchronous. If the validator is sync, it should throw in the case of a failed validation, it it is async, the callback should be called with the error text.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nThese options are merged with the default define options provided to the Sequelize constructor\n\n\n\n\n\n\n[options.defaultScope={}]\n\n\nObject\n\n\nDefine the default search scope to use for this model. Scopes have the same form as the options passed to find / findAll\n\n\n\n\n\n\n[options.scopes]\n\n\nObject\n\n\nMore scopes, defined in the same way as defaultScope above. See \nModel.scope\n for more information about how scopes are defined, and what you can do with them\n\n\n\n\n\n\n[options.omitNull]\n\n\nBoolean\n\n\nDon't persist null values. This means that all columns with null values will not be saved\n\n\n\n\n\n\n[options.timestamps=true]\n\n\nBoolean\n\n\nAdds createdAt and updatedAt timestamps to the model.\n\n\n\n\n\n\n[options.paranoid=false]\n\n\nBoolean\n\n\nCalling \ndestroy\n will not delete the model, but instead set a \ndeletedAt\n timestamp if this is true. Needs \ntimestamps=true\n to work\n\n\n\n\n\n\n[options.underscored=false]\n\n\nBoolean\n\n\nConverts all camelCased columns to underscored if true\n\n\n\n\n\n\n[options.underscoredAll=false]\n\n\nBoolean\n\n\nConverts camelCased model names to underscored table names if true\n\n\n\n\n\n\n[options.freezeTableName=false]\n\n\nBoolean\n\n\nIf freezeTableName is true, sequelize will not try to alter the DAO name to get the table name. Otherwise, the model name will be pluralized\n\n\n\n\n\n\n[options.name]\n\n\nObject\n\n\nAn object with two attributes, \nsingular\n and \nplural\n, which are used when this model is associated to others.\n\n\n\n\n\n\n[options.name.singular=inflection.singularize(modelName)]\n\n\nString\n\n\n\n\n\n\n\n\n[options.name.plural=inflection.pluralize(modelName)]\n\n\nString\n\n\n\n\n\n\n\n\n[options.indexes]\n\n\nArray.\nObject\n\n\n\n\n\n\n\n\n[options.indexes[].name]\n\n\nString\n\n\nThe name of the index. Defaults to model name + _ + fields concatenated\n\n\n\n\n\n\n[options.indexes[].type]\n\n\nString\n\n\nIndex type. Only used by mysql. One of \nUNIQUE\n, \nFULLTEXT\n and \nSPATIAL\n\n\n\n\n\n\n[options.indexes[].method]\n\n\nString\n\n\nThe method to create the index by (\nUSING\n statement in SQL). BTREE and HASH are supported by mysql and postgres, and postgres additionally supports GIST and GIN.\n\n\n\n\n\n\n[options.indexes[].unique=false]\n\n\nBoolean\n\n\nShould the index by unique? Can also be triggered by setting type to \nUNIQUE\n\n\n\n\n\n\n[options.indexes[].concurrently=false]\n\n\nBoolean\n\n\nPostgreSQL will build the index without taking any write locks. Postgres only\n\n\n\n\n\n\n[options.indexes[].fields]\n\n\nArray.\nString \n Object\n\n\nAn array of the fields to index. Each field can either be a string containing the name of the field, a sequelize object (e.g \nsequelize.fn\n), or an object with the following attributes: \nattribute\n (field name), \nlength\n (create a prefix index of length chars), \norder\n (the direction the column should be sorted in), \ncollate\n (the collation (sort order) for the column)\n\n\n\n\n\n\n[options.createdAt]\n\n\nString \n Boolean\n\n\nOverride the name of the createdAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.\n\n\n\n\n\n\n[options.updatedAt]\n\n\nString \n Boolean\n\n\nOverride the name of the updatedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.\n\n\n\n\n\n\n[options.deletedAt]\n\n\nString \n Boolean\n\n\nOverride the name of the deletedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.\n\n\n\n\n\n\n[options.tableName]\n\n\nString\n\n\nDefaults to pluralized model name, unless freezeTableName is true, in which case it uses model name verbatim\n\n\n\n\n\n\n[options.getterMethods]\n\n\nObject\n\n\nProvide getter functions that work like those defined per column. If you provide a getter method with the same name as a column, it will be used to access the value of that column. If you provide a name that does not match a column, this function will act as a virtual getter, that can fetch multiple other values\n\n\n\n\n\n\n[options.setterMethods]\n\n\nObject\n\n\nProvide setter functions that work like those defined per column. If you provide a setter method with the same name as a column, it will be used to update the value of that column. If you provide a name that does not match a column, this function will act as a virtual setter, that can act on and set other values, but will not be persisted\n\n\n\n\n\n\n[options.instanceMethods]\n\n\nObject\n\n\nProvide functions that are added to each instance (DAO). If you override methods provided by sequelize, you can access the original method using \nthis.constructor.super_.prototype\n, e.g. \nthis.constructor.super_.prototype.toJSON.apply(this, arguments)\n\n\n\n\n\n\n[options.classMethods]\n\n\nObject\n\n\nProvide functions that are added to the model (Model). If you override methods provided by sequelize, you can access the original method using \nthis.constructor.prototype\n, e.g. \nthis.constructor.prototype.find.apply(this, arguments)\n\n\n\n\n\n\n[options.schema='public']\n\n\nString\n\n\n\n\n\n\n\n\n[options.engine]\n\n\nString\n\n\n\n\n\n\n\n\n[options.charset]\n\n\nString\n\n\n\n\n\n\n\n\n[options.comment]\n\n\nString\n\n\n\n\n\n\n\n\n[options.collate]\n\n\nString\n\n\n\n\n\n\n\n\n[options.initialAutoIncrement]\n\n\nString\n\n\nSet the initial AUTO_INCREMENT value for the table in MySQL.\n\n\n\n\n\n\n[options.hooks]\n\n\nObject\n\n\nAn object of hook function that are called before and after certain lifecycle events. The possible hooks are: beforeValidate, afterValidate, beforeBulkCreate, beforeBulkDestroy, beforeBulkUpdate, beforeCreate, beforeDestroy, beforeUpdate, afterCreate, afterDestroy, afterUpdate, afterBulkCreate, afterBulkDestory and afterBulkUpdate. See Hooks for more information about hook functions and their signatures. Each property can either be a function, or an array of functions.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nAn object of model wide validations. Validations have access to all model values via \nthis\n. If the validator function takes an argument, it is assumed to be async, and is called with a callback that accepts an optional error.\n\n\n\n\n\n\n\n\n\n\n\n\nmodel(modelName)\n -\n \nModel\n\n\nView code\n\n\nFetch a Model which is already defined\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelName\n\n\nString\n\n\nThe name of a model defined with Sequelize.define\n\n\n\n\n\n\n\n\n\n\n\n\nisDefined(modelName)\n -\n \nBoolean\n\n\nView code\n\n\nChecks whether a model with the given name is defined\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelName\n\n\nString\n\n\nThe name of a model defined with Sequelize.define\n\n\n\n\n\n\n\n\n\n\n\n\nimport(path)\n -\n \nModel\n\n\nView code\n\n\nImports a model defined in another file\n\n\nImported models are cached, so multiple calls to import with the same path will not load the file multiple times\n\n\nSee https://github.com/sequelize/express-example for a short example of how to define your models in separate files so that they can be imported by sequelize.import\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nString\n\n\nThe path to the file that holds the model you want to import. If the part is relative, it will be resolved relatively to the calling file\n\n\n\n\n\n\n\n\n\n\n\n\nquery(sql, [options={}])\n -\n \nPromise\n\n\nView code\n\n\nExecute a query on the DB, with the possibility to bypass all the sequelize goodness.\n\n\nBy default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc. Use \n.spread\n to access the results.\n\n\nIf you are running a type of query where you don't need the metadata, for example a \nSELECT\n query, you can pass in a query type to make sequelize format the results:\n\n\nsequelize.query('SELECT...').spread(function (results, metadata) {\n  // Raw query - use spread\n});\n\nsequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(function (results) {\n  // SELECT query - use then\n})\n\n\n\n\nSee:\n\n\n\n\nModel#build\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsql\n\n\nString\n\n\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\nQuery options.\n\n\n\n\n\n\n[options.raw]\n\n\nBoolean\n\n\nIf true, sequelize will not try to format the results of the query, or build an instance of a model from the result\n\n\n\n\n\n\n[options.transaction=null]\n\n\nTransaction\n\n\nThe transaction that the query should be executed under\n\n\n\n\n\n\n[options.type='RAW']\n\n\nString\n\n\nThe type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but \nSequelize.QueryTypes\n is provided as convenience shortcuts.\n\n\n\n\n\n\n[options.nest=false]\n\n\nBoolean\n\n\nIf true, transforms objects with \n.\n separated property names into nested objects using \ndottie.js\n. For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When \nnest\n is true, the query type is assumed to be \n'SELECT'\n, unless otherwise specified\n\n\n\n\n\n\n[options.plain=false]\n\n\nBoolean\n\n\nSets the query type to \nSELECT\n and return a single row\n\n\n\n\n\n\n[options.replacements]\n\n\nObject \n Array\n\n\nEither an object of named parameter replacements in the format \n:param\n or an array of unnamed replacements to replace \n?\n in your SQL.\n\n\n\n\n\n\n[options.bind]\n\n\nObject \n Array\n\n\nEither an object of named bind parameter in the format \n$param\n or an array of unnamed bind parameter to replace \n$1, $2, ...\n in your SQL.\n\n\n\n\n\n\n[options.useMaster=false]\n\n\nBoolean\n\n\nForce the query to use the write pool, regardless of the query type.\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.instance]\n\n\nInstance\n\n\nA sequelize instance used to build the return instance\n\n\n\n\n\n\n[options.model]\n\n\nModel\n\n\nA sequelize model used to build the returned model instances (used to be called callee)\n\n\n\n\n\n\n[options.retry]\n\n\nObject\n\n\nSet of flags that control when a query is automatically retried.\n\n\n\n\n\n\n[options.retry.match]\n\n\nArray\n\n\nOnly retry a query if the error matches one of these strings.\n\n\n\n\n\n\n[options.retry.max]\n\n\nInteger\n\n\nHow many times a failing query is automatically retried.\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.supportsSearchPath]\n\n\nBoolean\n\n\nIf false do not prepend the query with the search_path (Postgres only)\n\n\n\n\n\n\n[options.mapToModel=false]\n\n\nObject\n\n\nMap returned fields to model's fields if \noptions.model\n or \noptions.instance\n is present. Mapping will occur before building the model instance.\n\n\n\n\n\n\n[options.fieldMap]\n\n\nObject\n\n\nMap returned fields to arbitrary names for \nSELECT\n query type.\n\n\n\n\n\n\n\n\n\n\n\n\nset(variables, options)\n -\n \nPromise\n\n\nView code\n\n\nExecute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\nOnly works for MySQL.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvariables\n\n\nObject\n\n\nObject with multiple variables.\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nQuery options.\n\n\n\n\n\n\noptions.transaction\n\n\nTransaction\n\n\nThe transaction that the query should be executed under\n\n\n\n\n\n\n\n\n\n\n\n\nescape(value)\n -\n \nString\n\n\nView code\n\n\nEscape value.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncreateSchema(schema, options={})\n -\n \nPromise\n\n\nView code\n\n\nCreate a new database schema.\n\n\nNote,that this is a schema in the \npostgres sense of the word\n,\nnot a database table. In mysql and sqlite, this command will do nothing.\n\n\nSee:\n\n\n\n\nModel#schema\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\nString\n\n\nName of the schema\n\n\n\n\n\n\noptions={}\n\n\nObject\n\n\n\n\n\n\n\n\noptions.logging\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\nshowAllSchemas(options={})\n -\n \nPromise\n\n\nView code\n\n\nShow all defined schemas\n\n\nNote,that this is a schema in the \npostgres sense of the word\n,\nnot a database table. In mysql and sqlite, this will show all tables.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions={}\n\n\nObject\n\n\n\n\n\n\n\n\noptions.logging\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\ndropSchema(schema, options={})\n -\n \nPromise\n\n\nView code\n\n\nDrop a single schema\n\n\nNote,that this is a schema in the \npostgres sense of the word\n,\nnot a database table. In mysql and sqlite, this drop a table matching the schema name\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\nString\n\n\nName of the schema\n\n\n\n\n\n\noptions={}\n\n\nObject\n\n\n\n\n\n\n\n\noptions.logging\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\ndropAllSchemas(options={})\n -\n \nPromise\n\n\nView code\n\n\nDrop all schemas\n\n\nNote,that this is a schema in the \npostgres sense of the word\n,\nnot a database table. In mysql and sqlite, this is the equivalent of drop all tables.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions={}\n\n\nObject\n\n\n\n\n\n\n\n\noptions.logging\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\nsync([options={}])\n -\n \nPromise\n\n\nView code\n\n\nSync all defined models to the DB.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.force=false]\n\n\nBoolean\n\n\nIf force is true, each DAO will do DROP TABLE IF EXISTS ..., before it tries to create its own table\n\n\n\n\n\n\n[options.match]\n\n\nRegEx\n\n\nMatch a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code\n\n\n\n\n\n\n[options.logging=console.log]\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n[options.schema='public']\n\n\nString\n\n\nThe schema that the tables should be created in. This can be overriden for each table in sequelize.define\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.hooks=true]\n\n\nBoolean\n\n\nIf hooks is true then beforeSync, afterSync, beforBulkSync, afterBulkSync hooks will be called\n\n\n\n\n\n\n\n\n\n\n\n\ntruncate([options])\n -\n \nPromise\n\n\nView code\n\n\nTruncate all tables defined through the sequelize models. This is done\nby calling Model.truncate() on each model.\n\n\nSee:\n\n\n\n\nModel#truncate\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\nThe options passed to Model.destroy in addition to truncate\n\n\n\n\n\n\n[options.transaction]\n\n\nBoolean \n function\n\n\n\n\n\n\n\n\n[options.logging]\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\ndrop(options)\n -\n \nPromise\n\n\nView code\n\n\nDrop all tables defined through this sequelize instance. This is done by calling Model.drop on each model\n\n\nSee:\n\n\n\n\nModel#drop\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe options passed to each call to Model.drop\n\n\n\n\n\n\noptions.logging\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n\n\n\n\n\n\nauthenticate()\n -\n \nPromise\n\n\nView code\n\n\nTest the connection by trying to authenticate\n\nAliases:\n validate\n\n\n\n\n\n\nfn(fn, args)\n -\n \nSequelize.fn\n\n\nView code\n\n\nCreates a object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\nIf you want to refer to columns in your function, you should use \nsequelize.col\n, so that the columns are properly interpreted as columns and not a strings.\n\n\nConvert a user's username to upper case\n\n\ninstance.updateAttributes({\n  username: self.sequelize.fn('upper', self.sequelize.col('username'))\n})\n\n\n\n\nSee:\n\n\n\n\nModel#find\n\n\nModel#findAll\n\n\nModel#define\n\n\nSequelize#col\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfn\n\n\nString\n\n\nThe function you want to call\n\n\n\n\n\n\nargs\n\n\nany\n\n\nAll further arguments will be passed as arguments to the function\n\n\n\n\n\n\n\n\n\n\n\n\ncol(col)\n -\n \nSequelize.col\n\n\nView code\n\n\nCreates a object representing a column in the DB. This is often useful in conjunction with \nsequelize.fn\n, since raw string arguments to fn will be escaped.\n\n\nSee:\n\n\n\n\nSequelize#fn\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncol\n\n\nString\n\n\nThe name of the column\n\n\n\n\n\n\n\n\n\n\n\n\ncast(val, type)\n -\n \nSequelize.cast\n\n\nView code\n\n\nCreates a object representing a call to the cast function.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nval\n\n\nany\n\n\nThe value to cast\n\n\n\n\n\n\ntype\n\n\nString\n\n\nThe type to cast it to\n\n\n\n\n\n\n\n\n\n\n\n\nliteral(val)\n -\n \nSequelize.literal\n\n\nView code\n\n\nCreates a object representing a literal, i.e. something that will not be escaped.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nval\n\n\nany\n\n\n\n\n\n\n\n\n\n\nAliases:\n asIs\n\n\n\n\n\n\nand(args)\n -\n \nSequelize.and\n\n\nView code\n\n\nAn AND query\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nString \n Object\n\n\nEach argument will be joined by AND\n\n\n\n\n\n\n\n\n\n\n\n\nor(args)\n -\n \nSequelize.or\n\n\nView code\n\n\nAn OR query\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nString \n Object\n\n\nEach argument will be joined by OR\n\n\n\n\n\n\n\n\n\n\n\n\njson(conditions, [value])\n -\n \nSequelize.json\n\n\nView code\n\n\nCreates an object representing nested where conditions for postgres's json data-type.\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconditions\n\n\nString \n Object\n\n\nA hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres json syntax.\n\n\n\n\n\n\n[value]\n\n\nString \n Number \n Boolean\n\n\nAn optional value to compare against. Produces a string of the form \"\njson path\n = '\nvalue\n'\".\n\n\n\n\n\n\n\n\n\n\n\n\nwhere(attr, [comparator='='], logic)\n -\n \nSequelize.where\n\n\nView code\n\n\nA way of specifying attr = condition.\n\n\nThe attr can either be an object taken from \nModel.rawAttributes\n (for example \nModel.rawAttributes.id\n or \nModel.rawAttributes.name\n). The\nattribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (\nsequelize.fn\n, \nsequelize.col\n etc.)\n\n\nFor string attributes, use the regular \n{ where: { attr: something }}\n syntax. If you don't want your string to be escaped, use \nsequelize.literal\n.\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nattr\n\n\nObject\n\n\nThe attribute, which can be either an attribute object from \nModel.rawAttributes\n or a sequelize object, for example an instance of \nsequelize.fn\n. For simple string attributes, use the POJO syntax\n\n\n\n\n\n\n[comparator='=']\n\n\nstring\n\n\n\n\n\n\n\n\nlogic\n\n\nString \n Object\n\n\nThe condition. Can be both a simply type, or a further condition (\n$or\n, \n$and\n, \n.literal\n etc.)\n\n\n\n\n\n\n\n\nAliases:\n condition\n\n\n\n\n\n\ntransaction([options={}])\n -\n \nPromise\n\n\nView code\n\n\nStart a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction\n\n\nsequelize.transaction().then(function (t) {\n  return User.find(..., { transaction: t}).then(function (user) {\n    return user.updateAttributes(..., { transaction: t});\n  })\n  .then(t.commit.bind(t))\n  .catch(t.rollback.bind(t));\n})\n\n\n\n\nA syntax for automatically committing or rolling back based on the promise chain resolution is also supported:\n\n\nsequelize.transaction(function (t) { // Note that we use a callback rather than a promise.then()\n  return User.find(..., { transaction: t}).then(function (user) {\n    return user.updateAttributes(..., { transaction: t});\n  });\n}).then(function () {\n  // Committed\n}).catch(function (err) {\n  // Rolled back\n  console.error(err);\n});\n\n\n\n\nIf you have \nCLS\n enabled, the transaction will automatically be passed to any query that runs within the callback.\nTo enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:\n\n\nvar cls = require('continuation-local-storage'),\n    ns = cls.createNamespace('....');\nvar Sequelize = require('sequelize');\nSequelize.cls = ns;\n\n\n\n\nNote, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\n\n\nSee:\n\n\n\n\nTransaction\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.autocommit=true]\n\n\nBoolean\n\n\n\n\n\n\n\n\n[options.type='DEFERRED']\n\n\nString\n\n\nSee \nSequelize.Transaction.TYPES\n for possible options. Sqlite only.\n\n\n\n\n\n\n[options.isolationLevel='REPEATABLE_READ']\n\n\nString\n\n\nSee \nSequelize.Transaction.ISOLATION_LEVELS\n for possible options\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Sequelize"
        }, 
        {
            "location": "/api/sequelize/#class-sequelize", 
            "text": "View code  This is the main class, the entry point to sequelize. To use it, you just need to import sequelize:  var Sequelize = require('sequelize');  In addition to sequelize, the connection library for the dialect you want to use should also be installed in your project. You don't need to import it however, as sequelize will take care of that.", 
            "title": "Class Sequelize"
        }, 
        {
            "location": "/api/sequelize/#new-sequelizedatabase-usernamenull-passwordnull-options", 
            "text": "View code  Instantiate sequelize with name of database, username and password", 
            "title": "new Sequelize(database, [username=null], [password=null], [options={}])"
        }, 
        {
            "location": "/api/sequelize/#example-usage", 
            "text": "// without password and options\nvar sequelize = new Sequelize('database', 'username')\n\n// without options\nvar sequelize = new Sequelize('database', 'username', 'password')\n\n// without password / with blank password\nvar sequelize = new Sequelize('database', 'username', null, {})\n\n// with password and options\nvar sequelize = new Sequelize('my_database', 'john', 'doe', {})\n\n// with uri (see below)\nvar sequelize = new Sequelize('mysql://localhost:3306/database', {})  Params:     Name  Type  Description      database  String  The name of the database    [username=null]  String  The username which is used to authenticate against the database.    [password=null]  String  The password which is used to authenticate against the database.    [options={}]  Object  An object with options.    [options.dialect='mysql']  String  The dialect of the database you are connecting to. One of mysql, postgres, sqlite and mssql.    [options.dialectModulePath=null]  String  If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'pg.js' here    [options.dialectOptions]  Object  An object of additional options, which are passed directly to the connection library    [options.storage]  String  Only used by sqlite. Defaults to ':memory:'    [options.host='localhost']  String  The host of the relational database.    [options.port=]  Integer  The port of the relational database.    [options.protocol='tcp']  String  The protocol of the relational database.    [options.define={}]  Object  Default options for model definitions. See sequelize.define for options    [options.query={}]  Object  Default options for sequelize.query    [options.set={}]  Object  Default options for sequelize.set    [options.sync={}]  Object  Default options for sequelize.sync    [options.timezone='+00:00']  String  The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.    [options.logging=console.log]  Function  A function that gets executed every time Sequelize would log something.    [options.omitNull=false]  Boolean  A flag that defines if null values should be passed to SQL queries or not.    [options.native=false]  Boolean  A flag that defines if native library shall be used or not. Currently only has an effect for postgres    [options.replication=false]  Boolean  Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties:  host ,  port ,  username ,  password ,  database    [options.pool={}]  Object  Should sequelize use a connection pool. Default is true    [options.pool.max]  Integer     [options.pool.min]  Integer     [options.pool.idle]  Integer  The maximum time, in milliseconds, that a connection can be idle before being released    [options.pool.validateConnection]  Function  A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected    [options.quoteIdentifiers=true]  Boolean  Set to  false  to make table names and attributes case-insensitive on Postgres and skip double quoting of them.    [options.transactionType='DEFERRED']  String  Set the default transaction type. See  Sequelize.Transaction.TYPES  for possible options. Sqlite only.    [options.isolationLevel='REPEATABLE_READ']  String  Set the default transaction isolation level. See  Sequelize.Transaction.ISOLATION_LEVELS  for possible options.    [options.retry]  Object  Set of flags that control when a query is automatically retried.    [options.retry.match]  Array  Only retry a query if the error matches one of these strings.    [options.retry.max]  Integer  How many times a failing query is automatically retried. Set to 0 to disable retrying on SQL_BUSY error.    [options.typeValidation=false]  Boolean  Run built in type validators on insert and update, e.g. validate that arguments passed to integer fields are integer-like.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "Example usage"
        }, 
        {
            "location": "/api/sequelize/#new-sequelizeuri-options", 
            "text": "View code  Instantiate sequelize with an URI  Params:     Name  Type  Description      uri  String  A full database URI    [options={}]  object  See above for possible options", 
            "title": "new Sequelize(uri, [options={}])"
        }, 
        {
            "location": "/api/sequelize/#models", 
            "text": "View code  Models are stored here under the name given to  sequelize.define", 
            "title": "models"
        }, 
        {
            "location": "/api/sequelize/#version", 
            "text": "View code  Sequelize version number.", 
            "title": "version"
        }, 
        {
            "location": "/api/sequelize/#sequelize", 
            "text": "View code  A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.  See:   Sequelize", 
            "title": "Sequelize"
        }, 
        {
            "location": "/api/sequelize/#utils", 
            "text": "View code  A reference to sequelize utilities. Most users will not need to use these utils directly. However, you might want to use  Sequelize.Utils._ , which is a reference to the lodash library, if you don't already have it imported in your project.", 
            "title": "Utils"
        }, 
        {
            "location": "/api/sequelize/#promise", 
            "text": "View code  A handy reference to the bluebird Promise class", 
            "title": "Promise"
        }, 
        {
            "location": "/api/sequelize/#querytypes", 
            "text": "View code  Available query types for use with  sequelize.query", 
            "title": "QueryTypes"
        }, 
        {
            "location": "/api/sequelize/#validator", 
            "text": "View code  Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.  See:", 
            "title": "Validator"
        }, 
        {
            "location": "/api/sequelize/#transaction", 
            "text": "View code  A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction  See:   Transaction  Sequelize#transaction", 
            "title": "Transaction"
        }, 
        {
            "location": "/api/sequelize/#deferrable", 
            "text": "View code  A reference to the deferrable collection. Use this to access the different deferrable options.  See:   Deferrable  Sequelize#transaction", 
            "title": "Deferrable"
        }, 
        {
            "location": "/api/sequelize/#instance", 
            "text": "View code  A reference to the sequelize instance class.  See:   Instance", 
            "title": "Instance"
        }, 
        {
            "location": "/api/sequelize/#association", 
            "text": "View code  A reference to the sequelize association class.  See:   Association", 
            "title": "Association"
        }, 
        {
            "location": "/api/sequelize/#error", 
            "text": "View code  A general error class  See:   Errors#BaseError", 
            "title": "Error"
        }, 
        {
            "location": "/api/sequelize/#validationerror", 
            "text": "View code  Emitted when a validation fails  See:   Errors#ValidationError", 
            "title": "ValidationError"
        }, 
        {
            "location": "/api/sequelize/#validationerroritem", 
            "text": "View code  Describes a validation error on an instance path  See:   Errors#ValidationErrorItem", 
            "title": "ValidationErrorItem"
        }, 
        {
            "location": "/api/sequelize/#databaseerror", 
            "text": "View code  A base class for all database related errors.  See:   Errors#DatabaseError", 
            "title": "DatabaseError"
        }, 
        {
            "location": "/api/sequelize/#timeouterror", 
            "text": "View code  Thrown when a database query times out because of a deadlock  See:   Errors#TimeoutError", 
            "title": "TimeoutError"
        }, 
        {
            "location": "/api/sequelize/#uniqueconstrainterror", 
            "text": "View code  Thrown when a unique constraint is violated in the database  See:   Errors#UniqueConstraintError", 
            "title": "UniqueConstraintError"
        }, 
        {
            "location": "/api/sequelize/#exclusionconstrainterror", 
            "text": "View code  Thrown when an exclusion constraint is violated in the database  See:   Errors#ExclusionConstraintError", 
            "title": "ExclusionConstraintError"
        }, 
        {
            "location": "/api/sequelize/#foreignkeyconstrainterror", 
            "text": "View code  Thrown when a foreign key constraint is violated in the database  See:   Errors#ForeignKeyConstraintError", 
            "title": "ForeignKeyConstraintError"
        }, 
        {
            "location": "/api/sequelize/#connectionerror", 
            "text": "View code  A base class for all connection related errors.  See:   Errors#ConnectionError", 
            "title": "ConnectionError"
        }, 
        {
            "location": "/api/sequelize/#connectionrefusederror", 
            "text": "View code  Thrown when a connection to a database is refused  See:   Errors#ConnectionRefusedError", 
            "title": "ConnectionRefusedError"
        }, 
        {
            "location": "/api/sequelize/#accessdeniederror", 
            "text": "View code  Thrown when a connection to a database is refused due to insufficient access  See:   Errors#AccessDeniedError", 
            "title": "AccessDeniedError"
        }, 
        {
            "location": "/api/sequelize/#hostnotfounderror", 
            "text": "View code  Thrown when a connection to a database has a hostname that was not found  See:   Errors#HostNotFoundError", 
            "title": "HostNotFoundError"
        }, 
        {
            "location": "/api/sequelize/#hostnotreachableerror", 
            "text": "View code  Thrown when a connection to a database has a hostname that was not reachable  See:   Errors#HostNotReachableError", 
            "title": "HostNotReachableError"
        }, 
        {
            "location": "/api/sequelize/#invalidconnectionerror", 
            "text": "View code  Thrown when a connection to a database has invalid values for any of the connection parameters  See:   Errors#InvalidConnectionError", 
            "title": "InvalidConnectionError"
        }, 
        {
            "location": "/api/sequelize/#connectiontimedouterror", 
            "text": "View code  Thrown when a connection to a database times out  See:   Errors#ConnectionTimedOutError", 
            "title": "ConnectionTimedOutError"
        }, 
        {
            "location": "/api/sequelize/#instanceerror", 
            "text": "View code  Thrown when a some problem occurred with Instance methods (see message for details)  See:   Errors#InstanceError", 
            "title": "InstanceError"
        }, 
        {
            "location": "/api/sequelize/#getdialect-string", 
            "text": "View code  Returns the specified dialect. Returns:  The specified dialect.", 
            "title": "getDialect() -&gt; String"
        }, 
        {
            "location": "/api/sequelize/#getqueryinterface-queryinterface", 
            "text": "View code  Returns an instance of QueryInterface.  See:   QueryInterface   Returns:  An instance (singleton) of QueryInterface.", 
            "title": "getQueryInterface() -&gt; QueryInterface"
        }, 
        {
            "location": "/api/sequelize/#definemodelname-attributes-options-model", 
            "text": "View code  Define a new model, representing a table in the DB.  The table columns are define by the hash that is given as the second argument. Each attribute of the hash represents a column. A short table definition might look like this:  sequelize.define('modelName', {\n    columnA: {\n        type: Sequelize.BOOLEAN,\n        validate: {\n          is: [ [a-z] ,'i'],        // will only allow letters\n          max: 23,                  // only allow values  = 23\n          isIn: {\n            args: [['en', 'zh']],\n            msg:  Must be English or Chinese \n          }\n        },\n        field: 'column_a'\n        // Other attributes here\n    },\n    columnB: Sequelize.STRING,\n    columnC: 'MY VERY OWN COLUMN TYPE'\n})\n\nsequelize.models.modelName // The model will now be available in models under the name given to define  As shown above, column definitions can be either strings, a reference to one of the datatypes that are predefined on the Sequelize constructor, or an object that allows you to specify both the type of the column, and other attributes such as default values, foreign key constraints and custom setters and getters.  For a list of possible data types, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types  For more about getters and setters, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters  For more about instance and class methods, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models  For more about validation, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations  See:   DataTypes  Hooks   Params:     Name  Type  Description      modelName  String  The name of the model. The model will be stored in  sequelize.models  under this name    attributes  Object  An object, where each attribute is a column of the table. Each column can be either a DataType, a string or a type-description object, with the properties described below:    attributes.column  String   DataType   Object  The description of a database column    attributes.column.type  String   DataType  A string or a data type    [attributes.column.allowNull=true]  Boolean  If false, the column will have a NOT NULL constraint, and a not null validation will be run before an instance is saved.    [attributes.column.defaultValue=null]  Any  A literal default value, a JavaScript function, or an SQL function (see  sequelize.fn )    [attributes.column.unique=false]  String   Boolean  If true, the column will get a unique constraint. If a string is provided, the column will be part of a composite unique index. If multiple columns have the same string, they will be part of the same unique index    [attributes.column.primaryKey=false]  Boolean     [attributes.column.field=null]  String  If set, sequelize will map the attribute name to a different name in the database    [attributes.column.autoIncrement=false]  Boolean     [attributes.column.comment=null]  String     [attributes.column.references=null]  String   Model  An object with reference configurations    [attributes.column.references.model]  String   Model  If this column references another table, provide it here as a Model, or a string    [attributes.column.references.key='id']  String  The column of the foreign table that this column references    [attributes.column.onUpdate]  String  What should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION    [attributes.column.onDelete]  String  What should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION    [attributes.column.get]  Function  Provide a custom getter for this column. Use  this.getDataValue(String)  to manipulate the underlying values.    [attributes.column.set]  Function  Provide a custom setter for this column. Use  this.setDataValue(String, Value)  to manipulate the underlying values.    [attributes.validate]  Object  An object of validations to execute for this column every time the model is saved. Can be either the name of a validation provided by validator.js, a validation function provided by extending validator.js (see the  DAOValidator  property for more details), or a custom validation function. Custom validation functions are called with the value of the field, and can possibly take a second callback argument, to signal that they are asynchronous. If the validator is sync, it should throw in the case of a failed validation, it it is async, the callback should be called with the error text.    [options]  Object  These options are merged with the default define options provided to the Sequelize constructor    [options.defaultScope={}]  Object  Define the default search scope to use for this model. Scopes have the same form as the options passed to find / findAll    [options.scopes]  Object  More scopes, defined in the same way as defaultScope above. See  Model.scope  for more information about how scopes are defined, and what you can do with them    [options.omitNull]  Boolean  Don't persist null values. This means that all columns with null values will not be saved    [options.timestamps=true]  Boolean  Adds createdAt and updatedAt timestamps to the model.    [options.paranoid=false]  Boolean  Calling  destroy  will not delete the model, but instead set a  deletedAt  timestamp if this is true. Needs  timestamps=true  to work    [options.underscored=false]  Boolean  Converts all camelCased columns to underscored if true    [options.underscoredAll=false]  Boolean  Converts camelCased model names to underscored table names if true    [options.freezeTableName=false]  Boolean  If freezeTableName is true, sequelize will not try to alter the DAO name to get the table name. Otherwise, the model name will be pluralized    [options.name]  Object  An object with two attributes,  singular  and  plural , which are used when this model is associated to others.    [options.name.singular=inflection.singularize(modelName)]  String     [options.name.plural=inflection.pluralize(modelName)]  String     [options.indexes]  Array. Object     [options.indexes[].name]  String  The name of the index. Defaults to model name + _ + fields concatenated    [options.indexes[].type]  String  Index type. Only used by mysql. One of  UNIQUE ,  FULLTEXT  and  SPATIAL    [options.indexes[].method]  String  The method to create the index by ( USING  statement in SQL). BTREE and HASH are supported by mysql and postgres, and postgres additionally supports GIST and GIN.    [options.indexes[].unique=false]  Boolean  Should the index by unique? Can also be triggered by setting type to  UNIQUE    [options.indexes[].concurrently=false]  Boolean  PostgreSQL will build the index without taking any write locks. Postgres only    [options.indexes[].fields]  Array. String   Object  An array of the fields to index. Each field can either be a string containing the name of the field, a sequelize object (e.g  sequelize.fn ), or an object with the following attributes:  attribute  (field name),  length  (create a prefix index of length chars),  order  (the direction the column should be sorted in),  collate  (the collation (sort order) for the column)    [options.createdAt]  String   Boolean  Override the name of the createdAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.    [options.updatedAt]  String   Boolean  Override the name of the updatedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.    [options.deletedAt]  String   Boolean  Override the name of the deletedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.    [options.tableName]  String  Defaults to pluralized model name, unless freezeTableName is true, in which case it uses model name verbatim    [options.getterMethods]  Object  Provide getter functions that work like those defined per column. If you provide a getter method with the same name as a column, it will be used to access the value of that column. If you provide a name that does not match a column, this function will act as a virtual getter, that can fetch multiple other values    [options.setterMethods]  Object  Provide setter functions that work like those defined per column. If you provide a setter method with the same name as a column, it will be used to update the value of that column. If you provide a name that does not match a column, this function will act as a virtual setter, that can act on and set other values, but will not be persisted    [options.instanceMethods]  Object  Provide functions that are added to each instance (DAO). If you override methods provided by sequelize, you can access the original method using  this.constructor.super_.prototype , e.g.  this.constructor.super_.prototype.toJSON.apply(this, arguments)    [options.classMethods]  Object  Provide functions that are added to the model (Model). If you override methods provided by sequelize, you can access the original method using  this.constructor.prototype , e.g.  this.constructor.prototype.find.apply(this, arguments)    [options.schema='public']  String     [options.engine]  String     [options.charset]  String     [options.comment]  String     [options.collate]  String     [options.initialAutoIncrement]  String  Set the initial AUTO_INCREMENT value for the table in MySQL.    [options.hooks]  Object  An object of hook function that are called before and after certain lifecycle events. The possible hooks are: beforeValidate, afterValidate, beforeBulkCreate, beforeBulkDestroy, beforeBulkUpdate, beforeCreate, beforeDestroy, beforeUpdate, afterCreate, afterDestroy, afterUpdate, afterBulkCreate, afterBulkDestory and afterBulkUpdate. See Hooks for more information about hook functions and their signatures. Each property can either be a function, or an array of functions.    [options.validate]  Object  An object of model wide validations. Validations have access to all model values via  this . If the validator function takes an argument, it is assumed to be async, and is called with a callback that accepts an optional error.", 
            "title": "define(modelName, attributes, [options]) -&gt; Model"
        }, 
        {
            "location": "/api/sequelize/#modelmodelname-model", 
            "text": "View code  Fetch a Model which is already defined  Params:     Name  Type  Description      modelName  String  The name of a model defined with Sequelize.define", 
            "title": "model(modelName) -&gt; Model"
        }, 
        {
            "location": "/api/sequelize/#isdefinedmodelname-boolean", 
            "text": "View code  Checks whether a model with the given name is defined  Params:     Name  Type  Description      modelName  String  The name of a model defined with Sequelize.define", 
            "title": "isDefined(modelName) -&gt; Boolean"
        }, 
        {
            "location": "/api/sequelize/#importpath-model", 
            "text": "View code  Imports a model defined in another file  Imported models are cached, so multiple calls to import with the same path will not load the file multiple times  See https://github.com/sequelize/express-example for a short example of how to define your models in separate files so that they can be imported by sequelize.import  Params:     Name  Type  Description      path  String  The path to the file that holds the model you want to import. If the part is relative, it will be resolved relatively to the calling file", 
            "title": "import(path) -&gt; Model"
        }, 
        {
            "location": "/api/sequelize/#querysql-options-promise", 
            "text": "View code  Execute a query on the DB, with the possibility to bypass all the sequelize goodness.  By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc. Use  .spread  to access the results.  If you are running a type of query where you don't need the metadata, for example a  SELECT  query, you can pass in a query type to make sequelize format the results:  sequelize.query('SELECT...').spread(function (results, metadata) {\n  // Raw query - use spread\n});\n\nsequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(function (results) {\n  // SELECT query - use then\n})  See:   Model#build   Params:     Name  Type  Description      sql  String     [options={}]  Object  Query options.    [options.raw]  Boolean  If true, sequelize will not try to format the results of the query, or build an instance of a model from the result    [options.transaction=null]  Transaction  The transaction that the query should be executed under    [options.type='RAW']  String  The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but  Sequelize.QueryTypes  is provided as convenience shortcuts.    [options.nest=false]  Boolean  If true, transforms objects with  .  separated property names into nested objects using  dottie.js . For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When  nest  is true, the query type is assumed to be  'SELECT' , unless otherwise specified    [options.plain=false]  Boolean  Sets the query type to  SELECT  and return a single row    [options.replacements]  Object   Array  Either an object of named parameter replacements in the format  :param  or an array of unnamed replacements to replace  ?  in your SQL.    [options.bind]  Object   Array  Either an object of named bind parameter in the format  $param  or an array of unnamed bind parameter to replace  $1, $2, ...  in your SQL.    [options.useMaster=false]  Boolean  Force the query to use the write pool, regardless of the query type.    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.instance]  Instance  A sequelize instance used to build the return instance    [options.model]  Model  A sequelize model used to build the returned model instances (used to be called callee)    [options.retry]  Object  Set of flags that control when a query is automatically retried.    [options.retry.match]  Array  Only retry a query if the error matches one of these strings.    [options.retry.max]  Integer  How many times a failing query is automatically retried.    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.supportsSearchPath]  Boolean  If false do not prepend the query with the search_path (Postgres only)    [options.mapToModel=false]  Object  Map returned fields to model's fields if  options.model  or  options.instance  is present. Mapping will occur before building the model instance.    [options.fieldMap]  Object  Map returned fields to arbitrary names for  SELECT  query type.", 
            "title": "query(sql, [options={}]) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#setvariables-options-promise", 
            "text": "View code  Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\nOnly works for MySQL.  Params:     Name  Type  Description      variables  Object  Object with multiple variables.    options  Object  Query options.    options.transaction  Transaction  The transaction that the query should be executed under", 
            "title": "set(variables, options) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#escapevalue-string", 
            "text": "View code  Escape value.  Params:     Name  Type  Description      value  String", 
            "title": "escape(value) -&gt; String"
        }, 
        {
            "location": "/api/sequelize/#createschemaschema-options-promise", 
            "text": "View code  Create a new database schema.  Note,that this is a schema in the  postgres sense of the word ,\nnot a database table. In mysql and sqlite, this command will do nothing.  See:   Model#schema   Params:     Name  Type  Description      schema  String  Name of the schema    options={}  Object     options.logging  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "createSchema(schema, options={}) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#showallschemasoptions-promise", 
            "text": "View code  Show all defined schemas  Note,that this is a schema in the  postgres sense of the word ,\nnot a database table. In mysql and sqlite, this will show all tables.  Params:     Name  Type  Description      options={}  Object     options.logging  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "showAllSchemas(options={}) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#dropschemaschema-options-promise", 
            "text": "View code  Drop a single schema  Note,that this is a schema in the  postgres sense of the word ,\nnot a database table. In mysql and sqlite, this drop a table matching the schema name  Params:     Name  Type  Description      schema  String  Name of the schema    options={}  Object     options.logging  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "dropSchema(schema, options={}) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#dropallschemasoptions-promise", 
            "text": "View code  Drop all schemas  Note,that this is a schema in the  postgres sense of the word ,\nnot a database table. In mysql and sqlite, this is the equivalent of drop all tables.  Params:     Name  Type  Description      options={}  Object     options.logging  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "dropAllSchemas(options={}) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#syncoptions-promise", 
            "text": "View code  Sync all defined models to the DB.  Params:     Name  Type  Description      [options={}]  Object     [options.force=false]  Boolean  If force is true, each DAO will do DROP TABLE IF EXISTS ..., before it tries to create its own table    [options.match]  RegEx  Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code    [options.logging=console.log]  Boolean   function  A function that logs sql queries, or false for no logging    [options.schema='public']  String  The schema that the tables should be created in. This can be overriden for each table in sequelize.define    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.hooks=true]  Boolean  If hooks is true then beforeSync, afterSync, beforBulkSync, afterBulkSync hooks will be called", 
            "title": "sync([options={}]) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#truncateoptions-promise", 
            "text": "View code  Truncate all tables defined through the sequelize models. This is done\nby calling Model.truncate() on each model.  See:   Model#truncate   Params:     Name  Type  Description      [options]  object  The options passed to Model.destroy in addition to truncate    [options.transaction]  Boolean   function     [options.logging]  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "truncate([options]) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#dropoptions-promise", 
            "text": "View code  Drop all tables defined through this sequelize instance. This is done by calling Model.drop on each model  See:   Model#drop   Params:     Name  Type  Description      options  object  The options passed to each call to Model.drop    options.logging  Boolean   function  A function that logs sql queries, or false for no logging", 
            "title": "drop(options) -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#authenticate-promise", 
            "text": "View code  Test the connection by trying to authenticate Aliases:  validate", 
            "title": "authenticate() -&gt; Promise"
        }, 
        {
            "location": "/api/sequelize/#fnfn-args-sequelizefn", 
            "text": "View code  Creates a object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\nIf you want to refer to columns in your function, you should use  sequelize.col , so that the columns are properly interpreted as columns and not a strings.  Convert a user's username to upper case  instance.updateAttributes({\n  username: self.sequelize.fn('upper', self.sequelize.col('username'))\n})  See:   Model#find  Model#findAll  Model#define  Sequelize#col   Params:     Name  Type  Description      fn  String  The function you want to call    args  any  All further arguments will be passed as arguments to the function", 
            "title": "fn(fn, args) -&gt; Sequelize.fn"
        }, 
        {
            "location": "/api/sequelize/#colcol-sequelizecol", 
            "text": "View code  Creates a object representing a column in the DB. This is often useful in conjunction with  sequelize.fn , since raw string arguments to fn will be escaped.  See:   Sequelize#fn   Params:     Name  Type  Description      col  String  The name of the column", 
            "title": "col(col) -&gt; Sequelize.col"
        }, 
        {
            "location": "/api/sequelize/#castval-type-sequelizecast", 
            "text": "View code  Creates a object representing a call to the cast function.  Params:     Name  Type  Description      val  any  The value to cast    type  String  The type to cast it to", 
            "title": "cast(val, type) -&gt; Sequelize.cast"
        }, 
        {
            "location": "/api/sequelize/#literalval-sequelizeliteral", 
            "text": "View code  Creates a object representing a literal, i.e. something that will not be escaped.  Params:     Name  Type  Description      val  any      Aliases:  asIs", 
            "title": "literal(val) -&gt; Sequelize.literal"
        }, 
        {
            "location": "/api/sequelize/#andargs-sequelizeand", 
            "text": "View code  An AND query  See:   Model#find   Params:     Name  Type  Description      args  String   Object  Each argument will be joined by AND", 
            "title": "and(args) -&gt; Sequelize.and"
        }, 
        {
            "location": "/api/sequelize/#orargs-sequelizeor", 
            "text": "View code  An OR query  See:   Model#find   Params:     Name  Type  Description      args  String   Object  Each argument will be joined by OR", 
            "title": "or(args) -&gt; Sequelize.or"
        }, 
        {
            "location": "/api/sequelize/#jsonconditions-value-sequelizejson", 
            "text": "View code  Creates an object representing nested where conditions for postgres's json data-type.  See:   Model#find   Params:     Name  Type  Description      conditions  String   Object  A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres json syntax.    [value]  String   Number   Boolean  An optional value to compare against. Produces a string of the form \" json path  = ' value '\".", 
            "title": "json(conditions, [value]) -&gt; Sequelize.json"
        }, 
        {
            "location": "/api/sequelize/#whereattr-comparator-logic-sequelizewhere", 
            "text": "View code  A way of specifying attr = condition.  The attr can either be an object taken from  Model.rawAttributes  (for example  Model.rawAttributes.id  or  Model.rawAttributes.name ). The\nattribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions ( sequelize.fn ,  sequelize.col  etc.)  For string attributes, use the regular  { where: { attr: something }}  syntax. If you don't want your string to be escaped, use  sequelize.literal .  See:   Model#find   Params:     Name  Type  Description      attr  Object  The attribute, which can be either an attribute object from  Model.rawAttributes  or a sequelize object, for example an instance of  sequelize.fn . For simple string attributes, use the POJO syntax    [comparator='=']  string     logic  String   Object  The condition. Can be both a simply type, or a further condition ( $or ,  $and ,  .literal  etc.)     Aliases:  condition", 
            "title": "where(attr, [comparator='='], logic) -&gt; Sequelize.where"
        }, 
        {
            "location": "/api/sequelize/#transactionoptions-promise", 
            "text": "View code  Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction  sequelize.transaction().then(function (t) {\n  return User.find(..., { transaction: t}).then(function (user) {\n    return user.updateAttributes(..., { transaction: t});\n  })\n  .then(t.commit.bind(t))\n  .catch(t.rollback.bind(t));\n})  A syntax for automatically committing or rolling back based on the promise chain resolution is also supported:  sequelize.transaction(function (t) { // Note that we use a callback rather than a promise.then()\n  return User.find(..., { transaction: t}).then(function (user) {\n    return user.updateAttributes(..., { transaction: t});\n  });\n}).then(function () {\n  // Committed\n}).catch(function (err) {\n  // Rolled back\n  console.error(err);\n});  If you have  CLS  enabled, the transaction will automatically be passed to any query that runs within the callback.\nTo enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:  var cls = require('continuation-local-storage'),\n    ns = cls.createNamespace('....');\nvar Sequelize = require('sequelize');\nSequelize.cls = ns;  Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace  See:   Transaction   Params:     Name  Type  Description      [options={}]  Object     [options.autocommit=true]  Boolean     [options.type='DEFERRED']  String  See  Sequelize.Transaction.TYPES  for possible options. Sqlite only.    [options.isolationLevel='REPEATABLE_READ']  String  See  Sequelize.Transaction.ISOLATION_LEVELS  for possible options    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "transaction([options={}]) -&gt; Promise"
        }, 
        {
            "location": "/api/model/", 
            "text": "Class Model\n\n\nView code\n\n\nA Model represents a table in the database. Sometimes you might also see it referred to as model, or simply as factory.\nThis class should \nnot\n be instantiated directly, it is created using \nsequelize.define\n, and already created models can be loaded using \nsequelize.import\n\n\nMixes:\n\n\n\n\nHooks\n\n\nAssociations\n\n\n\n\n\n\n\n\nremoveAttribute([attribute])\n\n\nView code\n\n\nRemove attribute from model definition\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[attribute]\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsync()\n -\n \nPromise.\nthis\n\n\nView code\n\n\nSync this Model to the DB, that is create the table. Upon success, the callback will be called with the model instance (this)\n\n\nSee:\n\n\n\n\nSequelize#sync\n\n\n\n\n\n\n\n\ndrop([options])\n -\n \nPromise\n\n\nView code\n\n\nDrop the table represented by this Model\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.cascade=false]\n\n\nBoolean\n\n\nAlso drop all objects depending on this table, such as views. Only works in postgres\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\nschema(schema, [options])\n -\n \nthis\n\n\nView code\n\n\nApply a schema to this model. For postgres, this will actually place the schema in front of the table name - \n\"schema\".\"tableName\"\n,\nwhile the schema will be prepended to the table name for mysql and sqlite - \n'schema.tablename'\n.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\nString\n\n\nThe name of the schema\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.schemaDelimiter='.']\n\n\nString\n\n\nThe character(s) that separates the schema name from the table name\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\ngetTableName([options])\n -\n \nString|Object\n\n\nView code\n\n\nGet the tablename of the model, taking schema into account. The method will return The name as a string if the model has no schema,\nor an object with \ntableName\n, \nschema\n and \ndelimiter\n properties.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nThe hash of options from any query. You can use one model to access tables with matching schemas by overriding \ngetTableName\n and using custom key/values to alter the name of the table. (eg. subscribers_1, subscribers_2)\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\nunscoped()\n -\n \nModel\n\n\nView code\n\n\n\n\n\n\naddScope(name, scope, [options])\n\n\nView code\n\n\nAdd a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.\n\n\nBy default this will throw an error if a scope with that name already exists. Pass \noverride: true\n in the options object to silence this error.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the scope. Use \ndefaultScope\n to override the default scope\n\n\n\n\n\n\nscope\n\n\nObject \n Function\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.override=false]\n\n\nBoolean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscope(options*)\n -\n \nModel\n\n\nView code\n\n\nApply a scope created in \ndefine\n to the model. First let's look at how to create scopes:\n\n\nvar Model = sequelize.define('model', attributes, {\n  defaultScope: {\n    where: {\n      username: 'dan'\n    },\n    limit: 12\n  },\n  scopes: {\n    isALie: {\n      where: {\n        stuff: 'cake'\n      }\n    },\n    complexFunction: function(email, accessLevel) {\n      return {\n        where: {\n          email: {\n            $like: email\n          },\n          accesss_level {\n            $gte: accessLevel\n          }\n        }\n      }\n    }\n  }\n})\n\n\n\n\nNow, since you defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:\n\n\nModel.findAll() // WHERE username = 'dan'\nModel.findAll({ where: { age: { gt: 12 } } }) // WHERE age \n 12 AND username = 'dan'\n\n\n\n\nTo invoke scope functions you can do:\n\n\nModel.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()\n// WHERE email like 'dan@sequelize.com%' AND access_level \n= 42\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions*\n\n\nArray \n Object \n String\n\n\nThe scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function, pass an object, with a \nmethod\n property. The value can either be a string, if the method does not take any arguments, or an array, where the first element is the name of the method, and consecutive elements are arguments to that method. Pass null to remove all scopes, including the default.\n\n\n\n\n\n\n\n\nReturns:\n A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope.\n\n\n\n\n\n\nfindAll([options])\n -\n \nPromise.\nArray.\nInstance\n\n\nView code\n\n\nSearch for multiple instances.\n\n\nSimple search using AND and =\n\n\nModel.findAll({\n  where: {\n    attr1: 42,\n    attr2: 'cake'\n  }\n})\n\n\n\n\nWHERE attr1 = 42 AND attr2 = 'cake'\n\n\n\n\nUsing greater than, less than etc.\n\n\n\nModel.findAll({\n  where: {\n    attr1: {\n      gt: 50\n    },\n    attr2: {\n      lte: 45\n    },\n    attr3: {\n      in: [1,2,3]\n    },\n    attr4: {\n      ne: 5\n    }\n  }\n})\n\n\n\n\nWHERE attr1 \n 50 AND attr2 \n= 45 AND attr3 IN (1,2,3) AND attr4 != 5\n\n\n\n\nPossible options are: \n$ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike, $notILike, '..'/$between, '!..'/$notBetween, '\n'/$overlap, '@\n'/$contains, '\n@'/$contained\n\n\nQueries using OR\n\n\nModel.findAll({\n  where: {\n    name: 'a project',\n    $or: [\n      {id: [1, 2, 3]},\n      {\n        $and: [\n          {id: {gt: 10}},\n          {id: {lt: 100}}\n        ]\n      }\n    ]\n  }\n});\n\n\n\n\nWHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` \n 10 AND `Model`.`id` \n 100));\n\n\n\n\nThe success listener is called with an array of instances if the query succeeds.\n\n\nSee:\n\n\n\n\nSequelize#query\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nA hash of options to describe the scope of the search\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nA hash of attributes to describe your search. See above for examples.\n\n\n\n\n\n\n[options.attributes]\n\n\nArray.\nString\n \n Object\n\n\nA list of the attributes that you want to select, or an object with \ninclude\n and \nexclude\n keys. To rename an attribute, you can pass an array, with two elements - the first is the name of the attribute in the DB (or some kind of expression such as \nSequelize.literal\n, \nSequelize.fn\n and so on), and the second is the name you want the attribute to have in the returned instance\n\n\n\n\n\n\n[options.attributes.include]\n\n\nArray.\nString\n\n\nSelect all the attributes of the model, plus some additional ones. Useful for aggregations, e.g. \n{ attributes: { include: [[sequelize.fn('COUNT', sequelize.col('id')), 'total']] }\n\n\n\n\n\n\n[options.attributes.exclude]\n\n\nArray.\nString\n\n\nSelect all the attributes of the model, except some few. Useful for security purposes e.g. \n{ attributes: { exclude: ['password'] } }\n\n\n\n\n\n\n[options.paranoid=true]\n\n\nBoolean\n\n\nIf true, only non-deleted records will be returned. If false, both deleted and non-deleted records will be returned. Only applies if \noptions.paranoid\n is true for the model.\n\n\n\n\n\n\n[options.include]\n\n\nArray.\nObject \n Model \n String\n\n\nA list of associations to eagerly load using a left join. Supported is either \n{ include: [ Model1, Model2, ...]}\n or \n{ include: [{ model: Model1, as: 'Alias' }, ...]}\n or \n{ include: ['Alias', ...]}\n. If your association are set up with an \nas\n (eg. \nX.hasMany(Y, { as: 'Z }\n, you need to specify Z in the as attribute when eager loading Y).\n\n\n\n\n\n\n[options.include[].model]\n\n\nModel\n\n\nThe model you want to eagerly load\n\n\n\n\n\n\n[options.include[].as]\n\n\nString\n\n\nThe alias of the relation, in case the model you want to eagerly load is aliased. For \nhasOne\n / \nbelongsTo\n, this should be the singular name, and for \nhasMany\n, it should be the plural\n\n\n\n\n\n\n[options.include[].association]\n\n\nAssociation\n\n\nThe association you want to eagerly load. (This can be used instead of providing a model/as pair)\n\n\n\n\n\n\n[options.include[].where]\n\n\nObject\n\n\nWhere clauses to apply to the child models. Note that this converts the eager load to an inner join, unless you explicitly set \nrequired: false\n\n\n\n\n\n\n[options.include[].or=false]\n\n\nBoolean\n\n\nWhether to bind the ON and WHERE clause together by OR instead of AND.\n\n\n\n\n\n\n[options.include[].on]\n\n\nObject\n\n\nSupply your own ON condition for the join.\n\n\n\n\n\n\n[options.include[].attributes]\n\n\nArray.\nString\n\n\nA list of attributes to select from the child model\n\n\n\n\n\n\n[options.include[].required]\n\n\nBoolean\n\n\nIf true, converts to an inner join, which means that the parent model will only be loaded if it has any matching children. True if \ninclude.where\n is set, false otherwise.\n\n\n\n\n\n\n[options.include[].separate]\n\n\nBoolean\n\n\nIf true, runs a separate query to fetch the associated instances, only supported for hasMany associations\n\n\n\n\n\n\n[options.include[].limit]\n\n\nNumber\n\n\nLimit the joined rows, only supported with include.separate=true\n\n\n\n\n\n\n[options.include[].through.where]\n\n\nObject\n\n\nFilter on the join model for belongsToMany relations\n\n\n\n\n\n\n[options.include[].through.attributes]\n\n\nArray\n\n\nA list of attributes to select from the join model for belongsToMany relations\n\n\n\n\n\n\n[options.include[].include]\n\n\nArray.\nObject \n Model \n String\n\n\nLoad further nested related models\n\n\n\n\n\n\n[options.order]\n\n\nString \n Array \n Sequelize.fn\n\n\nSpecifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide several columns / functions to order by. Each element can be further wrapped in a two-element array. The first element is the column / function to order by, the second is the direction. For example: \norder: [['name', 'DESC']]\n. In this way the column will be escaped, but the direction will not.\n\n\n\n\n\n\n[options.limit]\n\n\nNumber\n\n\n\n\n\n\n\n\n[options.offset]\n\n\nNumber\n\n\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.lock]\n\n\nString \n Object\n\n\nLock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See \ntransaction.LOCK for an example\n\n\n\n\n\n\n[options.raw]\n\n\nBoolean\n\n\nReturn raw result. See sequelize.query for more information.\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.having]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\nAliases:\n all\n\n\n\n\n\n\nfindById(id, [options])\n -\n \nPromise.\nInstance\n\n\nView code\n\n\nSearch for a single instance by its primary key.\n\n\nSee:\n\n\n\n\nModel#findAll\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nNumber \n String \n Buffer\n\n\nThe value of the desired instance's primary key.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n\n\nAliases:\n findByPrimary\n\n\n\n\n\n\nfindOne([options])\n -\n \nPromise.\nInstance\n\n\nView code\n\n\nSearch for a single instance. This applies LIMIT 1, so the listener will always be called with a single instance.\n\n\nSee:\n\n\n\n\nModel#findAll\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nA hash of options to describe the scope of the search\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n\n\nAliases:\n find\n\n\n\n\n\n\naggregate(field, aggregateFunction, [options])\n -\n \nPromise.\noptions.dataType|object\n\n\nView code\n\n\nRun an aggregation method on the specified field\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nThe field to aggregate over. Can be a field name or *\n\n\n\n\n\n\naggregateFunction\n\n\nString\n\n\nThe function to use for aggregation, e.g. sum, max etc.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nQuery options. See sequelize.query for full options\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nA hash of search attributes.\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.dataType]\n\n\nDataType \n String\n\n\nThe type of the result. If \nfield\n is a field in this Model, the default will be the type of that field, otherwise defaults to float.\n\n\n\n\n\n\n[options.distinct]\n\n\nboolean\n\n\nApplies DISTINCT to the field being aggregated over\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.plain]\n\n\nBoolean\n\n\nWhen \ntrue\n, the first returned value of \naggregateFunction\n is cast to \ndataType\n and returned. If additional attributes are specified, along with \ngroup\n clauses, set \nplain\n to \nfalse\n to return all values of all returned rows. Defaults to \ntrue\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\nReturns:\n Returns the aggregate result cast to \noptions.dataType\n, unless \noptions.plain\n is false, in which case the complete data result is returned.\n\n\n\n\n\n\ncount([options])\n -\n \nPromise.\nInteger\n\n\nView code\n\n\nCount the number of records matching the provided where clause.\n\n\nIf you provide an \ninclude\n option, the number of matching associations will be counted instead.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nA hash of search attributes.\n\n\n\n\n\n\n[options.include]\n\n\nObject\n\n\nInclude options. See \nfind\n for details\n\n\n\n\n\n\n[options.distinct]\n\n\nboolean\n\n\nApply COUNT(DISTINCT(col)) on primary key, \nModel.aggregate\n should be used for other columns\n\n\n\n\n\n\n[options.attributes]\n\n\nObject\n\n\nUsed in conjunction with \ngroup\n\n\n\n\n\n\n[options.group]\n\n\nObject\n\n\nFor creating complex counts. Will return multiple rows as needed.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\nfindAndCount([findOptions])\n -\n \nPromise.\nObject\n\n\nView code\n\n\nFind all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging\n\n\nModel.findAndCountAll({\n  where: ...,\n  limit: 12,\n  offset: 12\n}).then(function (result) {\n  ...\n})\n\n\n\n\nIn the above example, \nresult.rows\n will contain rows 13 through 24, while \nresult.count\n will return the total number of rows that matched your query.\n\n\nWhen you add includes, only those which are required (either because they have a where clause, or because \nrequired\n is explicitly set to true on the include) will be added to the count part.\n\n\nSuppose you want to find all users who have a profile attached:\n\n\nUser.findAndCountAll({\n  include: [\n     { model: Profile, required: true}\n  ],\n  limit 3\n});\n\n\n\n\nBecause the include for \nProfile\n has \nrequired\n set it will result in an inner join, and only the users who have a profile will be counted. If we remove \nrequired\n from the include, both users with and without profiles will be counted\n\n\nSee:\n\n\n\n\nModel#findAll\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[findOptions]\n\n\nObject\n\n\nSee findAll\n\n\n\n\n\n\n\n\nAliases:\n findAndCountAll\n\n\n\n\n\n\nmax(field, [options])\n -\n \nPromise.\nAny\n\n\nView code\n\n\nFind the maximum value of field\n\n\nSee:\n\n\n\n\nModel#aggregate\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nSee aggregate\n\n\n\n\n\n\n\n\n\n\n\n\nmin(field, [options])\n -\n \nPromise.\nAny\n\n\nView code\n\n\nFind the minimum value of field\n\n\nSee:\n\n\n\n\nModel#aggregate\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nSee aggregate\n\n\n\n\n\n\n\n\n\n\n\n\nsum(field, [options])\n -\n \nPromise.\nNumber\n\n\nView code\n\n\nFind the sum of field\n\n\nSee:\n\n\n\n\nModel#aggregate\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nSee aggregate\n\n\n\n\n\n\n\n\n\n\n\n\nbuild(values, [options])\n -\n \nInstance\n\n\nView code\n\n\nBuilds a new model instance. Values is an object of key value pairs, must be defined but can be empty.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalues\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.raw=false]\n\n\nBoolean\n\n\nIf set to true, values will ignore field and virtual setters.\n\n\n\n\n\n\n[options.isNewRecord=true]\n\n\nBoolean\n\n\n\n\n\n\n\n\n[options.include]\n\n\nArray\n\n\nan array of include options - Used to build prefetched/included model instances. See \nset\n\n\n\n\n\n\n\n\n\n\n\n\ncreate(values, [options])\n -\n \nPromise.\nInstance\n\n\nView code\n\n\nBuilds a new model instance and calls save on it.\n\n\nSee:\n\n\n\n\nInstance#build\n\n\nInstance#save\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalues\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.raw=false]\n\n\nBoolean\n\n\nIf set to true, values will ignore field and virtual setters.\n\n\n\n\n\n\n[options.isNewRecord=true]\n\n\nBoolean\n\n\n\n\n\n\n\n\n[options.fields]\n\n\nArray\n\n\nIf set, only columns matching those in fields will be saved\n\n\n\n\n\n\n[options.include]\n\n\nArray\n\n\nan array of include options - Used to build prefetched/included model instances\n\n\n\n\n\n\n[options.onDuplicate]\n\n\nString\n\n\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n[options.returning]\n\n\nBoolean\n\n\nAppend RETURNING * to get back auto generated values (Postgres only)\n\n\n\n\n\n\n[options.silent=false]\n\n\nBoolean\n\n\nIf true, the updatedAt timestamp will not be updated.\n\n\n\n\n\n\n\n\n\n\n\n\nfindOrInitialize\n -\n \nPromise.\nInstance, initialized\n\n\nView code\n\n\nFind a row that matches the query, or build (but don't save) the row if none is found.\nThe successful result of the promise will be (instance, initialized) - Make sure to use .spread()\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\noptions.where\n\n\nObject\n\n\nA hash of search attributes.\n\n\n\n\n\n\n[options.defaults]\n\n\nObject\n\n\nDefault values to use if building a new instance\n\n\n\n\n\n\n[options.transaction]\n\n\nObject\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\nAliases:\n findOrBuild\n\n\n\n\n\n\nfindOrCreate(options)\n -\n \nPromise.\nInstance, created\n\n\nView code\n\n\nFind a row that matches the query, or build and save the row if none is found\nThe successful result of the promise will be (instance, created) - Make sure to use .spread()\n\n\nIf no transaction is passed in the \noptions\n object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call.\nHowever, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize.TimeoutError will be thrown instead.\nIf a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.\n\n\nSee:\n\n\n\n\nModel#findAll\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\noptions.where\n\n\nObject\n\n\nwhere A hash of search attributes.\n\n\n\n\n\n\n[options.defaults]\n\n\nObject\n\n\nDefault values to use if creating a new instance\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n\n\n\n\n\n\nfindCreateFind(options)\n -\n \nPromise.\nInstance, created\n\n\nView code\n\n\nA more performant findOrCreate that will not work under a transaction (at least not in postgres)\nWill execute a find call, if empty then attempt to create, if unique constraint then attempt to find again\n\n\nSee:\n\n\n\n\nModel#findAll\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\noptions.where\n\n\nObject\n\n\nwhere A hash of search attributes.\n\n\n\n\n\n\n[options.defaults]\n\n\nObject\n\n\nDefault values to use if creating a new instance\n\n\n\n\n\n\n\n\n\n\n\n\nupsert(values, [options])\n -\n \nPromise.\ncreated\n\n\nView code\n\n\nInsert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.\n\n\nImplementation details:\n\n\n\n\nMySQL - Implemented as a single query \nINSERT values ON DUPLICATE KEY UPDATE values\n\n\nPostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE\n\n\nSQLite - Implemented as two queries \nINSERT; UPDATE\n. This means that the update is executed regardless of whether the row already existed or not\n\n\n\n\nNote\n that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalues\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.validate=true]\n\n\nBoolean\n\n\nRun validations before the row is inserted\n\n\n\n\n\n\n[options.fields=Object.keys(this.attributes)]\n\n\nArray\n\n\nThe fields to insert / update. Defaults to all fields\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\nReturns:\n Returns a boolean indicating whether the row was created or updated.\n\nAliases:\n insertOrUpdate\n\n\n\n\n\n\nbulkCreate(records, [options])\n -\n \nPromise.\nArray.\nInstance\n\n\nView code\n\n\nCreate and insert multiple instances in bulk.\n\n\nThe success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL\nand SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.\nTo obtain Instances for the newly created values, you will need to query for them again.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecords\n\n\nArray\n\n\nList of objects (key/value pairs) to create instances from\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.fields]\n\n\nArray\n\n\nFields to insert (defaults to all fields)\n\n\n\n\n\n\n[options.validate=false]\n\n\nBoolean\n\n\nShould each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation\n\n\n\n\n\n\n[options.hooks=true]\n\n\nBoolean\n\n\nRun before / after bulk create hooks?\n\n\n\n\n\n\n[options.individualHooks=false]\n\n\nBoolean\n\n\nRun before / after create hooks for each individual Instance? BulkCreate hooks will still be run if options.hooks is true.\n\n\n\n\n\n\n[options.ignoreDuplicates=false]\n\n\nBoolean\n\n\nIgnore duplicate values for primary keys? (not supported by postgres)\n\n\n\n\n\n\n[options.updateOnDuplicate]\n\n\nArray\n\n\nFields to update if row key already exists (on duplicate key update)? (only supported by mysql). By default, all fields are updated.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.returning=false]\n\n\nBoolean\n\n\nAppend RETURNING * to get back auto generated values (Postgres only)\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\ntruncate([options])\n -\n \nPromise\n\n\nView code\n\n\nTruncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).\n\n\nSee:\n\n\n\n\nModel#destroy\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\nThe options passed to Model.destroy in addition to truncate\n\n\n\n\n\n\n[options.transaction]\n\n\nBoolean \n function\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.cascade=false]\n\n\nBoolean \n function\n\n\nOnly used in conjunction with TRUNCATE. Truncates all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging]\n\n\nBoolean \n function\n\n\nA function that logs sql queries, or false for no logging\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\n\n\n\n\ndestroy(options)\n -\n \nPromise.\nInteger\n\n\nView code\n\n\nDelete multiple instances, or set their deletedAt timestamp to the current time if \nparanoid\n is enabled.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nFilter the destroy\n\n\n\n\n\n\n[options.hooks=true]\n\n\nBoolean\n\n\nRun before / after bulk destroy hooks?\n\n\n\n\n\n\n[options.individualHooks=false]\n\n\nBoolean\n\n\nIf set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row\n\n\n\n\n\n\n[options.limit]\n\n\nNumber\n\n\nHow many rows to delete\n\n\n\n\n\n\n[options.force=false]\n\n\nBoolean\n\n\nDelete instead of setting deletedAt to current timestamp (only applicable if \nparanoid\n is enabled)\n\n\n\n\n\n\n[options.truncate=false]\n\n\nBoolean\n\n\nIf set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored\n\n\n\n\n\n\n[options.cascade=false]\n\n\nBoolean\n\n\nOnly used in conjunction with TRUNCATE. Truncates all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n\n\n\n\n\n\n[options.restartIdentity=false]\n\n\nBoolean\n\n\nOnly used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table. Postgres only.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n\n\nReturns:\n The number of destroyed rows\n\n\n\n\n\n\nrestore(options)\n -\n \nPromise.\nundefined\n\n\nView code\n\n\nRestore multiple instances if \nparanoid\n is enabled.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nFilter the restore\n\n\n\n\n\n\n[options.hooks=true]\n\n\nBoolean\n\n\nRun before / after bulk restore hooks?\n\n\n\n\n\n\n[options.individualHooks=false]\n\n\nBoolean\n\n\nIf set to true, restore will find all records within the where parameter and will execute before / after bulkRestore hooks on each row\n\n\n\n\n\n\n[options.limit]\n\n\nNumber\n\n\nHow many rows to undelete\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n\n\n\n\n\n\nupdate(values, options)\n -\n \nPromise.\nArray.\naffectedCount, affectedRows\n\n\nView code\n\n\nUpdate multiple instances that match the where options. The promise returns an array with one or two elements. The first element is always the number\nof affected rows, while the second element is the actual affected rows (only supported in postgres with \noptions.returning\n true.)\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalues\n\n\nObject\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\noptions.where\n\n\nObject\n\n\nOptions to describe the scope of the search.\n\n\n\n\n\n\n[options.fields]\n\n\nArray\n\n\nFields to update (defaults to all fields)\n\n\n\n\n\n\n[options.validate=true]\n\n\nBoolean\n\n\nShould each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation\n\n\n\n\n\n\n[options.hooks=true]\n\n\nBoolean\n\n\nRun before / after bulk update hooks?\n\n\n\n\n\n\n[options.sideEffects=true]\n\n\nBoolean\n\n\nWhether or not to update the side effects of any virtual setters.\n\n\n\n\n\n\n[options.individualHooks=false]\n\n\nBoolean\n\n\nRun before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks\n\n\n\n\n\n\n[options.returning=false]\n\n\nBoolean\n\n\nReturn the affected rows (only for postgres)\n\n\n\n\n\n\n[options.limit]\n\n\nNumber\n\n\nHow many rows to update (only for mysql)\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.benchmark=false]\n\n\nBoolean\n\n\nPrint query execution time in milliseconds when logging SQL.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\nTransaction to run query under\n\n\n\n\n\n\n[options.silent=false]\n\n\nBoolean\n\n\nIf true, the updatedAt timestamp will not be updated.\n\n\n\n\n\n\n\n\n\n\n\n\ndescribe()\n -\n \nPromise\n\n\nView code\n\n\nRun a describe query on the table. The result will be return to the listener as a hash of attributes and their types.\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Model"
        }, 
        {
            "location": "/api/model/#class-model", 
            "text": "View code  A Model represents a table in the database. Sometimes you might also see it referred to as model, or simply as factory.\nThis class should  not  be instantiated directly, it is created using  sequelize.define , and already created models can be loaded using  sequelize.import", 
            "title": "Class Model"
        }, 
        {
            "location": "/api/model/#mixes", 
            "text": "Hooks  Associations", 
            "title": "Mixes:"
        }, 
        {
            "location": "/api/model/#removeattributeattribute", 
            "text": "View code  Remove attribute from model definition  Params:     Name  Type  Description      [attribute]  String", 
            "title": "removeAttribute([attribute])"
        }, 
        {
            "location": "/api/model/#sync-promisethis", 
            "text": "View code  Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the model instance (this)  See:   Sequelize#sync", 
            "title": "sync() -&gt; Promise.&lt;this&gt;"
        }, 
        {
            "location": "/api/model/#dropoptions-promise", 
            "text": "View code  Drop the table represented by this Model  Params:     Name  Type  Description      [options]  Object     [options.cascade=false]  Boolean  Also drop all objects depending on this table, such as views. Only works in postgres    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "drop([options]) -&gt; Promise"
        }, 
        {
            "location": "/api/model/#schemaschema-options-this", 
            "text": "View code  Apply a schema to this model. For postgres, this will actually place the schema in front of the table name -  \"schema\".\"tableName\" ,\nwhile the schema will be prepended to the table name for mysql and sqlite -  'schema.tablename' .  Params:     Name  Type  Description      schema  String  The name of the schema    [options]  Object     [options.schemaDelimiter='.']  String  The character(s) that separates the schema name from the table name    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "schema(schema, [options]) -&gt; this"
        }, 
        {
            "location": "/api/model/#gettablenameoptions-stringobject", 
            "text": "View code  Get the tablename of the model, taking schema into account. The method will return The name as a string if the model has no schema,\nor an object with  tableName ,  schema  and  delimiter  properties.  Params:     Name  Type  Description      [options]  Object  The hash of options from any query. You can use one model to access tables with matching schemas by overriding  getTableName  and using custom key/values to alter the name of the table. (eg. subscribers_1, subscribers_2)    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "getTableName([options]) -&gt; String|Object"
        }, 
        {
            "location": "/api/model/#unscoped-model", 
            "text": "View code", 
            "title": "unscoped() -&gt; Model"
        }, 
        {
            "location": "/api/model/#addscopename-scope-options", 
            "text": "View code  Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.  By default this will throw an error if a scope with that name already exists. Pass  override: true  in the options object to silence this error.  Params:     Name  Type  Description      name  String  The name of the scope. Use  defaultScope  to override the default scope    scope  Object   Function     [options]  Object     [options.override=false]  Boolean", 
            "title": "addScope(name, scope, [options])"
        }, 
        {
            "location": "/api/model/#scopeoptions-model", 
            "text": "View code  Apply a scope created in  define  to the model. First let's look at how to create scopes:  var Model = sequelize.define('model', attributes, {\n  defaultScope: {\n    where: {\n      username: 'dan'\n    },\n    limit: 12\n  },\n  scopes: {\n    isALie: {\n      where: {\n        stuff: 'cake'\n      }\n    },\n    complexFunction: function(email, accessLevel) {\n      return {\n        where: {\n          email: {\n            $like: email\n          },\n          accesss_level {\n            $gte: accessLevel\n          }\n        }\n      }\n    }\n  }\n})  Now, since you defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:  Model.findAll() // WHERE username = 'dan'\nModel.findAll({ where: { age: { gt: 12 } } }) // WHERE age   12 AND username = 'dan'  To invoke scope functions you can do:  Model.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()\n// WHERE email like 'dan@sequelize.com%' AND access_level  = 42  Params:     Name  Type  Description      options*  Array   Object   String  The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function, pass an object, with a  method  property. The value can either be a string, if the method does not take any arguments, or an array, where the first element is the name of the method, and consecutive elements are arguments to that method. Pass null to remove all scopes, including the default.     Returns:  A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope.", 
            "title": "scope(options*) -&gt; Model"
        }, 
        {
            "location": "/api/model/#findalloptions-promisearrayinstance", 
            "text": "View code  Search for multiple instances.  Simple search using AND and =  Model.findAll({\n  where: {\n    attr1: 42,\n    attr2: 'cake'\n  }\n})  WHERE attr1 = 42 AND attr2 = 'cake'  Using greater than, less than etc.  \nModel.findAll({\n  where: {\n    attr1: {\n      gt: 50\n    },\n    attr2: {\n      lte: 45\n    },\n    attr3: {\n      in: [1,2,3]\n    },\n    attr4: {\n      ne: 5\n    }\n  }\n})  WHERE attr1   50 AND attr2  = 45 AND attr3 IN (1,2,3) AND attr4 != 5  Possible options are:  $ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike, $notILike, '..'/$between, '!..'/$notBetween, ' '/$overlap, '@ '/$contains, ' @'/$contained  Queries using OR  Model.findAll({\n  where: {\n    name: 'a project',\n    $or: [\n      {id: [1, 2, 3]},\n      {\n        $and: [\n          {id: {gt: 10}},\n          {id: {lt: 100}}\n        ]\n      }\n    ]\n  }\n});  WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id`   10 AND `Model`.`id`   100));  The success listener is called with an array of instances if the query succeeds.  See:   Sequelize#query   Params:     Name  Type  Description      [options]  Object  A hash of options to describe the scope of the search    [options.where]  Object  A hash of attributes to describe your search. See above for examples.    [options.attributes]  Array. String    Object  A list of the attributes that you want to select, or an object with  include  and  exclude  keys. To rename an attribute, you can pass an array, with two elements - the first is the name of the attribute in the DB (or some kind of expression such as  Sequelize.literal ,  Sequelize.fn  and so on), and the second is the name you want the attribute to have in the returned instance    [options.attributes.include]  Array. String  Select all the attributes of the model, plus some additional ones. Useful for aggregations, e.g.  { attributes: { include: [[sequelize.fn('COUNT', sequelize.col('id')), 'total']] }    [options.attributes.exclude]  Array. String  Select all the attributes of the model, except some few. Useful for security purposes e.g.  { attributes: { exclude: ['password'] } }    [options.paranoid=true]  Boolean  If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will be returned. Only applies if  options.paranoid  is true for the model.    [options.include]  Array. Object   Model   String  A list of associations to eagerly load using a left join. Supported is either  { include: [ Model1, Model2, ...]}  or  { include: [{ model: Model1, as: 'Alias' }, ...]}  or  { include: ['Alias', ...]} . If your association are set up with an  as  (eg.  X.hasMany(Y, { as: 'Z } , you need to specify Z in the as attribute when eager loading Y).    [options.include[].model]  Model  The model you want to eagerly load    [options.include[].as]  String  The alias of the relation, in case the model you want to eagerly load is aliased. For  hasOne  /  belongsTo , this should be the singular name, and for  hasMany , it should be the plural    [options.include[].association]  Association  The association you want to eagerly load. (This can be used instead of providing a model/as pair)    [options.include[].where]  Object  Where clauses to apply to the child models. Note that this converts the eager load to an inner join, unless you explicitly set  required: false    [options.include[].or=false]  Boolean  Whether to bind the ON and WHERE clause together by OR instead of AND.    [options.include[].on]  Object  Supply your own ON condition for the join.    [options.include[].attributes]  Array. String  A list of attributes to select from the child model    [options.include[].required]  Boolean  If true, converts to an inner join, which means that the parent model will only be loaded if it has any matching children. True if  include.where  is set, false otherwise.    [options.include[].separate]  Boolean  If true, runs a separate query to fetch the associated instances, only supported for hasMany associations    [options.include[].limit]  Number  Limit the joined rows, only supported with include.separate=true    [options.include[].through.where]  Object  Filter on the join model for belongsToMany relations    [options.include[].through.attributes]  Array  A list of attributes to select from the join model for belongsToMany relations    [options.include[].include]  Array. Object   Model   String  Load further nested related models    [options.order]  String   Array   Sequelize.fn  Specifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide several columns / functions to order by. Each element can be further wrapped in a two-element array. The first element is the column / function to order by, the second is the direction. For example:  order: [['name', 'DESC']] . In this way the column will be escaped, but the direction will not.    [options.limit]  Number     [options.offset]  Number     [options.transaction]  Transaction  Transaction to run query under    [options.lock]  String   Object  Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See  transaction.LOCK for an example    [options.raw]  Boolean  Return raw result. See sequelize.query for more information.    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.having]  Object     [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.     Aliases:  all", 
            "title": "findAll([options]) -&gt; Promise.&lt;Array.&lt;Instance&gt;&gt;"
        }, 
        {
            "location": "/api/model/#findbyidid-options-promiseinstance", 
            "text": "View code  Search for a single instance by its primary key.  See:   Model#findAll   Params:     Name  Type  Description      id  Number   String   Buffer  The value of the desired instance's primary key.    [options]  Object     [options.transaction]  Transaction  Transaction to run query under    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)     Aliases:  findByPrimary", 
            "title": "findById(id, [options]) -&gt; Promise.&lt;Instance&gt;"
        }, 
        {
            "location": "/api/model/#findoneoptions-promiseinstance", 
            "text": "View code  Search for a single instance. This applies LIMIT 1, so the listener will always be called with a single instance.  See:   Model#findAll   Params:     Name  Type  Description      [options]  Object  A hash of options to describe the scope of the search    [options.transaction]  Transaction  Transaction to run query under    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)     Aliases:  find", 
            "title": "findOne([options]) -&gt; Promise.&lt;Instance&gt;"
        }, 
        {
            "location": "/api/model/#aggregatefield-aggregatefunction-options-promiseoptionsdatatypeobject", 
            "text": "View code  Run an aggregation method on the specified field  Params:     Name  Type  Description      field  String  The field to aggregate over. Can be a field name or *    aggregateFunction  String  The function to use for aggregation, e.g. sum, max etc.    [options]  Object  Query options. See sequelize.query for full options    [options.where]  Object  A hash of search attributes.    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.dataType]  DataType   String  The type of the result. If  field  is a field in this Model, the default will be the type of that field, otherwise defaults to float.    [options.distinct]  boolean  Applies DISTINCT to the field being aggregated over    [options.transaction]  Transaction  Transaction to run query under    [options.plain]  Boolean  When  true , the first returned value of  aggregateFunction  is cast to  dataType  and returned. If additional attributes are specified, along with  group  clauses, set  plain  to  false  to return all values of all returned rows. Defaults to  true    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.     Returns:  Returns the aggregate result cast to  options.dataType , unless  options.plain  is false, in which case the complete data result is returned.", 
            "title": "aggregate(field, aggregateFunction, [options]) -&gt; Promise.&lt;options.dataType|object&gt;"
        }, 
        {
            "location": "/api/model/#countoptions-promiseinteger", 
            "text": "View code  Count the number of records matching the provided where clause.  If you provide an  include  option, the number of matching associations will be counted instead.  Params:     Name  Type  Description      [options]  Object     [options.where]  Object  A hash of search attributes.    [options.include]  Object  Include options. See  find  for details    [options.distinct]  boolean  Apply COUNT(DISTINCT(col)) on primary key,  Model.aggregate  should be used for other columns    [options.attributes]  Object  Used in conjunction with  group    [options.group]  Object  For creating complex counts. Will return multiple rows as needed.    [options.transaction]  Transaction  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "count([options]) -&gt; Promise.&lt;Integer&gt;"
        }, 
        {
            "location": "/api/model/#findandcountfindoptions-promiseobject", 
            "text": "View code  Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging  Model.findAndCountAll({\n  where: ...,\n  limit: 12,\n  offset: 12\n}).then(function (result) {\n  ...\n})  In the above example,  result.rows  will contain rows 13 through 24, while  result.count  will return the total number of rows that matched your query.  When you add includes, only those which are required (either because they have a where clause, or because  required  is explicitly set to true on the include) will be added to the count part.  Suppose you want to find all users who have a profile attached:  User.findAndCountAll({\n  include: [\n     { model: Profile, required: true}\n  ],\n  limit 3\n});  Because the include for  Profile  has  required  set it will result in an inner join, and only the users who have a profile will be counted. If we remove  required  from the include, both users with and without profiles will be counted  See:   Model#findAll   Params:     Name  Type  Description      [findOptions]  Object  See findAll     Aliases:  findAndCountAll", 
            "title": "findAndCount([findOptions]) -&gt; Promise.&lt;Object&gt;"
        }, 
        {
            "location": "/api/model/#maxfield-options-promiseany", 
            "text": "View code  Find the maximum value of field  See:   Model#aggregate   Params:     Name  Type  Description      field  String     [options]  Object  See aggregate", 
            "title": "max(field, [options]) -&gt; Promise.&lt;Any&gt;"
        }, 
        {
            "location": "/api/model/#minfield-options-promiseany", 
            "text": "View code  Find the minimum value of field  See:   Model#aggregate   Params:     Name  Type  Description      field  String     [options]  Object  See aggregate", 
            "title": "min(field, [options]) -&gt; Promise.&lt;Any&gt;"
        }, 
        {
            "location": "/api/model/#sumfield-options-promisenumber", 
            "text": "View code  Find the sum of field  See:   Model#aggregate   Params:     Name  Type  Description      field  String     [options]  Object  See aggregate", 
            "title": "sum(field, [options]) -&gt; Promise.&lt;Number&gt;"
        }, 
        {
            "location": "/api/model/#buildvalues-options-instance", 
            "text": "View code  Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.  Params:     Name  Type  Description      values  Object     [options]  Object     [options.raw=false]  Boolean  If set to true, values will ignore field and virtual setters.    [options.isNewRecord=true]  Boolean     [options.include]  Array  an array of include options - Used to build prefetched/included model instances. See  set", 
            "title": "build(values, [options]) -&gt; Instance"
        }, 
        {
            "location": "/api/model/#createvalues-options-promiseinstance", 
            "text": "View code  Builds a new model instance and calls save on it.  See:   Instance#build  Instance#save   Params:     Name  Type  Description      values  Object     [options]  Object     [options.raw=false]  Boolean  If set to true, values will ignore field and virtual setters.    [options.isNewRecord=true]  Boolean     [options.fields]  Array  If set, only columns matching those in fields will be saved    [options.include]  Array  an array of include options - Used to build prefetched/included model instances    [options.onDuplicate]  String     [options.transaction]  Transaction  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.    [options.returning]  Boolean  Append RETURNING * to get back auto generated values (Postgres only)    [options.silent=false]  Boolean  If true, the updatedAt timestamp will not be updated.", 
            "title": "create(values, [options]) -&gt; Promise.&lt;Instance&gt;"
        }, 
        {
            "location": "/api/model/#findorinitialize-promiseinstance-initialized", 
            "text": "View code  Find a row that matches the query, or build (but don't save) the row if none is found.\nThe successful result of the promise will be (instance, initialized) - Make sure to use .spread()  Params:     Name  Type  Description      options  Object     options.where  Object  A hash of search attributes.    [options.defaults]  Object  Default values to use if building a new instance    [options.transaction]  Object  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.     Aliases:  findOrBuild", 
            "title": "findOrInitialize -&gt; Promise.&lt;Instance, initialized&gt;"
        }, 
        {
            "location": "/api/model/#findorcreateoptions-promiseinstance-created", 
            "text": "View code  Find a row that matches the query, or build and save the row if none is found\nThe successful result of the promise will be (instance, created) - Make sure to use .spread()  If no transaction is passed in the  options  object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call.\nHowever, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize.TimeoutError will be thrown instead.\nIf a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.  See:   Model#findAll   Params:     Name  Type  Description      options  Object     options.where  Object  where A hash of search attributes.    [options.defaults]  Object  Default values to use if creating a new instance    [options.transaction]  Transaction  Transaction to run query under", 
            "title": "findOrCreate(options) -&gt; Promise.&lt;Instance, created&gt;"
        }, 
        {
            "location": "/api/model/#findcreatefindoptions-promiseinstance-created", 
            "text": "View code  A more performant findOrCreate that will not work under a transaction (at least not in postgres)\nWill execute a find call, if empty then attempt to create, if unique constraint then attempt to find again  See:   Model#findAll   Params:     Name  Type  Description      options  Object     options.where  Object  where A hash of search attributes.    [options.defaults]  Object  Default values to use if creating a new instance", 
            "title": "findCreateFind(options) -&gt; Promise.&lt;Instance, created&gt;"
        }, 
        {
            "location": "/api/model/#upsertvalues-options-promisecreated", 
            "text": "View code  Insert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.  Implementation details:   MySQL - Implemented as a single query  INSERT values ON DUPLICATE KEY UPDATE values  PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE  SQLite - Implemented as two queries  INSERT; UPDATE . This means that the update is executed regardless of whether the row already existed or not   Note  that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.  Params:     Name  Type  Description      values  Object     [options]  Object     [options.validate=true]  Boolean  Run validations before the row is inserted    [options.fields=Object.keys(this.attributes)]  Array  The fields to insert / update. Defaults to all fields    [options.transaction]  Transaction  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.     Returns:  Returns a boolean indicating whether the row was created or updated. Aliases:  insertOrUpdate", 
            "title": "upsert(values, [options]) -&gt; Promise.&lt;created&gt;"
        }, 
        {
            "location": "/api/model/#bulkcreaterecords-options-promisearrayinstance", 
            "text": "View code  Create and insert multiple instances in bulk.  The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL\nand SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.\nTo obtain Instances for the newly created values, you will need to query for them again.  Params:     Name  Type  Description      records  Array  List of objects (key/value pairs) to create instances from    [options]  Object     [options.fields]  Array  Fields to insert (defaults to all fields)    [options.validate=false]  Boolean  Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation    [options.hooks=true]  Boolean  Run before / after bulk create hooks?    [options.individualHooks=false]  Boolean  Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if options.hooks is true.    [options.ignoreDuplicates=false]  Boolean  Ignore duplicate values for primary keys? (not supported by postgres)    [options.updateOnDuplicate]  Array  Fields to update if row key already exists (on duplicate key update)? (only supported by mysql). By default, all fields are updated.    [options.transaction]  Transaction  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.returning=false]  Boolean  Append RETURNING * to get back auto generated values (Postgres only)    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "bulkCreate(records, [options]) -&gt; Promise.&lt;Array.&lt;Instance&gt;&gt;"
        }, 
        {
            "location": "/api/model/#truncateoptions-promise", 
            "text": "View code  Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).  See:   Model#destroy   Params:     Name  Type  Description      [options]  object  The options passed to Model.destroy in addition to truncate    [options.transaction]  Boolean   function  Transaction to run query under    [options.cascade=false]  Boolean   function  Only used in conjunction with TRUNCATE. Truncates all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.    [options.transaction]  Transaction  Transaction to run query under    [options.logging]  Boolean   function  A function that logs sql queries, or false for no logging    [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.", 
            "title": "truncate([options]) -&gt; Promise"
        }, 
        {
            "location": "/api/model/#destroyoptions-promiseinteger", 
            "text": "View code  Delete multiple instances, or set their deletedAt timestamp to the current time if  paranoid  is enabled.  Params:     Name  Type  Description      options  Object     [options.where]  Object  Filter the destroy    [options.hooks=true]  Boolean  Run before / after bulk destroy hooks?    [options.individualHooks=false]  Boolean  If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row    [options.limit]  Number  How many rows to delete    [options.force=false]  Boolean  Delete instead of setting deletedAt to current timestamp (only applicable if  paranoid  is enabled)    [options.truncate=false]  Boolean  If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored    [options.cascade=false]  Boolean  Only used in conjunction with TRUNCATE. Truncates all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.    [options.restartIdentity=false]  Boolean  Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table. Postgres only.    [options.transaction]  Transaction  Transaction to run query under    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.     Returns:  The number of destroyed rows", 
            "title": "destroy(options) -&gt; Promise.&lt;Integer&gt;"
        }, 
        {
            "location": "/api/model/#restoreoptions-promiseundefined", 
            "text": "View code  Restore multiple instances if  paranoid  is enabled.  Params:     Name  Type  Description      options  Object     [options.where]  Object  Filter the restore    [options.hooks=true]  Boolean  Run before / after bulk restore hooks?    [options.individualHooks=false]  Boolean  If set to true, restore will find all records within the where parameter and will execute before / after bulkRestore hooks on each row    [options.limit]  Number  How many rows to undelete    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.    [options.transaction]  Transaction  Transaction to run query under", 
            "title": "restore(options) -&gt; Promise.&lt;undefined&gt;"
        }, 
        {
            "location": "/api/model/#updatevalues-options-promisearrayaffectedcount-affectedrows", 
            "text": "View code  Update multiple instances that match the where options. The promise returns an array with one or two elements. The first element is always the number\nof affected rows, while the second element is the actual affected rows (only supported in postgres with  options.returning  true.)  Params:     Name  Type  Description      values  Object     options  Object     options.where  Object  Options to describe the scope of the search.    [options.fields]  Array  Fields to update (defaults to all fields)    [options.validate=true]  Boolean  Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation    [options.hooks=true]  Boolean  Run before / after bulk update hooks?    [options.sideEffects=true]  Boolean  Whether or not to update the side effects of any virtual setters.    [options.individualHooks=false]  Boolean  Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks    [options.returning=false]  Boolean  Return the affected rows (only for postgres)    [options.limit]  Number  How many rows to update (only for mysql)    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.benchmark=false]  Boolean  Print query execution time in milliseconds when logging SQL.    [options.transaction]  Transaction  Transaction to run query under    [options.silent=false]  Boolean  If true, the updatedAt timestamp will not be updated.", 
            "title": "update(values, options) -&gt; Promise.&lt;Array.&lt;affectedCount, affectedRows&gt;&gt;"
        }, 
        {
            "location": "/api/model/#describe-promise", 
            "text": "View code  Run a describe query on the table. The result will be return to the listener as a hash of attributes and their types.   This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "describe() -&gt; Promise"
        }, 
        {
            "location": "/api/instance/", 
            "text": "Class Instance\n\n\nView code\n\n\nThis class represents an single instance, a database row. You might see it referred to as both Instance and instance. You should not\ninstantiate the Instance class directly, instead you access it using the finder and creation methods on the model.\n\n\nInstance instances operate with the concept of a \ndataValues\n property, which stores the actual values represented by the instance.\nBy default, the values from dataValues can also be accessed directly from the Instance, that is:\n\n\ninstance.field\n// is the same as\ninstance.get('field')\n// is the same as\ninstance.getDataValue('field')\n\n\n\n\nHowever, if getters and/or setters are defined for \nfield\n they will be invoked, instead of returning the value from \ndataValues\n.\nAccessing properties directly or using \nget\n is preferred for regular use, \ngetDataValue\n should only be used for custom getters.\n\n\nSee:\n\n\n\n\nSequelize#define\n\n\n\n\n\n\n\n\nisNewRecord\n -\n \nBoolean\n\n\nView code\n\n\nReturns true if this instance has not yet been persisted to the database\n\n\n\n\n\n\nModel()\n -\n \nModel\n\n\nView code\n\n\nReturns the Model the instance was created from.\n\n\nSee:\n\n\n\n\nModel\n\n\n\n\n\n\n\n\nsequelize()\n -\n \nSequelize\n\n\nView code\n\n\nA reference to the sequelize instance\n\n\nSee:\n\n\n\n\nSequelize\n\n\n\n\n\n\n\n\nwhere()\n -\n \nObject\n\n\nView code\n\n\nGet an object representing the query for this instance, use with \noptions.where\n\n\n\n\n\n\ngetDataValue(key)\n -\n \nany\n\n\nView code\n\n\nGet the value of the underlying data value\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsetDataValue(key, value)\n\n\nView code\n\n\nUpdate the underlying data value\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\n\n\n\n\n\n\nvalue\n\n\nany\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget([key], [options])\n -\n \nObject|any\n\n\nView code\n\n\nIf no key is given, returns all values of the instance, also invoking virtual getters.\n\n\nIf key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[key]\n\n\nString\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.plain=false]\n\n\nBoolean\n\n\nIf set to true, included instances will be returned as plain objects\n\n\n\n\n\n\n\n\n\n\n\n\nset(key, value, [options])\n\n\nView code\n\n\nSet is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call \nsave\n).\nIn its most basic form \nset\n will update a value stored in the underlying \ndataValues\n object. However, if a custom setter function is defined for the key, that function\nwill be called instead. To bypass the setter, you can pass \nraw: true\n in the options object.\n\n\nIf set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be\nset directly to the object passed, or used to extend dataValues, if dataValues already contain values.\n\n\nWhen set is called, the previous value of the field is stored and sets a changed flag(see \nchanged\n).\n\n\nSet can also be used to build instances for associations, if you have values for those.\nWhen using set with associations you need to make sure the property key matches the alias of the association\nwhile also making sure that the proper include options have been set (from .build() or .find())\n\n\nIf called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString \n Object\n\n\n\n\n\n\n\n\nvalue\n\n\nany\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.raw=false]\n\n\nBoolean\n\n\nIf set to true, field and virtual setters will be ignored\n\n\n\n\n\n\n[options.reset=false]\n\n\nBoolean\n\n\nClear all previously set data values\n\n\n\n\n\n\n\n\nAliases:\n setAttributes\n\n\n\n\n\n\nchanged([key])\n -\n \nBoolean|Array\n\n\nView code\n\n\nIf changed is called with a string it will return a boolean indicating whether the value of that key in \ndataValues\n is different from the value in \n_previousDataValues\n.\n\n\nIf changed is called without an argument, it will return an array of keys that have changed.\n\n\nIf changed is called without an argument and no keys have changed, it will return \nfalse\n.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[key]\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprevious([key])\n -\n \nany|Array.\nany\n\n\nView code\n\n\nReturns the previous value for key from \n_previousDataValues\n.\n\n\nIf called without a key, returns the previous values for all values which have changed\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[key]\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsave([options])\n -\n \nPromise.\nthis|Errors.ValidationError\n\n\nView code\n\n\nValidate this instance, and if the validation passes, persist it to the database. It will only save changed fields, and do nothing if no fields have changed.\n\n\nOn success, the callback will be called with this instance. On validation error, the callback will be called with an instance of \nSequelize.ValidationError\n.\nThis error will have a property for each of the fields for which validation failed, with the error message for that field.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.fields]\n\n\nArray.\nstring\n\n\nAn optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.\n\n\n\n\n\n\n[options.silent=false]\n\n\nBoolean\n\n\nIf true, the updatedAt timestamp will not be updated.\n\n\n\n\n\n\n[options.validate=true]\n\n\nBoolean\n\n\nIf false, validations won't be run.\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.returning]\n\n\nBoolean\n\n\nAppend RETURNING * to get back auto generated values (Postgres only)\n\n\n\n\n\n\n\n\n\n\n\n\nreload([options])\n -\n \nPromise.\nthis\n\n\nView code\n\n\nRefresh the current instance in-place, i.e. update the object with current data from the DB and return the same object.\nThis is different from doing a \nfind(Instance.id)\n, because that would create and return a new instance. With this method,\nall references to the Instance are updated with the new data and no new objects are created.\n\n\nSee:\n\n\n\n\nModel#find\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions that are passed on to \nModel.find\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n\n\n\n\n\n\nvalidate([options])\n -\n \nPromise.\nErrors.ValidationError|undefined\n\n\nView code\n\n\nValidate the attribute of this instance according to validation rules set in the model definition.\n\n\nEmits null if and only if validation successful; otherwise an Error instance containing { field name : [error msgs] } entries.\n\n\nSee:\n\n\n\n\nInstanceValidator\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions that are passed to the validator\n\n\n\n\n\n\n[options.skip]\n\n\nArray\n\n\nAn array of strings. All properties that are in this array will not be validated\n\n\n\n\n\n\n\n\n\n\n\n\nupdate(updates, options)\n -\n \nPromise.\nthis\n\n\nView code\n\n\nThis is the same as calling \nset\n and then calling \nsave\n but it only saves the\nexact values passed to it, making it more atomic and safer.\n\n\nSee:\n\n\n\n\nInstance#set\n\n\nInstance#save\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdates\n\n\nObject\n\n\nSee \nset\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSee \nsave\n\n\n\n\n\n\n\n\nAliases:\n updateAttributes\n\n\n\n\n\n\ndestroy([options={}])\n -\n \nPromise.\nundefined\n\n\nView code\n\n\nDestroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.force=false]\n\n\nBoolean\n\n\nIf set to true, paranoid models will actually be deleted\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n[options.silent=false]\n\n\nBoolean\n\n\nIf true, the updatedAt timestamp will not be updated.\n\n\n\n\n\n\n\n\n\n\n\n\nrestore([options={}])\n -\n \nPromise.\nundefined\n\n\nView code\n\n\nRestore the row corresponding to this instance. Only available for paranoid models.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options={}]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nincrement(fields, [options])\n -\n \nPromise.\nthis\n\n\nView code\n\n\nIncrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a\n\n\nSET column = column + X\n\n\n\n\nquery. To get the correct value after an increment into the Instance you should do a reload.\n\n\ninstance.increment('number') // increment number by 1\ninstance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2\ninstance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.\n                                                       // `by` is ignored, since each column has its own value\n\n\n\n\nSee:\n\n\n\n\nInstance#reload\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\nString \n Array \n Object\n\n\nIf a string is provided, that column is incremented by the value of \nby\n given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.by=1]\n\n\nInteger\n\n\nThe number to increment by\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n\n\n\n\n\n\ndecrement(fields, [options])\n -\n \nPromise\n\n\nView code\n\n\nDecrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a\n\n\nSET column = column - X\n\n\n\n\nquery. To get the correct value after an decrement into the Instance you should do a reload.\n\n\ninstance.decrement('number') // decrement number by 1\ninstance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2\ninstance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.\n                                                       // `by` is ignored, since each column has its own value\n\n\n\n\nSee:\n\n\n\n\nInstance#reload\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\nString \n Array \n Object\n\n\nIf a string is provided, that column is decremented by the value of \nby\n given in options. If an array is provided, the same is true for each column. If and object is provided, each column is decremented by the value given\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.by=1]\n\n\nInteger\n\n\nThe number to decrement by\n\n\n\n\n\n\n[options.logging=false]\n\n\nFunction\n\n\nA function that gets executed while running the query to log the sql.\n\n\n\n\n\n\n[options.transaction]\n\n\nTransaction\n\n\n\n\n\n\n\n\n[options.searchPath=DEFAULT]\n\n\nString\n\n\nAn optional parameter to specify the schema search_path (Postgres only)\n\n\n\n\n\n\n\n\n\n\n\n\nequals(other)\n -\n \nBoolean\n\n\nView code\n\n\nCheck whether all values of this and \nother\n Instance are the same\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nother\n\n\nInstance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nequalsOneOf(others)\n -\n \nBoolean\n\n\nView code\n\n\nCheck if this is equal to one of \nothers\n by calling equals\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nothers\n\n\nArray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoJSON()\n -\n \nobject\n\n\nView code\n\n\nConvert the instance to a JSON representation. Proxies to calling \nget\n with no keys. This means get all values gotten from the DB, and apply all custom getters.\n\n\nSee:\n\n\n\n\nInstance#get\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Instance"
        }, 
        {
            "location": "/api/instance/#class-instance", 
            "text": "View code  This class represents an single instance, a database row. You might see it referred to as both Instance and instance. You should not\ninstantiate the Instance class directly, instead you access it using the finder and creation methods on the model.  Instance instances operate with the concept of a  dataValues  property, which stores the actual values represented by the instance.\nBy default, the values from dataValues can also be accessed directly from the Instance, that is:  instance.field\n// is the same as\ninstance.get('field')\n// is the same as\ninstance.getDataValue('field')  However, if getters and/or setters are defined for  field  they will be invoked, instead of returning the value from  dataValues .\nAccessing properties directly or using  get  is preferred for regular use,  getDataValue  should only be used for custom getters.  See:   Sequelize#define", 
            "title": "Class Instance"
        }, 
        {
            "location": "/api/instance/#isnewrecord-boolean", 
            "text": "View code  Returns true if this instance has not yet been persisted to the database", 
            "title": "isNewRecord -&gt; Boolean"
        }, 
        {
            "location": "/api/instance/#model-model", 
            "text": "View code  Returns the Model the instance was created from.  See:   Model", 
            "title": "Model() -&gt; Model"
        }, 
        {
            "location": "/api/instance/#sequelize-sequelize", 
            "text": "View code  A reference to the sequelize instance  See:   Sequelize", 
            "title": "sequelize() -&gt; Sequelize"
        }, 
        {
            "location": "/api/instance/#where-object", 
            "text": "View code  Get an object representing the query for this instance, use with  options.where", 
            "title": "where() -&gt; Object"
        }, 
        {
            "location": "/api/instance/#getdatavaluekey-any", 
            "text": "View code  Get the value of the underlying data value  Params:     Name  Type  Description      key  String", 
            "title": "getDataValue(key) -&gt; any"
        }, 
        {
            "location": "/api/instance/#setdatavaluekey-value", 
            "text": "View code  Update the underlying data value  Params:     Name  Type  Description      key  String     value  any", 
            "title": "setDataValue(key, value)"
        }, 
        {
            "location": "/api/instance/#getkey-options-objectany", 
            "text": "View code  If no key is given, returns all values of the instance, also invoking virtual getters.  If key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.  Params:     Name  Type  Description      [key]  String     [options]  Object     [options.plain=false]  Boolean  If set to true, included instances will be returned as plain objects", 
            "title": "get([key], [options]) -&gt; Object|any"
        }, 
        {
            "location": "/api/instance/#setkey-value-options", 
            "text": "View code  Set is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call  save ).\nIn its most basic form  set  will update a value stored in the underlying  dataValues  object. However, if a custom setter function is defined for the key, that function\nwill be called instead. To bypass the setter, you can pass  raw: true  in the options object.  If set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be\nset directly to the object passed, or used to extend dataValues, if dataValues already contain values.  When set is called, the previous value of the field is stored and sets a changed flag(see  changed ).  Set can also be used to build instances for associations, if you have values for those.\nWhen using set with associations you need to make sure the property key matches the alias of the association\nwhile also making sure that the proper include options have been set (from .build() or .find())  If called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.  See:   Model#find   Params:     Name  Type  Description      key  String   Object     value  any     [options]  Object     [options.raw=false]  Boolean  If set to true, field and virtual setters will be ignored    [options.reset=false]  Boolean  Clear all previously set data values     Aliases:  setAttributes", 
            "title": "set(key, value, [options])"
        }, 
        {
            "location": "/api/instance/#changedkey-booleanarray", 
            "text": "View code  If changed is called with a string it will return a boolean indicating whether the value of that key in  dataValues  is different from the value in  _previousDataValues .  If changed is called without an argument, it will return an array of keys that have changed.  If changed is called without an argument and no keys have changed, it will return  false .  Params:     Name  Type  Description      [key]  String", 
            "title": "changed([key]) -&gt; Boolean|Array"
        }, 
        {
            "location": "/api/instance/#previouskey-anyarrayany", 
            "text": "View code  Returns the previous value for key from  _previousDataValues .  If called without a key, returns the previous values for all values which have changed  Params:     Name  Type  Description      [key]  String", 
            "title": "previous([key]) -&gt; any|Array.&lt;any&gt;"
        }, 
        {
            "location": "/api/instance/#saveoptions-promisethiserrorsvalidationerror", 
            "text": "View code  Validate this instance, and if the validation passes, persist it to the database. It will only save changed fields, and do nothing if no fields have changed.  On success, the callback will be called with this instance. On validation error, the callback will be called with an instance of  Sequelize.ValidationError .\nThis error will have a property for each of the fields for which validation failed, with the error message for that field.  Params:     Name  Type  Description      [options]  Object     [options.fields]  Array. string  An optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.    [options.silent=false]  Boolean  If true, the updatedAt timestamp will not be updated.    [options.validate=true]  Boolean  If false, validations won't be run.    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.transaction]  Transaction     [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.returning]  Boolean  Append RETURNING * to get back auto generated values (Postgres only)", 
            "title": "save([options]) -&gt; Promise.&lt;this|Errors.ValidationError&gt;"
        }, 
        {
            "location": "/api/instance/#reloadoptions-promisethis", 
            "text": "View code  Refresh the current instance in-place, i.e. update the object with current data from the DB and return the same object.\nThis is different from doing a  find(Instance.id) , because that would create and return a new instance. With this method,\nall references to the Instance are updated with the new data and no new objects are created.  See:   Model#find   Params:     Name  Type  Description      [options]  Object  Options that are passed on to  Model.find    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.", 
            "title": "reload([options]) -&gt; Promise.&lt;this&gt;"
        }, 
        {
            "location": "/api/instance/#validateoptions-promiseerrorsvalidationerrorundefined", 
            "text": "View code  Validate the attribute of this instance according to validation rules set in the model definition.  Emits null if and only if validation successful; otherwise an Error instance containing { field name : [error msgs] } entries.  See:   InstanceValidator   Params:     Name  Type  Description      [options]  Object  Options that are passed to the validator    [options.skip]  Array  An array of strings. All properties that are in this array will not be validated", 
            "title": "validate([options]) -&gt; Promise.&lt;Errors.ValidationError|undefined&gt;"
        }, 
        {
            "location": "/api/instance/#updateupdates-options-promisethis", 
            "text": "View code  This is the same as calling  set  and then calling  save  but it only saves the\nexact values passed to it, making it more atomic and safer.  See:   Instance#set  Instance#save   Params:     Name  Type  Description      updates  Object  See  set    options  Object  See  save     Aliases:  updateAttributes", 
            "title": "update(updates, options) -&gt; Promise.&lt;this&gt;"
        }, 
        {
            "location": "/api/instance/#destroyoptions-promiseundefined", 
            "text": "View code  Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.  Params:     Name  Type  Description      [options={}]  Object     [options.force=false]  Boolean  If set to true, paranoid models will actually be deleted    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.transaction]  Transaction     [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)    [options.silent=false]  Boolean  If true, the updatedAt timestamp will not be updated.", 
            "title": "destroy([options={}]) -&gt; Promise.&lt;undefined&gt;"
        }, 
        {
            "location": "/api/instance/#restoreoptions-promiseundefined", 
            "text": "View code  Restore the row corresponding to this instance. Only available for paranoid models.  Params:     Name  Type  Description      [options={}]  Object     [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.transaction]  Transaction", 
            "title": "restore([options={}]) -&gt; Promise.&lt;undefined&gt;"
        }, 
        {
            "location": "/api/instance/#incrementfields-options-promisethis", 
            "text": "View code  Increment the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a  SET column = column + X  query. To get the correct value after an increment into the Instance you should do a reload.  instance.increment('number') // increment number by 1\ninstance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2\ninstance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.\n                                                       // `by` is ignored, since each column has its own value  See:   Instance#reload   Params:     Name  Type  Description      fields  String   Array   Object  If a string is provided, that column is incremented by the value of  by  given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.    [options]  Object     [options.by=1]  Integer  The number to increment by    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.transaction]  Transaction     [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)", 
            "title": "increment(fields, [options]) -&gt; Promise.&lt;this&gt;"
        }, 
        {
            "location": "/api/instance/#decrementfields-options-promise", 
            "text": "View code  Decrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a  SET column = column - X  query. To get the correct value after an decrement into the Instance you should do a reload.  instance.decrement('number') // decrement number by 1\ninstance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2\ninstance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.\n                                                       // `by` is ignored, since each column has its own value  See:   Instance#reload   Params:     Name  Type  Description      fields  String   Array   Object  If a string is provided, that column is decremented by the value of  by  given in options. If an array is provided, the same is true for each column. If and object is provided, each column is decremented by the value given    [options]  Object     [options.by=1]  Integer  The number to decrement by    [options.logging=false]  Function  A function that gets executed while running the query to log the sql.    [options.transaction]  Transaction     [options.searchPath=DEFAULT]  String  An optional parameter to specify the schema search_path (Postgres only)", 
            "title": "decrement(fields, [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/instance/#equalsother-boolean", 
            "text": "View code  Check whether all values of this and  other  Instance are the same  Params:     Name  Type  Description      other  Instance", 
            "title": "equals(other) -&gt; Boolean"
        }, 
        {
            "location": "/api/instance/#equalsoneofothers-boolean", 
            "text": "View code  Check if this is equal to one of  others  by calling equals  Params:     Name  Type  Description      others  Array", 
            "title": "equalsOneOf(others) -&gt; Boolean"
        }, 
        {
            "location": "/api/instance/#tojson-object", 
            "text": "View code  Convert the instance to a JSON representation. Proxies to calling  get  with no keys. This means get all values gotten from the DB, and apply all custom getters.  See:   Instance#get    This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "toJSON() -&gt; object"
        }, 
        {
            "location": "/api/associations/", 
            "text": "Mixin Associations\n\n\nView code\n\n\nCreating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target).\n\n\n\n\nhasOne - adds a foreign key to the target and singular association mixins to the source.\n\n\nbelongsTo - add a foreign key and singular association mixins to the source.\n\n\nhasMany - adds a foreign key to target and plural association mixins to the source.\n\n\nbelongsToMany - creates an N:M association with a join table and adds plural association mixins to the source. The junction table is created with sourceId and targetId.\n\n\n\n\nCreating an association will add a foreign key constraint to the attributes. All associations use \nCASCADE\n on update and \nSET NULL\n on delete, except for n:m, which also uses \nCASCADE\n on delete.\n\n\nWhen creating associations, you can provide an alias, via the \nas\n option. This is useful if the same model is associated twice, or you want your association to be called something other than the name of the target model.\n\n\nAs an example, consider the case where users have many pictures, one of which is their profile picture. All pictures have a \nuserId\n, but in addition the user model also has a \nprofilePictureId\n, to be able to easily load the user's profile picture.\n\n\nUser.hasMany(Picture)\nUser.belongsTo(Picture, { as: 'ProfilePicture', constraints: false })\n\nuser.getPictures() // gets you all pictures\nuser.getProfilePicture() // gets you only the profile picture\n\nUser.findAll({\n  where: ...,\n  include: [\n    { model: Picture }, // load all pictures\n    { model: Picture, as: 'ProfilePicture' }, // load the profile picture. Notice that the spelling must be the exact same as the one in the association\n  ]\n})\n\n\n\n\nTo get full control over the foreign key column added by sequelize, you can use the \nforeignKey\n option. It can either be a string, that specifies the name, or and object type definition,\nequivalent to those passed to \nsequelize.define\n.\n\n\nUser.hasMany(Picture, { foreignKey: 'uid' })\n\n\n\n\nThe foreign key column in Picture will now be called \nuid\n instead of the default \nuserId\n.\n\n\nUser.hasMany(Picture, {\n  foreignKey: {\n    name: 'uid',\n    allowNull: false\n  }\n})\n\n\n\n\nThis specifies that the \nuid\n column cannot be null. In most cases this will already be covered by the foreign key constraints, which sequelize creates automatically, but can be useful in case where the foreign keys are disabled, e.g. due to circular references (see \nconstraints: false\n below).\n\n\nWhen fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to \nfind\n/\nfindAll\n. To only get pictures in JPG, you can do:\n\n\nuser.getPictures({\n  where: {\n    format: 'jpg'\n  }\n})\n\n\n\n\nThere are several ways to update and add new associations. Continuing with our example of users and pictures:\n\n\nuser.addPicture(p) // Add a single picture\nuser.setPictures([p1, p2]) // Associate user with ONLY these two picture, all other associations will be deleted\nuser.addPictures([p1, p2]) // Associate user with these two pictures, but don't touch any current associations\n\n\n\n\nYou don't have to pass in a complete object to the association functions, if your associated model has a single primary key:\n\n\nuser.addPicture(req.query.pid) // Here pid is just an integer, representing the primary key of the picture\n\n\n\n\nIn the example above we have specified that a user belongs to his profile picture. Conceptually, this might not make sense, but since we want to add the foreign key to the user model this is the way to do it.\n\n\nNote how we also specified \nconstraints: false\n for profile picture. This is because we add a foreign key from user to picture (profilePictureId), and from picture to user (userId). If we were to add foreign keys to both, it would create a cyclic dependency, and sequelize would not know which table to create first, since user depends on picture, and picture depends on user. These kinds of problems are detected by sequelize before the models are synced to the database, and you will get an error along the lines of \nError: Cyclic dependency found. 'users' is dependent of itself\n. If you encounter this, you should either disable some constraints, or rethink your associations completely.\n\n\n\n\n\n\nhasOne(target, [options])\n\n\nView code\n\n\nCreates an association between this (the source) and the provided target. The foreign key is added on the target.\n\n\nExample: \nUser.hasOne(Profile)\n. This will add userId to the profile table.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nModel\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\n\n\n\n\n\n\n[options.hooks=false]\n\n\nboolean\n\n\nSet to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if \nUser.hasOne(Profile, {onDelete: 'cascade', hooks:true})\n, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n\n\n\n\n\n\n[options.as]\n\n\nstring\n\n\nThe alias of this model, in singular form. See also the \nname\n option passed to \nsequelize.define\n. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target\n\n\n\n\n\n\n[options.foreignKey]\n\n\nstring \n object\n\n\nThe name of the foreign key in the target table or an object representing the type definition for the foreign column (see \nSequelize.define\n for syntax). When using an object, you can add a \nname\n property to set the name of the column. Defaults to the name of source + primary key of source\n\n\n\n\n\n\n[options.onDelete='SET\nNULL \n CASCADE']\n\n\nstring\n\n\nSET NULL if foreignKey allows nulls, CASCADE if otherwise\n\n\n\n\n\n\n[options.onUpdate='CASCADE']\n\n\nstring\n\n\n\n\n\n\n\n\n[options.constraints=true]\n\n\nboolean\n\n\nShould on update and on delete constraints be enabled on the foreign key.\n\n\n\n\n\n\n\n\n\n\n\n\nbelongsTo(target, [options])\n\n\nView code\n\n\nCreates an association between this (the source) and the provided target. The foreign key is added on the source.\n\n\nExample: \nProfile.belongsTo(User)\n. This will add userId to the profile table.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nModel\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\n\n\n\n\n\n\n[options.hooks=false]\n\n\nboolean\n\n\nSet to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if \nUser.hasOne(Profile, {onDelete: 'cascade', hooks:true})\n, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n\n\n\n\n\n\n[options.as]\n\n\nstring\n\n\nThe alias of this model, in singular form. See also the \nname\n option passed to \nsequelize.define\n. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target\n\n\n\n\n\n\n[options.foreignKey]\n\n\nstring \n object\n\n\nThe name of the foreign key in the source table or an object representing the type definition for the foreign column (see \nSequelize.define\n for syntax). When using an object, you can add a \nname\n property to set the name of the column. Defaults to the name of target + primary key of target\n\n\n\n\n\n\n[options.targetKey]\n\n\nstring\n\n\nThe name of the field to use as the key for the association in the target table. Defaults to the primary key of the target table\n\n\n\n\n\n\n[options.onDelete='SET\nNULL \n NO\nACTION']\n\n\nstring\n\n\nSET NULL if foreignKey allows nulls, NO ACTION if otherwise\n\n\n\n\n\n\n[options.onUpdate='CASCADE']\n\n\nstring\n\n\n\n\n\n\n\n\n[options.constraints=true]\n\n\nboolean\n\n\nShould on update and on delete constraints be enabled on the foreign key.\n\n\n\n\n\n\n\n\n\n\n\n\nhasMany(target, [options])\n\n\nView code\n\n\nCreates a 1:m association between this (the source) and the provided target. The foreign key is added on the target.\n\n\nExample: \nUser.hasMany(Profile)\n. This will add userId to the profile table.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nModel\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\n\n\n\n\n\n\n[options.hooks=false]\n\n\nboolean\n\n\nSet to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if \nUser.hasOne(Profile, {onDelete: 'cascade', hooks:true})\n, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n\n\n\n\n\n\n[options.as]\n\n\nstring \n object\n\n\nThe alias of this model. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with \nplural\n and \nsingular\n keys. See also the \nname\n option passed to \nsequelize.define\n. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target\n\n\n\n\n\n\n[options.foreignKey]\n\n\nstring \n object\n\n\nThe name of the foreign key in the target table or an object representing the type definition for the foreign column (see \nSequelize.define\n for syntax). When using an object, you can add a \nname\n property to set the name of the column. Defaults to the name of source + primary key of source\n\n\n\n\n\n\n[options.scope]\n\n\nobject\n\n\nA key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)\n\n\n\n\n\n\n[options.onDelete='SET\nNULL \n CASCADE']\n\n\nstring\n\n\nSET NULL if foreignKey allows nulls, CASCADE if otherwise\n\n\n\n\n\n\n[options.onUpdate='CASCADE']\n\n\nstring\n\n\n\n\n\n\n\n\n[options.constraints=true]\n\n\nboolean\n\n\nShould on update and on delete constraints be enabled on the foreign key.\n\n\n\n\n\n\n\n\n\n\n\n\nbelongsToMany(target, [options])\n\n\nView code\n\n\nCreate an N:M association with a join table.\n\n\nUser.belongsToMany(Project, { through: 'UserProjects' })\nProject.belongsToMany(User, { through: 'UserProjects' })\n\n\n\n\nDefining \nthrough\n is required. Sequelize would previously attempt to auto generate names but that would not always lead to the most logical setups.\n\n\nIf you define a through model with custom attributes, these attributes can be set when adding / setting new associations in two ways. Consider users and projects from before with a join table that stores whether the project has been started yet:\n\n\nvar UserProjects = sequelize.define('UserProjects', {\n  started: Sequelize.BOOLEAN\n})\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })\n\n\n\n\njan.addProject(homework, { started: false }) // The homework project is not started yet\njan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started\n\n\n\n\nIf you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n\n\np1.UserProjects = {\n  started: true\n}\nuser.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.\n\n\n\n\nSimilarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n\n\nuser.getProjects().then(function (projects) {\n  var p1 = projects[0]\n  p1.UserProjects.started // Is this project started yet?\n})\n\n\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nModel\n\n\n\n\n\n\n\n\n[options]\n\n\nobject\n\n\n\n\n\n\n\n\n[options.hooks=false]\n\n\nboolean\n\n\nSet to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if \nUser.hasOne(Profile, {onDelete: 'cascade', hooks:true})\n, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks\n\n\n\n\n\n\n[options.through]\n\n\nModel \n string \n object\n\n\nThe name of the table that is used to join source and target in n:m associations. Can also be a sequelize model if you want to define the junction table yourself and add extra attributes to it.\n\n\n\n\n\n\n[options.through.model]\n\n\nModel\n\n\nThe model used to join both sides of the N:M association.\n\n\n\n\n\n\n[options.through.scope]\n\n\nobject\n\n\nA key/value set that will be used for association create and find defaults on the through model. (Remember to add the attributes to the through model)\n\n\n\n\n\n\n[options.through.unique=true]\n\n\nboolean\n\n\nIf true a unique key will be generated from the foreign keys used (might want to turn this off and create specific unique keys when using scopes)\n\n\n\n\n\n\n[options.as]\n\n\nstring \n object\n\n\nThe alias of this association. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with \nplural\n and \nsingular\n keys. See also the \nname\n option passed to \nsequelize.define\n. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target\n\n\n\n\n\n\n[options.foreignKey]\n\n\nstring \n object\n\n\nThe name of the foreign key in the join table (representing the source model) or an object representing the type definition for the foreign column (see \nSequelize.define\n for syntax). When using an object, you can add a \nname\n property to set the name of the column. Defaults to the name of source + primary key of source\n\n\n\n\n\n\n[options.otherKey]\n\n\nstring \n object\n\n\nThe name of the foreign key in the join table (representing the target model) or an object representing the type definition for the other column (see \nSequelize.define\n for syntax). When using an object, you can add a \nname\n property to set the name of the column. Defaults to the name of target + primary key of target\n\n\n\n\n\n\n[options.scope]\n\n\nobject\n\n\nA key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)\n\n\n\n\n\n\n[options.timestamps=sequelize.options.timestamps]\n\n\nboolean\n\n\nShould the join model have timestamps\n\n\n\n\n\n\n[options.onDelete='SET\nNULL \n CASCADE']\n\n\nstring\n\n\nCascade if this is a n:m, and set null if it is a 1:m\n\n\n\n\n\n\n[options.onUpdate='CASCADE']\n\n\nstring\n\n\n\n\n\n\n\n\n[options.constraints=true]\n\n\nboolean\n\n\nShould on update and on delete constraints be enabled on the foreign key.\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Overview"
        }, 
        {
            "location": "/api/associations/#mixin-associations", 
            "text": "View code  Creating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target).   hasOne - adds a foreign key to the target and singular association mixins to the source.  belongsTo - add a foreign key and singular association mixins to the source.  hasMany - adds a foreign key to target and plural association mixins to the source.  belongsToMany - creates an N:M association with a join table and adds plural association mixins to the source. The junction table is created with sourceId and targetId.   Creating an association will add a foreign key constraint to the attributes. All associations use  CASCADE  on update and  SET NULL  on delete, except for n:m, which also uses  CASCADE  on delete.  When creating associations, you can provide an alias, via the  as  option. This is useful if the same model is associated twice, or you want your association to be called something other than the name of the target model.  As an example, consider the case where users have many pictures, one of which is their profile picture. All pictures have a  userId , but in addition the user model also has a  profilePictureId , to be able to easily load the user's profile picture.  User.hasMany(Picture)\nUser.belongsTo(Picture, { as: 'ProfilePicture', constraints: false })\n\nuser.getPictures() // gets you all pictures\nuser.getProfilePicture() // gets you only the profile picture\n\nUser.findAll({\n  where: ...,\n  include: [\n    { model: Picture }, // load all pictures\n    { model: Picture, as: 'ProfilePicture' }, // load the profile picture. Notice that the spelling must be the exact same as the one in the association\n  ]\n})  To get full control over the foreign key column added by sequelize, you can use the  foreignKey  option. It can either be a string, that specifies the name, or and object type definition,\nequivalent to those passed to  sequelize.define .  User.hasMany(Picture, { foreignKey: 'uid' })  The foreign key column in Picture will now be called  uid  instead of the default  userId .  User.hasMany(Picture, {\n  foreignKey: {\n    name: 'uid',\n    allowNull: false\n  }\n})  This specifies that the  uid  column cannot be null. In most cases this will already be covered by the foreign key constraints, which sequelize creates automatically, but can be useful in case where the foreign keys are disabled, e.g. due to circular references (see  constraints: false  below).  When fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to  find / findAll . To only get pictures in JPG, you can do:  user.getPictures({\n  where: {\n    format: 'jpg'\n  }\n})  There are several ways to update and add new associations. Continuing with our example of users and pictures:  user.addPicture(p) // Add a single picture\nuser.setPictures([p1, p2]) // Associate user with ONLY these two picture, all other associations will be deleted\nuser.addPictures([p1, p2]) // Associate user with these two pictures, but don't touch any current associations  You don't have to pass in a complete object to the association functions, if your associated model has a single primary key:  user.addPicture(req.query.pid) // Here pid is just an integer, representing the primary key of the picture  In the example above we have specified that a user belongs to his profile picture. Conceptually, this might not make sense, but since we want to add the foreign key to the user model this is the way to do it.  Note how we also specified  constraints: false  for profile picture. This is because we add a foreign key from user to picture (profilePictureId), and from picture to user (userId). If we were to add foreign keys to both, it would create a cyclic dependency, and sequelize would not know which table to create first, since user depends on picture, and picture depends on user. These kinds of problems are detected by sequelize before the models are synced to the database, and you will get an error along the lines of  Error: Cyclic dependency found. 'users' is dependent of itself . If you encounter this, you should either disable some constraints, or rethink your associations completely.", 
            "title": "Mixin Associations"
        }, 
        {
            "location": "/api/associations/#hasonetarget-options", 
            "text": "View code  Creates an association between this (the source) and the provided target. The foreign key is added on the target.  Example:  User.hasOne(Profile) . This will add userId to the profile table.  Params:     Name  Type  Description      target  Model     [options]  object     [options.hooks=false]  boolean  Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if  User.hasOne(Profile, {onDelete: 'cascade', hooks:true}) , the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks    [options.as]  string  The alias of this model, in singular form. See also the  name  option passed to  sequelize.define . If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target    [options.foreignKey]  string   object  The name of the foreign key in the target table or an object representing the type definition for the foreign column (see  Sequelize.define  for syntax). When using an object, you can add a  name  property to set the name of the column. Defaults to the name of source + primary key of source    [options.onDelete='SET NULL   CASCADE']  string  SET NULL if foreignKey allows nulls, CASCADE if otherwise    [options.onUpdate='CASCADE']  string     [options.constraints=true]  boolean  Should on update and on delete constraints be enabled on the foreign key.", 
            "title": "hasOne(target, [options])"
        }, 
        {
            "location": "/api/associations/#belongstotarget-options", 
            "text": "View code  Creates an association between this (the source) and the provided target. The foreign key is added on the source.  Example:  Profile.belongsTo(User) . This will add userId to the profile table.  Params:     Name  Type  Description      target  Model     [options]  object     [options.hooks=false]  boolean  Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if  User.hasOne(Profile, {onDelete: 'cascade', hooks:true}) , the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks    [options.as]  string  The alias of this model, in singular form. See also the  name  option passed to  sequelize.define . If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target    [options.foreignKey]  string   object  The name of the foreign key in the source table or an object representing the type definition for the foreign column (see  Sequelize.define  for syntax). When using an object, you can add a  name  property to set the name of the column. Defaults to the name of target + primary key of target    [options.targetKey]  string  The name of the field to use as the key for the association in the target table. Defaults to the primary key of the target table    [options.onDelete='SET NULL   NO ACTION']  string  SET NULL if foreignKey allows nulls, NO ACTION if otherwise    [options.onUpdate='CASCADE']  string     [options.constraints=true]  boolean  Should on update and on delete constraints be enabled on the foreign key.", 
            "title": "belongsTo(target, [options])"
        }, 
        {
            "location": "/api/associations/#hasmanytarget-options", 
            "text": "View code  Creates a 1:m association between this (the source) and the provided target. The foreign key is added on the target.  Example:  User.hasMany(Profile) . This will add userId to the profile table.  Params:     Name  Type  Description      target  Model     [options]  object     [options.hooks=false]  boolean  Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if  User.hasOne(Profile, {onDelete: 'cascade', hooks:true}) , the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks    [options.as]  string   object  The alias of this model. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with  plural  and  singular  keys. See also the  name  option passed to  sequelize.define . If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target    [options.foreignKey]  string   object  The name of the foreign key in the target table or an object representing the type definition for the foreign column (see  Sequelize.define  for syntax). When using an object, you can add a  name  property to set the name of the column. Defaults to the name of source + primary key of source    [options.scope]  object  A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)    [options.onDelete='SET NULL   CASCADE']  string  SET NULL if foreignKey allows nulls, CASCADE if otherwise    [options.onUpdate='CASCADE']  string     [options.constraints=true]  boolean  Should on update and on delete constraints be enabled on the foreign key.", 
            "title": "hasMany(target, [options])"
        }, 
        {
            "location": "/api/associations/#belongstomanytarget-options", 
            "text": "View code  Create an N:M association with a join table.  User.belongsToMany(Project, { through: 'UserProjects' })\nProject.belongsToMany(User, { through: 'UserProjects' })  Defining  through  is required. Sequelize would previously attempt to auto generate names but that would not always lead to the most logical setups.  If you define a through model with custom attributes, these attributes can be set when adding / setting new associations in two ways. Consider users and projects from before with a join table that stores whether the project has been started yet:  var UserProjects = sequelize.define('UserProjects', {\n  started: Sequelize.BOOLEAN\n})\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })  jan.addProject(homework, { started: false }) // The homework project is not started yet\njan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started  If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:  p1.UserProjects = {\n  started: true\n}\nuser.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.  Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.  user.getProjects().then(function (projects) {\n  var p1 = projects[0]\n  p1.UserProjects.started // Is this project started yet?\n})  Params:     Name  Type  Description      target  Model     [options]  object     [options.hooks=false]  boolean  Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if  User.hasOne(Profile, {onDelete: 'cascade', hooks:true}) , the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks    [options.through]  Model   string   object  The name of the table that is used to join source and target in n:m associations. Can also be a sequelize model if you want to define the junction table yourself and add extra attributes to it.    [options.through.model]  Model  The model used to join both sides of the N:M association.    [options.through.scope]  object  A key/value set that will be used for association create and find defaults on the through model. (Remember to add the attributes to the through model)    [options.through.unique=true]  boolean  If true a unique key will be generated from the foreign keys used (might want to turn this off and create specific unique keys when using scopes)    [options.as]  string   object  The alias of this association. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with  plural  and  singular  keys. See also the  name  option passed to  sequelize.define . If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target    [options.foreignKey]  string   object  The name of the foreign key in the join table (representing the source model) or an object representing the type definition for the foreign column (see  Sequelize.define  for syntax). When using an object, you can add a  name  property to set the name of the column. Defaults to the name of source + primary key of source    [options.otherKey]  string   object  The name of the foreign key in the join table (representing the target model) or an object representing the type definition for the other column (see  Sequelize.define  for syntax). When using an object, you can add a  name  property to set the name of the column. Defaults to the name of target + primary key of target    [options.scope]  object  A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)    [options.timestamps=sequelize.options.timestamps]  boolean  Should the join model have timestamps    [options.onDelete='SET NULL   CASCADE']  string  Cascade if this is a n:m, and set null if it is a 1:m    [options.onUpdate='CASCADE']  string     [options.constraints=true]  boolean  Should on update and on delete constraints be enabled on the foreign key.      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "belongsToMany(target, [options])"
        }, 
        {
            "location": "/api/associations/belongs-to/", 
            "text": "Mixin BelongsTo\n\n\nView code\n\n\nOne-to-one association\n\n\nIn the API reference below, replace \nAssocation\n with the actual name of your association, e.g. for \nUser.belongsTo(Project)\n the getter will be \nuser.getProject()\n.\n\n\n\n\n\n\ngetAssociation([options])\n -\n \nPromise.\nInstance\n\n\nView code\n\n\nGet the associated instance.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false.\n\n\n\n\n\n\n[options.schema]\n\n\nString\n\n\nApply a schema on the related model\n\n\n\n\n\n\n\n\n\n\n\n\nsetAssociation([newAssociation], [options])\n -\n \nPromise\n\n\nView code\n\n\nSet the associated model.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociation]\n\n\nInstance \n String \n Number\n\n\nAn instance or the primary key of an instance to associate with this. Pass \nnull\n or \nundefined\n to remove the association.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthis.save\n\n\n\n\n\n\n[options.save=true]\n\n\nBoolean\n\n\nSkip saving this after setting the foreign key if false.\n\n\n\n\n\n\n\n\n\n\n\n\ncreateAssociation([values], [options])\n -\n \nPromise\n\n\nView code\n\n\nCreate a new instance of the associated model and associate it with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[values]\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.create\n and setAssociation.\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "BelongsTo (1:1)"
        }, 
        {
            "location": "/api/associations/belongs-to/#mixin-belongsto", 
            "text": "View code  One-to-one association  In the API reference below, replace  Assocation  with the actual name of your association, e.g. for  User.belongsTo(Project)  the getter will be  user.getProject() .", 
            "title": "Mixin BelongsTo"
        }, 
        {
            "location": "/api/associations/belongs-to/#getassociationoptions-promiseinstance", 
            "text": "View code  Get the associated instance.  Params:     Name  Type  Description      [options]  Object     [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false.    [options.schema]  String  Apply a schema on the related model", 
            "title": "getAssociation([options]) -&gt; Promise.&lt;Instance&gt;"
        }, 
        {
            "location": "/api/associations/belongs-to/#setassociationnewassociation-options-promise", 
            "text": "View code  Set the associated model.  Params:     Name  Type  Description      [newAssociation]  Instance   String   Number  An instance or the primary key of an instance to associate with this. Pass  null  or  undefined  to remove the association.    [options]  Object  Options passed to  this.save    [options.save=true]  Boolean  Skip saving this after setting the foreign key if false.", 
            "title": "setAssociation([newAssociation], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to/#createassociationvalues-options-promise", 
            "text": "View code  Create a new instance of the associated model and associate it with this.  Params:     Name  Type  Description      [values]  Object     [options]  Object  Options passed to  target.create  and setAssociation.      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "createAssociation([values], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-one/", 
            "text": "Mixin HasOne\n\n\nView code\n\n\nOne-to-one association\n\n\nIn the API reference below, replace \nAssociation\n with the actual name of your association, e.g. for \nUser.hasOne(Project)\n the getter will be \nuser.getProject()\n.\nThis is almost the same as \nbelongsTo\n with one exception. The foreign key will be defined on the target model.\n\n\n\n\n\n\ngetAssociation([options])\n -\n \nPromise.\nInstance\n\n\nView code\n\n\nGet the associated instance.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false\n\n\n\n\n\n\n[options.schema]\n\n\nString\n\n\nApply a schema on the related model\n\n\n\n\n\n\n\n\n\n\n\n\nsetAssociation([newAssociation], [options])\n -\n \nPromise\n\n\nView code\n\n\nSet the associated model.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociation]\n\n\nInstance \n String \n Number\n\n\nAn instance or the primary key of an instance to associate with this. Pass \nnull\n or \nundefined\n to remove the association.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to getAssociation and \ntarget.save\n\n\n\n\n\n\n\n\n\n\n\n\ncreateAssociation([values], [options])\n -\n \nPromise\n\n\nView code\n\n\nCreate a new instance of the associated model and associate it with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[values]\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.create\n and setAssociation.\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "HasOne (1:1)"
        }, 
        {
            "location": "/api/associations/has-one/#mixin-hasone", 
            "text": "View code  One-to-one association  In the API reference below, replace  Association  with the actual name of your association, e.g. for  User.hasOne(Project)  the getter will be  user.getProject() .\nThis is almost the same as  belongsTo  with one exception. The foreign key will be defined on the target model.", 
            "title": "Mixin HasOne"
        }, 
        {
            "location": "/api/associations/has-one/#getassociationoptions-promiseinstance", 
            "text": "View code  Get the associated instance.  Params:     Name  Type  Description      [options]  Object     [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false    [options.schema]  String  Apply a schema on the related model", 
            "title": "getAssociation([options]) -&gt; Promise.&lt;Instance&gt;"
        }, 
        {
            "location": "/api/associations/has-one/#setassociationnewassociation-options-promise", 
            "text": "View code  Set the associated model.  Params:     Name  Type  Description      [newAssociation]  Instance   String   Number  An instance or the primary key of an instance to associate with this. Pass  null  or  undefined  to remove the association.    [options]  Object  Options passed to getAssociation and  target.save", 
            "title": "setAssociation([newAssociation], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-one/#createassociationvalues-options-promise", 
            "text": "View code  Create a new instance of the associated model and associate it with this.  Params:     Name  Type  Description      [values]  Object     [options]  Object  Options passed to  target.create  and setAssociation.      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "createAssociation([values], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/", 
            "text": "Mixin HasMany\n\n\nView code\n\n\nOne-to-many association\n\n\nIn the API reference below, replace \nAssociation(s)\n with the actual name of your association, e.g. for \nUser.hasMany(Project)\n the getter will be \nuser.getProjects()\n.\n\n\n\n\n\n\ngetAssociations([options])\n -\n \nPromise.\nArray.\nInstance\n\n\nView code\n\n\nGet everything currently associated with this, using an optional where clause.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nAn optional where clause to limit the associated models\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false\n\n\n\n\n\n\n[options.schema]\n\n\nString\n\n\nApply a schema on the related model\n\n\n\n\n\n\n\n\n\n\n\n\nsetAssociations([newAssociations], [options])\n -\n \nPromise\n\n\nView code\n\n\nSet the associated models by passing an array of instances or their primary keys. Everything that is not in the passed array will be un-associated\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociations]\n\n\nArray.\nInstance \n String \n Number\n\n\nAn array of instances or primary key of instances to associate with this. Pass \nnull\n or \nundefined\n to remove all associations.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.findAll\n and \nupdate\n.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model\n\n\n\n\n\n\n\n\n\n\n\n\naddAssociations([newAssociations], [options])\n -\n \nPromise\n\n\nView code\n\n\nAssociate several instances with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociations]\n\n\nArray.\nInstance \n String \n Number\n\n\nAn array of instances or primary key of instances to associate with this.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.update\n.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model.\n\n\n\n\n\n\n\n\n\n\n\n\naddAssociation([newAssociation], [options])\n -\n \nPromise\n\n\nView code\n\n\nAssociate one instance with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociation]\n\n\nInstance \n String \n Number\n\n\nAn instance or primary key of instance to associate with this.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.update\n.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model.\n\n\n\n\n\n\n\n\n\n\n\n\ncreateAssociation([values], [options])\n -\n \nPromise\n\n\nView code\n\n\nCreate a new instance of the associated model and associate it with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[values]\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.create\n.\n\n\n\n\n\n\n\n\n\n\n\n\nremoveAssociation([oldAssociated], [options])\n -\n \nPromise\n\n\nView code\n\n\nUn-associate the instance.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[oldAssociated]\n\n\nInstance \n String \n Number\n\n\nCan be an Instance or its primary key\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \ntarget.update\n\n\n\n\n\n\n\n\n\n\n\n\nremoveAssociations([oldAssociatedArray], [options])\n -\n \nPromise\n\n\nView code\n\n\nUn-associate several instances.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[oldAssociatedArray]\n\n\nArray.\nInstance \n String \n Number\n\n\nCan be an array of instances or their primary keys\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.destroy\n\n\n\n\n\n\n\n\n\n\n\n\nhasAssociation([instance], [options])\n -\n \nPromise\n\n\nView code\n\n\nCheck if an instance is associated with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[instance]\n\n\nInstance \n String \n Number\n\n\nCan be an Instance or its primary key\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to getAssociations\n\n\n\n\n\n\n\n\n\n\n\n\nhasAssociations([instances], [options])\n -\n \nPromise\n\n\nView code\n\n\nCheck if all instances are associated with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[instances]\n\n\nArray.\nInstance \n String \n Number\n\n\nCan be an array of instances or their primary keys\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to getAssociations\n\n\n\n\n\n\n\n\n\n\n\n\ncountAssociations([options])\n -\n \nPromise.\nInt\n\n\nView code\n\n\nCount everything currently associated with this, using an optional where clause.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nAn optional where clause to limit the associated models\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "HasMany (1:m)"
        }, 
        {
            "location": "/api/associations/has-many/#mixin-hasmany", 
            "text": "View code  One-to-many association  In the API reference below, replace  Association(s)  with the actual name of your association, e.g. for  User.hasMany(Project)  the getter will be  user.getProjects() .", 
            "title": "Mixin HasMany"
        }, 
        {
            "location": "/api/associations/has-many/#getassociationsoptions-promisearrayinstance", 
            "text": "View code  Get everything currently associated with this, using an optional where clause.  Params:     Name  Type  Description      [options]  Object     [options.where]  Object  An optional where clause to limit the associated models    [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false    [options.schema]  String  Apply a schema on the related model", 
            "title": "getAssociations([options]) -&gt; Promise.&lt;Array.&lt;Instance&gt;&gt;"
        }, 
        {
            "location": "/api/associations/has-many/#setassociationsnewassociations-options-promise", 
            "text": "View code  Set the associated models by passing an array of instances or their primary keys. Everything that is not in the passed array will be un-associated  Params:     Name  Type  Description      [newAssociations]  Array. Instance   String   Number  An array of instances or primary key of instances to associate with this. Pass  null  or  undefined  to remove all associations.    [options]  Object  Options passed to  target.findAll  and  update .    [options.validate]  Object  Run validation for the join model", 
            "title": "setAssociations([newAssociations], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#addassociationsnewassociations-options-promise", 
            "text": "View code  Associate several instances with this.  Params:     Name  Type  Description      [newAssociations]  Array. Instance   String   Number  An array of instances or primary key of instances to associate with this.    [options]  Object  Options passed to  target.update .    [options.validate]  Object  Run validation for the join model.", 
            "title": "addAssociations([newAssociations], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#addassociationnewassociation-options-promise", 
            "text": "View code  Associate one instance with this.  Params:     Name  Type  Description      [newAssociation]  Instance   String   Number  An instance or primary key of instance to associate with this.    [options]  Object  Options passed to  target.update .    [options.validate]  Object  Run validation for the join model.", 
            "title": "addAssociation([newAssociation], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#createassociationvalues-options-promise", 
            "text": "View code  Create a new instance of the associated model and associate it with this.  Params:     Name  Type  Description      [values]  Object     [options]  Object  Options passed to  target.create .", 
            "title": "createAssociation([values], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#removeassociationoldassociated-options-promise", 
            "text": "View code  Un-associate the instance.  Params:     Name  Type  Description      [oldAssociated]  Instance   String   Number  Can be an Instance or its primary key    [options]  Object  Options passed to  target.update", 
            "title": "removeAssociation([oldAssociated], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#removeassociationsoldassociatedarray-options-promise", 
            "text": "View code  Un-associate several instances.  Params:     Name  Type  Description      [oldAssociatedArray]  Array. Instance   String   Number  Can be an array of instances or their primary keys    [options]  Object  Options passed to  through.destroy", 
            "title": "removeAssociations([oldAssociatedArray], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#hasassociationinstance-options-promise", 
            "text": "View code  Check if an instance is associated with this.  Params:     Name  Type  Description      [instance]  Instance   String   Number  Can be an Instance or its primary key    [options]  Object  Options passed to getAssociations", 
            "title": "hasAssociation([instance], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#hasassociationsinstances-options-promise", 
            "text": "View code  Check if all instances are associated with this.  Params:     Name  Type  Description      [instances]  Array. Instance   String   Number  Can be an array of instances or their primary keys    [options]  Object  Options passed to getAssociations", 
            "title": "hasAssociations([instances], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/has-many/#countassociationsoptions-promiseint", 
            "text": "View code  Count everything currently associated with this, using an optional where clause.  Params:     Name  Type  Description      [options]  Object     [options.where]  Object  An optional where clause to limit the associated models    [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "countAssociations([options]) -&gt; Promise.&lt;Int&gt;"
        }, 
        {
            "location": "/api/associations/belongs-to-many/", 
            "text": "Mixin BelongsToMany\n\n\nView code\n\n\nMany-to-many association with a join table.\n\n\nWhen the join table has additional attributes, these can be passed in the options object:\n\n\nUserProject = sequelize.define('user_project', {\n  role: Sequelize.STRING\n});\nUser.belongsToMany(Project, { through: UserProject });\nProject.belongsToMany(User, { through: UserProject });\n// through is required!\n\nuser.addProject(project, { role: 'manager', transaction: t });\n\n\n\n\nAll methods allow you to pass either a persisted instance, its primary key, or a mixture:\n\n\nProject.create({ id: 11 }).then(function (project) {\n  user.addProjects([project, 12]);\n});\n\n\n\n\nIn the API reference below, replace \nAssocation(s)\n with the actual name of your association, e.g. for \nUser.belongsToMany(Project)\n the getter will be \nuser.getProjects()\n.\n\n\n\n\n\n\ngetAssociations([options])\n -\n \nPromise.\nArray.\nInstance\n\n\nView code\n\n\nGet everything currently associated with this, using an optional where clause.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nAn optional where clause to limit the associated models\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false\n\n\n\n\n\n\n[options.schema]\n\n\nString\n\n\nApply a schema on the related model\n\n\n\n\n\n\n\n\n\n\n\n\nsetAssociations([newAssociations], [options])\n -\n \nPromise\n\n\nView code\n\n\nSet the associated models by passing an array of instances or their primary keys. Everything that it not in the passed array will be un-associated.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociations]\n\n\nArray.\nInstance \n String \n Number\n\n\nAn array of instances or primary key of instances to associate with this. Pass \nnull\n or \nundefined\n to remove all associations.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.findAll\n, \nbulkCreate\n, \nupdate\n and \ndestroy\n. Can also hold additional attributes for the join table\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model\n\n\n\n\n\n\n\n\n\n\n\n\naddAssociations([newAssociations], [options])\n -\n \nPromise\n\n\nView code\n\n\nAssociate several instances with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociations]\n\n\nArray.\nInstance \n String \n Number\n\n\nAn array of instances or primary key of instances to associate with this.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.findAll\n, \nbulkCreate\n and \nupdate\n. Can also hold additional attributes for the join table.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model.\n\n\n\n\n\n\n\n\n\n\n\n\naddAssociation([newAssociation], [options])\n -\n \nPromise\n\n\nView code\n\n\nAssociate one instance with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[newAssociation]\n\n\nInstance \n String \n Number\n\n\nAn instance or primary key of instance to associate with this.\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.findAll\n, \nbulkCreate\n and \nupdate\n. Can also hold additional attributes for the join table.\n\n\n\n\n\n\n[options.validate]\n\n\nObject\n\n\nRun validation for the join model.\n\n\n\n\n\n\n\n\n\n\n\n\ncreateAssociation([values], [options])\n -\n \nPromise\n\n\nView code\n\n\nCreate a new instance of the associated model and associate it with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[values]\n\n\nObject\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to create and add. Can also hold additional attributes for the join table\n\n\n\n\n\n\n\n\n\n\n\n\nremoveAssociation([oldAssociated], [options])\n -\n \nPromise\n\n\nView code\n\n\nUn-associate the instance.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[oldAssociated]\n\n\nInstance \n String \n Number\n\n\nCan be an Instance or its primary key\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.destroy\n\n\n\n\n\n\n\n\n\n\n\n\nremoveAssociations([oldAssociated], [options])\n -\n \nPromise\n\n\nView code\n\n\nUn-associate several instances.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[oldAssociated]\n\n\nArray.\nInstance \n String \n Number\n\n\nCan be an array of instances or their primary keys\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to \nthrough.destroy\n\n\n\n\n\n\n\n\n\n\n\n\nhasAssociation([instance], [options])\n -\n \nPromise\n\n\nView code\n\n\nCheck if an instance is associated with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[instance]\n\n\nInstance \n String \n Number\n\n\nCan be an Instance or its primary key\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to getAssociations\n\n\n\n\n\n\n\n\n\n\n\n\nhasAssociations([instances], [options])\n -\n \nPromise\n\n\nView code\n\n\nCheck if all instances are associated with this.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[instances]\n\n\nArray.\nInstance \n String \n Number\n\n\nCan be an array of instances or their primary keys\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\nOptions passed to getAssociations\n\n\n\n\n\n\n\n\n\n\n\n\ncountAssociations([options])\n -\n \nPromise.\nInt\n\n\nView code\n\n\nCount everything currently associated with this, using an optional where clause.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[options]\n\n\nObject\n\n\n\n\n\n\n\n\n[options.where]\n\n\nObject\n\n\nAn optional where clause to limit the associated models\n\n\n\n\n\n\n[options.scope]\n\n\nString \n Boolean\n\n\nApply a scope on the related model, or remove its default scope by passing false\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "BelongsToMany (n:m)"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#mixin-belongstomany", 
            "text": "View code  Many-to-many association with a join table.  When the join table has additional attributes, these can be passed in the options object:  UserProject = sequelize.define('user_project', {\n  role: Sequelize.STRING\n});\nUser.belongsToMany(Project, { through: UserProject });\nProject.belongsToMany(User, { through: UserProject });\n// through is required!\n\nuser.addProject(project, { role: 'manager', transaction: t });  All methods allow you to pass either a persisted instance, its primary key, or a mixture:  Project.create({ id: 11 }).then(function (project) {\n  user.addProjects([project, 12]);\n});  In the API reference below, replace  Assocation(s)  with the actual name of your association, e.g. for  User.belongsToMany(Project)  the getter will be  user.getProjects() .", 
            "title": "Mixin BelongsToMany"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#getassociationsoptions-promisearrayinstance", 
            "text": "View code  Get everything currently associated with this, using an optional where clause.  Params:     Name  Type  Description      [options]  Object     [options.where]  Object  An optional where clause to limit the associated models    [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false    [options.schema]  String  Apply a schema on the related model", 
            "title": "getAssociations([options]) -&gt; Promise.&lt;Array.&lt;Instance&gt;&gt;"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#setassociationsnewassociations-options-promise", 
            "text": "View code  Set the associated models by passing an array of instances or their primary keys. Everything that it not in the passed array will be un-associated.  Params:     Name  Type  Description      [newAssociations]  Array. Instance   String   Number  An array of instances or primary key of instances to associate with this. Pass  null  or  undefined  to remove all associations.    [options]  Object  Options passed to  through.findAll ,  bulkCreate ,  update  and  destroy . Can also hold additional attributes for the join table    [options.validate]  Object  Run validation for the join model", 
            "title": "setAssociations([newAssociations], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#addassociationsnewassociations-options-promise", 
            "text": "View code  Associate several instances with this.  Params:     Name  Type  Description      [newAssociations]  Array. Instance   String   Number  An array of instances or primary key of instances to associate with this.    [options]  Object  Options passed to  through.findAll ,  bulkCreate  and  update . Can also hold additional attributes for the join table.    [options.validate]  Object  Run validation for the join model.", 
            "title": "addAssociations([newAssociations], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#addassociationnewassociation-options-promise", 
            "text": "View code  Associate one instance with this.  Params:     Name  Type  Description      [newAssociation]  Instance   String   Number  An instance or primary key of instance to associate with this.    [options]  Object  Options passed to  through.findAll ,  bulkCreate  and  update . Can also hold additional attributes for the join table.    [options.validate]  Object  Run validation for the join model.", 
            "title": "addAssociation([newAssociation], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#createassociationvalues-options-promise", 
            "text": "View code  Create a new instance of the associated model and associate it with this.  Params:     Name  Type  Description      [values]  Object     [options]  Object  Options passed to create and add. Can also hold additional attributes for the join table", 
            "title": "createAssociation([values], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#removeassociationoldassociated-options-promise", 
            "text": "View code  Un-associate the instance.  Params:     Name  Type  Description      [oldAssociated]  Instance   String   Number  Can be an Instance or its primary key    [options]  Object  Options passed to  through.destroy", 
            "title": "removeAssociation([oldAssociated], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#removeassociationsoldassociated-options-promise", 
            "text": "View code  Un-associate several instances.  Params:     Name  Type  Description      [oldAssociated]  Array. Instance   String   Number  Can be an array of instances or their primary keys    [options]  Object  Options passed to  through.destroy", 
            "title": "removeAssociations([oldAssociated], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#hasassociationinstance-options-promise", 
            "text": "View code  Check if an instance is associated with this.  Params:     Name  Type  Description      [instance]  Instance   String   Number  Can be an Instance or its primary key    [options]  Object  Options passed to getAssociations", 
            "title": "hasAssociation([instance], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#hasassociationsinstances-options-promise", 
            "text": "View code  Check if all instances are associated with this.  Params:     Name  Type  Description      [instances]  Array. Instance   String   Number  Can be an array of instances or their primary keys    [options]  Object  Options passed to getAssociations", 
            "title": "hasAssociations([instances], [options]) -&gt; Promise"
        }, 
        {
            "location": "/api/associations/belongs-to-many/#countassociationsoptions-promiseint", 
            "text": "View code  Count everything currently associated with this, using an optional where clause.  Params:     Name  Type  Description      [options]  Object     [options.where]  Object  An optional where clause to limit the associated models    [options.scope]  String   Boolean  Apply a scope on the related model, or remove its default scope by passing false      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "countAssociations([options]) -&gt; Promise.&lt;Int&gt;"
        }, 
        {
            "location": "/api/hooks/", 
            "text": "Mixin Hooks\n\n\nView code\n\n\nHooks are function that are called before and after  (bulk-) creation/updating/deletion and validation. Hooks can be added to you models in three ways:\n\n\n\n\nBy specifying them as options in \nsequelize.define\n\n\nBy calling \nhook()\n with a string and your hook handler function\n\n\nBy calling the function with the same name as the hook you want\n\n\n\n\n// Method 1\nsequelize.define(name, { attributes }, {\n  hooks: {\n    beforeBulkCreate: function () {\n      // can be a single function\n    },\n    beforeValidate: [\n      function () {},\n      function() {} // Or an array of several\n    ]\n  }\n})\n\n// Method 2\nModel.hook('afterDestroy', function () {})\n\n// Method 3\nModel.afterBulkUpdate(function () {})\n\n\n\n\nSee:\n\n\n\n\nSequelize#define\n\n\n\n\n\n\n\n\naddHook(hooktype, [name], fn)\n\n\nView code\n\n\nAdd a hook to the model\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhooktype\n\n\nString\n\n\n\n\n\n\n\n\n[name]\n\n\nString\n\n\nProvide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nThe hook function\n\n\n\n\n\n\n\n\nAliases:\n hook\n\n\n\n\n\n\nremoveHook(hookType, name)\n\n\nView code\n\n\nRemove hook from the model\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhookType\n\n\nString\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasHook(hookType)\n\n\nView code\n\n\nCheck whether the mode has any hooks of this type\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhookType\n\n\nString\n\n\n\n\n\n\n\n\n\n\nAliases:\n hasHooks\n\n\n\n\n\n\nbeforeValidate(name, fn)\n\n\nView code\n\n\nA hook that is run before validation\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterValidate(name, fn)\n\n\nView code\n\n\nA hook that is run after validation\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeCreate(name, fn)\n\n\nView code\n\n\nA hook that is run before creating a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with attributes, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterCreate(name, fn)\n\n\nView code\n\n\nA hook that is run after creating a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with attributes, options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeDestroy(name, fn)\n\n\nView code\n\n\nA hook that is run before destroying a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\nAliases:\n beforeDelete\n\n\n\n\n\n\nafterDestroy(name, fn)\n\n\nView code\n\n\nA hook that is run after destroying a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\nAliases:\n afterDelete\n\n\n\n\n\n\nbeforeRestore(name, fn)\n\n\nView code\n\n\nA hook that is run before restoring a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterRestore(name, fn)\n\n\nView code\n\n\nA hook that is run after restoring a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeUpdate(name, fn)\n\n\nView code\n\n\nA hook that is run before updating a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterUpdate(name, fn)\n\n\nView code\n\n\nA hook that is run after updating a single instance\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance, options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeBulkCreate(name, fn)\n\n\nView code\n\n\nA hook that is run before creating instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instances, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterBulkCreate(name, fn)\n\n\nView code\n\n\nA hook that is run after creating instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instances, options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeBulkDestroy(name, fn)\n\n\nView code\n\n\nA hook that is run before destroying instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\nAliases:\n beforeBulkDelete\n\n\n\n\n\n\nafterBulkDestroy(name, fn)\n\n\nView code\n\n\nA hook that is run after destroying instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\nAliases:\n afterBulkDelete\n\n\n\n\n\n\nbeforeBulkRestore(name, fn)\n\n\nView code\n\n\nA hook that is run before restoring instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nafterBulkRestore(name, fn)\n\n\nView code\n\n\nA hook that is run after restoring instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeBulkUpdate(name, fn)\n\n\nView code\n\n\nA hook that is run before updating instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nafterBulkUpdate(name, fn)\n\n\nView code\n\n\nA hook that is run after updating instances in bulk\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeFind(name, fn)\n\n\nView code\n\n\nA hook that is run before a find (select) query\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeFindAfterExpandIncludeAll(name, fn)\n\n\nView code\n\n\nA hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeFindAfterOptions(name, fn)\n\n\nView code\n\n\nA hook that is run before a find (select) query, after all option parsing is complete\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options\n\n\n\n\n\n\n\n\n\n\n\n\nafterFind(name, fn)\n\n\nView code\n\n\nA hook that is run after a find (select) query\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with instance(s), options\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeDefine(name, fn)\n\n\nView code\n\n\nA hook that is run before a define call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with attributes, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterDefine(name, fn)\n\n\nView code\n\n\nA hook that is run after a define call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with factory\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeInit(name, fn)\n\n\nView code\n\n\nA hook that is run before Sequelize() call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with config, options\n\n\n\n\n\n\n\n\n\n\n\n\nafterInit(name, fn)\n\n\nView code\n\n\nA hook that is run after Sequelize() call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with sequelize\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeSync(name, fn)\n\n\nView code\n\n\nA hook that is run before Model.sync call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options passed to Model.sync\n\n\n\n\n\n\n\n\n\n\n\n\nafterSync(name, fn)\n\n\nView code\n\n\nA hook that is run after Model.sync call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options passed to Model.sync\n\n\n\n\n\n\n\n\n\n\n\n\nbeforeBulkSync(name, fn)\n\n\nView code\n\n\nA hook that is run before sequelize.sync call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options passed to sequelize.sync\n\n\n\n\n\n\n\n\n\n\n\n\nafterBulkSync\n\n\nView code\n\n\nA hook that is run after sequelize.sync call\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nA callback function that is called with options passed to sequelize.sync\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Hooks"
        }, 
        {
            "location": "/api/hooks/#mixin-hooks", 
            "text": "View code  Hooks are function that are called before and after  (bulk-) creation/updating/deletion and validation. Hooks can be added to you models in three ways:   By specifying them as options in  sequelize.define  By calling  hook()  with a string and your hook handler function  By calling the function with the same name as the hook you want   // Method 1\nsequelize.define(name, { attributes }, {\n  hooks: {\n    beforeBulkCreate: function () {\n      // can be a single function\n    },\n    beforeValidate: [\n      function () {},\n      function() {} // Or an array of several\n    ]\n  }\n})\n\n// Method 2\nModel.hook('afterDestroy', function () {})\n\n// Method 3\nModel.afterBulkUpdate(function () {})  See:   Sequelize#define", 
            "title": "Mixin Hooks"
        }, 
        {
            "location": "/api/hooks/#addhookhooktype-name-fn", 
            "text": "View code  Add a hook to the model  Params:     Name  Type  Description      hooktype  String     [name]  String  Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.    fn  Function  The hook function     Aliases:  hook", 
            "title": "addHook(hooktype, [name], fn)"
        }, 
        {
            "location": "/api/hooks/#removehookhooktype-name", 
            "text": "View code  Remove hook from the model  Params:     Name  Type  Description      hookType  String     name  String", 
            "title": "removeHook(hookType, name)"
        }, 
        {
            "location": "/api/hooks/#hashookhooktype", 
            "text": "View code  Check whether the mode has any hooks of this type  Params:     Name  Type  Description      hookType  String      Aliases:  hasHooks", 
            "title": "hasHook(hookType)"
        }, 
        {
            "location": "/api/hooks/#beforevalidatename-fn", 
            "text": "View code  A hook that is run before validation  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "beforeValidate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#aftervalidatename-fn", 
            "text": "View code  A hook that is run after validation  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "afterValidate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforecreatename-fn", 
            "text": "View code  A hook that is run before creating a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with attributes, options", 
            "title": "beforeCreate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#aftercreatename-fn", 
            "text": "View code  A hook that is run after creating a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with attributes, options", 
            "title": "afterCreate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforedestroyname-fn", 
            "text": "View code  A hook that is run before destroying a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options     Aliases:  beforeDelete", 
            "title": "beforeDestroy(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterdestroyname-fn", 
            "text": "View code  A hook that is run after destroying a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options     Aliases:  afterDelete", 
            "title": "afterDestroy(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforerestorename-fn", 
            "text": "View code  A hook that is run before restoring a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "beforeRestore(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterrestorename-fn", 
            "text": "View code  A hook that is run after restoring a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "afterRestore(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforeupdatename-fn", 
            "text": "View code  A hook that is run before updating a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "beforeUpdate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterupdatename-fn", 
            "text": "View code  A hook that is run after updating a single instance  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance, options", 
            "title": "afterUpdate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforebulkcreatename-fn", 
            "text": "View code  A hook that is run before creating instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instances, options", 
            "title": "beforeBulkCreate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterbulkcreatename-fn", 
            "text": "View code  A hook that is run after creating instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instances, options", 
            "title": "afterBulkCreate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforebulkdestroyname-fn", 
            "text": "View code  A hook that is run before destroying instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options     Aliases:  beforeBulkDelete", 
            "title": "beforeBulkDestroy(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterbulkdestroyname-fn", 
            "text": "View code  A hook that is run after destroying instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options     Aliases:  afterBulkDelete", 
            "title": "afterBulkDestroy(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforebulkrestorename-fn", 
            "text": "View code  A hook that is run before restoring instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "beforeBulkRestore(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterbulkrestorename-fn", 
            "text": "View code  A hook that is run after restoring instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "afterBulkRestore(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforebulkupdatename-fn", 
            "text": "View code  A hook that is run before updating instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "beforeBulkUpdate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterbulkupdatename-fn", 
            "text": "View code  A hook that is run after updating instances in bulk  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "afterBulkUpdate(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforefindname-fn", 
            "text": "View code  A hook that is run before a find (select) query  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "beforeFind(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforefindafterexpandincludeallname-fn", 
            "text": "View code  A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "beforeFindAfterExpandIncludeAll(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforefindafteroptionsname-fn", 
            "text": "View code  A hook that is run before a find (select) query, after all option parsing is complete  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options", 
            "title": "beforeFindAfterOptions(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterfindname-fn", 
            "text": "View code  A hook that is run after a find (select) query  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with instance(s), options", 
            "title": "afterFind(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforedefinename-fn", 
            "text": "View code  A hook that is run before a define call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with attributes, options", 
            "title": "beforeDefine(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterdefinename-fn", 
            "text": "View code  A hook that is run after a define call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with factory", 
            "title": "afterDefine(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforeinitname-fn", 
            "text": "View code  A hook that is run before Sequelize() call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with config, options", 
            "title": "beforeInit(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterinitname-fn", 
            "text": "View code  A hook that is run after Sequelize() call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with sequelize", 
            "title": "afterInit(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforesyncname-fn", 
            "text": "View code  A hook that is run before Model.sync call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options passed to Model.sync", 
            "title": "beforeSync(name, fn)"
        }, 
        {
            "location": "/api/hooks/#aftersyncname-fn", 
            "text": "View code  A hook that is run after Model.sync call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options passed to Model.sync", 
            "title": "afterSync(name, fn)"
        }, 
        {
            "location": "/api/hooks/#beforebulksyncname-fn", 
            "text": "View code  A hook that is run before sequelize.sync call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options passed to sequelize.sync", 
            "title": "beforeBulkSync(name, fn)"
        }, 
        {
            "location": "/api/hooks/#afterbulksync", 
            "text": "View code  A hook that is run after sequelize.sync call  Params:     Name  Type  Description      name  String     fn  Function  A callback function that is called with options passed to sequelize.sync      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "afterBulkSync"
        }, 
        {
            "location": "/api/transaction/", 
            "text": "Class Transaction\n\n\nView code\n\n\nThe transaction object is used to identify a running transaction. It is created by calling \nSequelize.transaction()\n.\n\n\nTo run a query under a transaction, you should pass the transaction in the options object.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsequelize\n\n\nSequelize\n\n\nA configured sequelize Instance\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nAn object with options\n\n\n\n\n\n\noptions.autocommit=true\n\n\nBoolean\n\n\nSets the autocommit property of the transaction.\n\n\n\n\n\n\noptions.type=true\n\n\nString\n\n\nSets the type of the transaction.\n\n\n\n\n\n\noptions.isolationLevel=true\n\n\nString\n\n\nSets the isolation level of the transaction.\n\n\n\n\n\n\noptions.deferrable\n\n\nString\n\n\nSets the constraints to be deferred or immediately checked.\n\n\n\n\n\n\n\n\n\n\n\n\nTYPES\n\n\nView code\n\n\nTypes can be set per-transaction by passing \noptions.type\n to \nsequelize.transaction\n.\nDefault to \nDEFERRED\n but you can override the default type by passing \noptions.transactionType\n in \nnew Sequelize\n.\nSqlite only.\n\n\nThe possible types to use when starting a transaction:\n\n\n{\n  DEFERRED: \nDEFERRED\n,\n  IMMEDIATE: \nIMMEDIATE\n,\n  EXCLUSIVE: \nEXCLUSIVE\n\n}\n\n\n\n\nPass in the desired level as the first argument:\n\n\nreturn sequelize.transaction({\n  type: Sequelize.Transaction.EXCLUSIVE\n}, function (t) {\n\n // your transactions\n\n}).then(function(result) {\n  // transaction has been committed. Do something after the commit if required.\n}).catch(function(err) {\n  // do something with the err.\n});\n\n\n\n\n\n\n\n\nISOLATION_LEVELS\n\n\nView code\n\n\nIsolations levels can be set per-transaction by passing \noptions.isolationLevel\n to \nsequelize.transaction\n.\nDefault to \nREPEATABLE_READ\n but you can override the default isolation level by passing \noptions.isolationLevel\n in \nnew Sequelize\n.\n\n\nThe possible isolations levels to use when starting a transaction:\n\n\n{\n  READ_UNCOMMITTED: \nREAD UNCOMMITTED\n,\n  READ_COMMITTED: \nREAD COMMITTED\n,\n  REPEATABLE_READ: \nREPEATABLE READ\n,\n  SERIALIZABLE: \nSERIALIZABLE\n\n}\n\n\n\n\nPass in the desired level as the first argument:\n\n\nreturn sequelize.transaction({\n  isolationLevel: Sequelize.Transaction.SERIALIZABLE\n}, function (t) {\n\n // your transactions\n\n}).then(function(result) {\n  // transaction has been committed. Do something after the commit if required.\n}).catch(function(err) {\n  // do something with the err.\n});\n\n\n\n\n\n\n\n\nLOCK\n\n\nView code\n\n\nPossible options for row locking. Used in conjunction with \nfind\n calls:\n\n\nt1 // is a transaction\nt1.LOCK.UPDATE,\nt1.LOCK.SHARE,\nt1.LOCK.KEY_SHARE, // Postgres 9.3+ only\nt1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only\n\n\n\n\nUsage:\n\n\nt1 // is a transaction\nModel.findAll({\n  where: ...,\n  transaction: t1,\n  lock: t1.LOCK...\n});\n\n\n\n\nPostgres also supports specific locks while eager loading by using OF:\n\n\nUserModel.findAll({\n  where: ...,\n  include: [TaskModel, ...],\n  transaction: t1,\n  lock: {\n    level: t1.LOCK...,\n    of: UserModel\n  }\n});\n\n\n\n\nUserModel will be locked but TaskModel won't!\n\n\n\n\n\n\ncommit()\n -\n \nPromise\n\n\nView code\n\n\nCommit the transaction\n\n\n\n\n\n\nrollback()\n -\n \nPromise\n\n\nView code\n\n\nRollback (abort) the transaction\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Transaction"
        }, 
        {
            "location": "/api/transaction/#class-transaction", 
            "text": "View code  The transaction object is used to identify a running transaction. It is created by calling  Sequelize.transaction() .  To run a query under a transaction, you should pass the transaction in the options object.  Params:     Name  Type  Description      sequelize  Sequelize  A configured sequelize Instance    options  Object  An object with options    options.autocommit=true  Boolean  Sets the autocommit property of the transaction.    options.type=true  String  Sets the type of the transaction.    options.isolationLevel=true  String  Sets the isolation level of the transaction.    options.deferrable  String  Sets the constraints to be deferred or immediately checked.", 
            "title": "Class Transaction"
        }, 
        {
            "location": "/api/transaction/#types", 
            "text": "View code  Types can be set per-transaction by passing  options.type  to  sequelize.transaction .\nDefault to  DEFERRED  but you can override the default type by passing  options.transactionType  in  new Sequelize .\nSqlite only.  The possible types to use when starting a transaction:  {\n  DEFERRED:  DEFERRED ,\n  IMMEDIATE:  IMMEDIATE ,\n  EXCLUSIVE:  EXCLUSIVE \n}  Pass in the desired level as the first argument:  return sequelize.transaction({\n  type: Sequelize.Transaction.EXCLUSIVE\n}, function (t) {\n\n // your transactions\n\n}).then(function(result) {\n  // transaction has been committed. Do something after the commit if required.\n}).catch(function(err) {\n  // do something with the err.\n});", 
            "title": "TYPES"
        }, 
        {
            "location": "/api/transaction/#isolation_levels", 
            "text": "View code  Isolations levels can be set per-transaction by passing  options.isolationLevel  to  sequelize.transaction .\nDefault to  REPEATABLE_READ  but you can override the default isolation level by passing  options.isolationLevel  in  new Sequelize .  The possible isolations levels to use when starting a transaction:  {\n  READ_UNCOMMITTED:  READ UNCOMMITTED ,\n  READ_COMMITTED:  READ COMMITTED ,\n  REPEATABLE_READ:  REPEATABLE READ ,\n  SERIALIZABLE:  SERIALIZABLE \n}  Pass in the desired level as the first argument:  return sequelize.transaction({\n  isolationLevel: Sequelize.Transaction.SERIALIZABLE\n}, function (t) {\n\n // your transactions\n\n}).then(function(result) {\n  // transaction has been committed. Do something after the commit if required.\n}).catch(function(err) {\n  // do something with the err.\n});", 
            "title": "ISOLATION_LEVELS"
        }, 
        {
            "location": "/api/transaction/#lock", 
            "text": "View code  Possible options for row locking. Used in conjunction with  find  calls:  t1 // is a transaction\nt1.LOCK.UPDATE,\nt1.LOCK.SHARE,\nt1.LOCK.KEY_SHARE, // Postgres 9.3+ only\nt1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only  Usage:  t1 // is a transaction\nModel.findAll({\n  where: ...,\n  transaction: t1,\n  lock: t1.LOCK...\n});  Postgres also supports specific locks while eager loading by using OF:  UserModel.findAll({\n  where: ...,\n  include: [TaskModel, ...],\n  transaction: t1,\n  lock: {\n    level: t1.LOCK...,\n    of: UserModel\n  }\n});  UserModel will be locked but TaskModel won't!", 
            "title": "LOCK"
        }, 
        {
            "location": "/api/transaction/#commit-promise", 
            "text": "View code  Commit the transaction", 
            "title": "commit() -&gt; Promise"
        }, 
        {
            "location": "/api/transaction/#rollback-promise", 
            "text": "View code  Rollback (abort) the transaction   This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "rollback() -&gt; Promise"
        }, 
        {
            "location": "/api/datatypes/", 
            "text": "Class DataTypes\n\n\nView code\n\n\nA convenience class holding commonly used data types. The datatypes are used when defining a new model using \nSequelize.define\n, like this:\n\n\nsequelize.define('model', {\n  column: DataTypes.INTEGER\n})\n\n\n\n\nWhen defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using \nDataTypes.BLOB\n, mean\nthat that column will be returned as an instance of \nBuffer\n when being fetched by sequelize.\n\n\nSome data types have special properties that can be accessed in order to change the data type.\nFor example, to get an unsigned integer with zerofill you can do \nDataTypes.INTEGER.UNSIGNED.ZEROFILL\n.\nThe order you access the properties in do not matter, so \nDataTypes.INTEGER.ZEROFILL.UNSIGNED\n is fine as well. The available properties are listed under each data type.\n\n\nTo provide a length for the data type, you can invoke it like a function: \nINTEGER(2)\n\n\nThree of the values provided here (\nNOW\n, \nUUIDV1\n and \nUUIDV4\n) are special default values, that should not be used to define types. Instead they are used as shorthands for\ndefining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n\n\nsequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV1,\n    primaryKey: true\n  }\n})\n\n\n\n\nThere may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplised\nusing the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\nfrom a function.\n\n\nsequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: function() {\n      return generateMyId()\n    },\n    primaryKey: true\n  }\n})\n\n\n\n\n\n\n\n\nSTRING()\n\n\nView code\n\n\nA variable length string. Default length 255\n\n\nAvailable properties: \nBINARY\n\n\n\n\n\n\nCHAR()\n\n\nView code\n\n\nA fixed length string. Default length 255\n\n\nAvailable properties: \nBINARY\n\n\n\n\n\n\nTEXT()\n\n\nView code\n\n\nAn (un)limited length text column. Available lengths: \ntiny\n, \nmedium\n, \nlong\n\n\n\n\n\n\nINTEGER()\n\n\nView code\n\n\nA 32 bit integer.\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nBIGINT()\n\n\nView code\n\n\nA 64 bit integer.\n\n\nNote: an attribute defined as \nBIGINT\n will be treated like a \nstring\n due this \nfeature from node-postgres\n to prevent precision loss. To have this attribute as a \nnumber\n, this is a possible \nworkaround\n.\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nFLOAT()\n\n\nView code\n\n\nFloating point number (4-byte precision). Accepts one or two arguments for precision\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nREAL()\n\n\nView code\n\n\nFloating point number (4-byte precision). Accepts one or two arguments for precision\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nDOUBLE()\n\n\nView code\n\n\nFloating point number (8-byte precision). Accepts one or two arguments for precision\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nDECIMAL()\n\n\nView code\n\n\nDecimal number. Accepts one or two arguments for precision\n\n\nAvailable properties: \nUNSIGNED\n, \nZEROFILL\n\n\n\n\n\n\nBOOLEAN()\n\n\nView code\n\n\nA boolean / tinyint column, depending on dialect\n\n\n\n\n\n\nTIME()\n\n\nView code\n\n\nA time column\n\n\n\n\n\n\nDATE()\n\n\nView code\n\n\nA datetime column\n\n\n\n\n\n\nDATEONLY()\n\n\nView code\n\n\nA date only column\n\n\n\n\n\n\nHSTORE()\n\n\nView code\n\n\nA key / value column. Only available in postgres.\n\n\n\n\n\n\nJSON()\n\n\nView code\n\n\nA JSON string column. Only available in postgres.\n\n\n\n\n\n\nJSONB()\n\n\nView code\n\n\nA pre-processed JSON data column. Only available in postgres.\n\n\n\n\n\n\nNOW()\n\n\nView code\n\n\nA default value of the current timestamp\n\n\n\n\n\n\nBLOB()\n\n\nView code\n\n\nBinary storage. Available lengths: \ntiny\n, \nmedium\n, \nlong\n\n\n\n\n\n\nRANGE()\n\n\nView code\n\n\nRange types are data types representing a range of values of some element type (called the range's subtype).\nOnly available in postgres.\nSee {@link http://www.postgresql.org/docs/9.4/static/rangetypes.html|Postgres documentation} for more details\n\n\n\n\n\n\nUUID()\n\n\nView code\n\n\nA column storing a unique universal identifier. Use with \nUUIDV1\n or \nUUIDV4\n for default values.\n\n\n\n\n\n\nUUIDV1()\n\n\nView code\n\n\nA default unique universal identifier generated following the UUID v1 standard\n\n\n\n\n\n\nUUIDV4()\n\n\nView code\n\n\nA default unique universal identifier generated following the UUID v4 standard\n\n\n\n\n\n\nVIRTUAL()\n\n\nView code\n\n\nA virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n\n\nYou could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:\n\n\nsequelize.define('user', {\n  password_hash: DataTypes.STRING,\n  password: {\n    type: DataTypes.VIRTUAL,\n    set: function (val) {\n       this.setDataValue('password', val); // Remember to set the data value, otherwise it won't be validated\n       this.setDataValue('password_hash', this.salt + val);\n     },\n     validate: {\n        isLongEnough: function (val) {\n          if (val.length \n 7) {\n            throw new Error(\nPlease choose a longer password\n)\n         }\n      }\n    }\n  }\n})\n\n\n\n\nIn the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n\n\nVIRTUAL also takes a return type and dependency fields as arguments\nIf a virtual attribute is present in \nattributes\n it will automatically pull in the extra fields as well.\nReturn type is mostly useful for setups that rely on types like GraphQL.\n\n\n{\n  active: {\n    type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n    get: function() {\n      return this.get('createdAt') \n Date.now() - (7 * 24 * 60 * 60 * 1000)\n    }\n  }\n}\n\n\n\n\nAliases:\n NONE\n\n\n\n\n\n\nENUM()\n\n\nView code\n\n\nAn enumeration. \nDataTypes.ENUM('value', 'another value')\n.\n\n\n\n\n\n\nARRAY()\n\n\nView code\n\n\nAn array of \ntype\n, e.g. \nDataTypes.ARRAY(DataTypes.DECIMAL)\n. Only available in postgres.\n\n\n\n\n\n\nGEOMETRY()\n\n\nView code\n\n\nA column storing Geometry information.  \n\n\nOnly available in PostgreSQL (with PostGIS) or MySQL.\n\nIn MySQL, allowable Geometry types are 'POINT', 'LINESTRING', 'POLYGON'.\n\n\nWhen using, GeoJSON is accepted as input and returned as output.\n\nIn PostGIS, the GeoJSON is parsed using the PostGIS function \nST_GeomFromGeoJSON\n.\n\nIn MySQL it is parsed using the function \nGeomFromText\n.\n\nTherefore, one can just follow the \nGeoJSON spec\n for handling geometry objects.  See the following examples:\n\n\n// Create a new point:\nvar point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n\nUser.create({username: 'username', geometry: point }).then(function(newUser) {\n...\n});\n\n// Create a new linestring:\nvar line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n\nUser.create({username: 'username', geometry: line }).then(function(newUser) {\n...\n});\n\n// Create a new polygon:\nvar polygon = { type: 'Polygon', coordinates: [\n                [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n                  [100.0, 1.0], [100.0, 0.0] ] \n                ]};\n\nUser.create({username: 'username', geometry: polygon }).then(function(newUser) {\n...\n});\n\n// Create a new point with a custom SRID:\nvar point = { \n  type: 'Point', \n  coordinates: [39.807222,-76.984722],\n  crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n};\n\nUser.create({username: 'username', geometry: point }).then(function(newUser) {\n...\n});\n\n\n\n\n\n\n\n\nGEOGRAPHY()\n\n\nView code\n\n\nA geography datatype represents two dimensional spacial objects in an elliptic coord system.\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Datatypes"
        }, 
        {
            "location": "/api/datatypes/#class-datatypes", 
            "text": "View code  A convenience class holding commonly used data types. The datatypes are used when defining a new model using  Sequelize.define , like this:  sequelize.define('model', {\n  column: DataTypes.INTEGER\n})  When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using  DataTypes.BLOB , mean\nthat that column will be returned as an instance of  Buffer  when being fetched by sequelize.  Some data types have special properties that can be accessed in order to change the data type.\nFor example, to get an unsigned integer with zerofill you can do  DataTypes.INTEGER.UNSIGNED.ZEROFILL .\nThe order you access the properties in do not matter, so  DataTypes.INTEGER.ZEROFILL.UNSIGNED  is fine as well. The available properties are listed under each data type.  To provide a length for the data type, you can invoke it like a function:  INTEGER(2)  Three of the values provided here ( NOW ,  UUIDV1  and  UUIDV4 ) are special default values, that should not be used to define types. Instead they are used as shorthands for\ndefining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:  sequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV1,\n    primaryKey: true\n  }\n})  There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplised\nusing the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\nfrom a function.  sequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: function() {\n      return generateMyId()\n    },\n    primaryKey: true\n  }\n})", 
            "title": "Class DataTypes"
        }, 
        {
            "location": "/api/datatypes/#string", 
            "text": "View code  A variable length string. Default length 255  Available properties:  BINARY", 
            "title": "STRING()"
        }, 
        {
            "location": "/api/datatypes/#char", 
            "text": "View code  A fixed length string. Default length 255  Available properties:  BINARY", 
            "title": "CHAR()"
        }, 
        {
            "location": "/api/datatypes/#text", 
            "text": "View code  An (un)limited length text column. Available lengths:  tiny ,  medium ,  long", 
            "title": "TEXT()"
        }, 
        {
            "location": "/api/datatypes/#integer", 
            "text": "View code  A 32 bit integer.  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "INTEGER()"
        }, 
        {
            "location": "/api/datatypes/#bigint", 
            "text": "View code  A 64 bit integer.  Note: an attribute defined as  BIGINT  will be treated like a  string  due this  feature from node-postgres  to prevent precision loss. To have this attribute as a  number , this is a possible  workaround .  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "BIGINT()"
        }, 
        {
            "location": "/api/datatypes/#float", 
            "text": "View code  Floating point number (4-byte precision). Accepts one or two arguments for precision  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "FLOAT()"
        }, 
        {
            "location": "/api/datatypes/#real", 
            "text": "View code  Floating point number (4-byte precision). Accepts one or two arguments for precision  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "REAL()"
        }, 
        {
            "location": "/api/datatypes/#double", 
            "text": "View code  Floating point number (8-byte precision). Accepts one or two arguments for precision  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "DOUBLE()"
        }, 
        {
            "location": "/api/datatypes/#decimal", 
            "text": "View code  Decimal number. Accepts one or two arguments for precision  Available properties:  UNSIGNED ,  ZEROFILL", 
            "title": "DECIMAL()"
        }, 
        {
            "location": "/api/datatypes/#boolean", 
            "text": "View code  A boolean / tinyint column, depending on dialect", 
            "title": "BOOLEAN()"
        }, 
        {
            "location": "/api/datatypes/#time", 
            "text": "View code  A time column", 
            "title": "TIME()"
        }, 
        {
            "location": "/api/datatypes/#date", 
            "text": "View code  A datetime column", 
            "title": "DATE()"
        }, 
        {
            "location": "/api/datatypes/#dateonly", 
            "text": "View code  A date only column", 
            "title": "DATEONLY()"
        }, 
        {
            "location": "/api/datatypes/#hstore", 
            "text": "View code  A key / value column. Only available in postgres.", 
            "title": "HSTORE()"
        }, 
        {
            "location": "/api/datatypes/#json", 
            "text": "View code  A JSON string column. Only available in postgres.", 
            "title": "JSON()"
        }, 
        {
            "location": "/api/datatypes/#jsonb", 
            "text": "View code  A pre-processed JSON data column. Only available in postgres.", 
            "title": "JSONB()"
        }, 
        {
            "location": "/api/datatypes/#now", 
            "text": "View code  A default value of the current timestamp", 
            "title": "NOW()"
        }, 
        {
            "location": "/api/datatypes/#blob", 
            "text": "View code  Binary storage. Available lengths:  tiny ,  medium ,  long", 
            "title": "BLOB()"
        }, 
        {
            "location": "/api/datatypes/#range", 
            "text": "View code  Range types are data types representing a range of values of some element type (called the range's subtype).\nOnly available in postgres.\nSee {@link http://www.postgresql.org/docs/9.4/static/rangetypes.html|Postgres documentation} for more details", 
            "title": "RANGE()"
        }, 
        {
            "location": "/api/datatypes/#uuid", 
            "text": "View code  A column storing a unique universal identifier. Use with  UUIDV1  or  UUIDV4  for default values.", 
            "title": "UUID()"
        }, 
        {
            "location": "/api/datatypes/#uuidv1", 
            "text": "View code  A default unique universal identifier generated following the UUID v1 standard", 
            "title": "UUIDV1()"
        }, 
        {
            "location": "/api/datatypes/#uuidv4", 
            "text": "View code  A default unique universal identifier generated following the UUID v4 standard", 
            "title": "UUIDV4()"
        }, 
        {
            "location": "/api/datatypes/#virtual", 
            "text": "View code  A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.  You could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:  sequelize.define('user', {\n  password_hash: DataTypes.STRING,\n  password: {\n    type: DataTypes.VIRTUAL,\n    set: function (val) {\n       this.setDataValue('password', val); // Remember to set the data value, otherwise it won't be validated\n       this.setDataValue('password_hash', this.salt + val);\n     },\n     validate: {\n        isLongEnough: function (val) {\n          if (val.length   7) {\n            throw new Error( Please choose a longer password )\n         }\n      }\n    }\n  }\n})  In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.  VIRTUAL also takes a return type and dependency fields as arguments\nIf a virtual attribute is present in  attributes  it will automatically pull in the extra fields as well.\nReturn type is mostly useful for setups that rely on types like GraphQL.  {\n  active: {\n    type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n    get: function() {\n      return this.get('createdAt')   Date.now() - (7 * 24 * 60 * 60 * 1000)\n    }\n  }\n}  Aliases:  NONE", 
            "title": "VIRTUAL()"
        }, 
        {
            "location": "/api/datatypes/#enum", 
            "text": "View code  An enumeration.  DataTypes.ENUM('value', 'another value') .", 
            "title": "ENUM()"
        }, 
        {
            "location": "/api/datatypes/#array", 
            "text": "View code  An array of  type , e.g.  DataTypes.ARRAY(DataTypes.DECIMAL) . Only available in postgres.", 
            "title": "ARRAY()"
        }, 
        {
            "location": "/api/datatypes/#geometry", 
            "text": "View code  A column storing Geometry information.    Only available in PostgreSQL (with PostGIS) or MySQL. \nIn MySQL, allowable Geometry types are 'POINT', 'LINESTRING', 'POLYGON'.  When using, GeoJSON is accepted as input and returned as output. \nIn PostGIS, the GeoJSON is parsed using the PostGIS function  ST_GeomFromGeoJSON . \nIn MySQL it is parsed using the function  GeomFromText . \nTherefore, one can just follow the  GeoJSON spec  for handling geometry objects.  See the following examples:  // Create a new point:\nvar point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n\nUser.create({username: 'username', geometry: point }).then(function(newUser) {\n...\n});\n\n// Create a new linestring:\nvar line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n\nUser.create({username: 'username', geometry: line }).then(function(newUser) {\n...\n});\n\n// Create a new polygon:\nvar polygon = { type: 'Polygon', coordinates: [\n                [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n                  [100.0, 1.0], [100.0, 0.0] ] \n                ]};\n\nUser.create({username: 'username', geometry: polygon }).then(function(newUser) {\n...\n});\n\n// Create a new point with a custom SRID:\nvar point = { \n  type: 'Point', \n  coordinates: [39.807222,-76.984722],\n  crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n};\n\nUser.create({username: 'username', geometry: point }).then(function(newUser) {\n...\n});", 
            "title": "GEOMETRY()"
        }, 
        {
            "location": "/api/datatypes/#geography", 
            "text": "View code  A geography datatype represents two dimensional spacial objects in an elliptic coord system.   This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "GEOGRAPHY()"
        }, 
        {
            "location": "/api/deferrable/", 
            "text": "Deferrable()\n -\n \nobject\n\n\nView code\n\n\nA collection of properties related to deferrable constraints. It can be used to\nmake foreign key constraints deferrable and to set the constraints within a\ntransaction. This is only supported in PostgreSQL.\n\n\nThe foreign keys can be configured like this. It will create a foreign key\nthat will check the constraints immediately when the data was inserted.\n\n\nsequelize.define('Model', {\n  foreign_id: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: OtherModel,\n      key: 'id',\n      deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n    }\n  }\n});\n\n\n\n\nThe constraints can be configured in a transaction like this. It will\ntrigger a query once the transaction has been started and set the constraints\nto be checked at the very end of the transaction.\n\n\nsequelize.transaction({\n  deferrable: Sequelize.Deferrable.SET_DEFERRED\n});\n\n\n\n\n\n\n\n\nINITIALLY_DEFERRED()\n\n\nView code\n\n\nA property that will defer constraints checks to the end of transactions.\n\n\n\n\n\n\nINITIALLY_IMMEDIATE()\n\n\nView code\n\n\nA property that will trigger the constraint checks immediately\n\n\n\n\n\n\nNOT()\n\n\nView code\n\n\nA property that will set the constraints to not deferred. This is\nthe default in PostgreSQL and it make it impossible to dynamically\ndefer the constraints within a transaction.\n\n\n\n\n\n\nSET_DEFERRED(constraints)\n\n\nView code\n\n\nA property that will trigger an additional query at the beginning of a\ntransaction which sets the constraints to deferred.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconstraints\n\n\nArray\n\n\nAn array of constraint names. Will defer all constraints by default.\n\n\n\n\n\n\n\n\n\n\n\n\nSET_IMMEDIATE(constraints)\n\n\nView code\n\n\nA property that will trigger an additional query at the beginning of a\ntransaction which sets the constraints to immediately.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconstraints\n\n\nArray\n\n\nAn array of constraint names. Will defer all constraints by default.\n\n\n\n\n\n\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Deferrable"
        }, 
        {
            "location": "/api/deferrable/#deferrable-object", 
            "text": "View code  A collection of properties related to deferrable constraints. It can be used to\nmake foreign key constraints deferrable and to set the constraints within a\ntransaction. This is only supported in PostgreSQL.  The foreign keys can be configured like this. It will create a foreign key\nthat will check the constraints immediately when the data was inserted.  sequelize.define('Model', {\n  foreign_id: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: OtherModel,\n      key: 'id',\n      deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n    }\n  }\n});  The constraints can be configured in a transaction like this. It will\ntrigger a query once the transaction has been started and set the constraints\nto be checked at the very end of the transaction.  sequelize.transaction({\n  deferrable: Sequelize.Deferrable.SET_DEFERRED\n});", 
            "title": "Deferrable() -&gt; object"
        }, 
        {
            "location": "/api/deferrable/#initially_deferred", 
            "text": "View code  A property that will defer constraints checks to the end of transactions.", 
            "title": "INITIALLY_DEFERRED()"
        }, 
        {
            "location": "/api/deferrable/#initially_immediate", 
            "text": "View code  A property that will trigger the constraint checks immediately", 
            "title": "INITIALLY_IMMEDIATE()"
        }, 
        {
            "location": "/api/deferrable/#not", 
            "text": "View code  A property that will set the constraints to not deferred. This is\nthe default in PostgreSQL and it make it impossible to dynamically\ndefer the constraints within a transaction.", 
            "title": "NOT()"
        }, 
        {
            "location": "/api/deferrable/#set_deferredconstraints", 
            "text": "View code  A property that will trigger an additional query at the beginning of a\ntransaction which sets the constraints to deferred.  Params:     Name  Type  Description      constraints  Array  An array of constraint names. Will defer all constraints by default.", 
            "title": "SET_DEFERRED(constraints)"
        }, 
        {
            "location": "/api/deferrable/#set_immediateconstraints", 
            "text": "View code  A property that will trigger an additional query at the beginning of a\ntransaction which sets the constraints to immediately.  Params:     Name  Type  Description      constraints  Array  An array of constraint names. Will defer all constraints by default.      This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "SET_IMMEDIATE(constraints)"
        }, 
        {
            "location": "/api/errors/", 
            "text": "Class Errors\n\n\nView code\n\n\nSequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\nAll sequelize errors inherit from the base JS error object.\n\n\n\n\n\n\nnew BaseError()\n\n\nView code\n\n\nThe Base Error all Sequelize Errors inherit from.\n\nAliases:\n Error\n\n\n\n\n\n\nnew ValidationError(message, [errors])\n\n\nView code\n\n\nValidation Error. Thrown when the sequelize validation has failed. The error contains an \nerrors\n property,\nwhich is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\nError message\n\n\n\n\n\n\n[errors]\n\n\nArray\n\n\nArray of ValidationErrorItem objects describing the validation errors\n\n\n\n\n\n\n\n\nExtends:\n BaseError\n\n\n\n\n\n\nerrors\n\n\nView code\n\n\nAn array of ValidationErrorItems\n\n\n\n\n\n\nget(path)\n\n\nView code\n\n\nGets all validation error items for the path / field specified.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nThe path to be checked for error items\n\n\n\n\n\n\n\n\n\n\n\n\nnew DatabaseError()\n\n\nView code\n\n\nA base class for all database related errors.\n\n\nExtends:\n BaseError\n\n\n\n\n\n\nparent\n\n\nView code\n\n\nThe database specific error which triggered this one\n\n\n\n\n\n\nsql\n\n\nView code\n\n\nThe SQL that triggered the error\n\n\n\n\n\n\nmessage()\n\n\nView code\n\n\nThe message from the DB.\n\n\n\n\n\n\nfields()\n\n\nView code\n\n\nThe fields of the unique constraint\n\n\n\n\n\n\nvalue()\n\n\nView code\n\n\nThe value(s) which triggered the error\n\n\n\n\n\n\nindex()\n\n\nView code\n\n\nThe name of the index that triggered the error\n\n\n\n\n\n\nnew TimeoutError()\n\n\nView code\n\n\nThrown when a database query times out because of a deadlock\n\n\nExtends:\n DatabaseError\n\n\n\n\n\n\nnew UniqueConstraintError()\n\n\nView code\n\n\nThrown when a unique constraint is violated in the database\n\n\nExtends:\n DatabaseError\n\n\n\n\n\n\nnew ForeignKeyConstraintError()\n\n\nView code\n\n\nThrown when a foreign key constraint is violated in the database\n\n\nExtends:\n DatabaseError\n\n\n\n\n\n\nnew ExclusionConstraintError()\n\n\nView code\n\n\nThrown when an exclusion constraint is violated in the database\n\n\nExtends:\n DatabaseError\n\n\n\n\n\n\nnew ValidationErrorItem(message, type, path, value)\n\n\nView code\n\n\nValidation Error Item\nInstances of this class are included in the \nValidationError.errors\n property.\n\n\nParams:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\nAn error message\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nThe type of the validation error\n\n\n\n\n\n\npath\n\n\nstring\n\n\nThe field that triggered the validation error\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nThe value that generated the error\n\n\n\n\n\n\n\n\n\n\n\n\nnew ConnectionError()\n\n\nView code\n\n\nA base class for all connection related errors.\n\n\nExtends:\n BaseError\n\n\n\n\n\n\nparent\n\n\nView code\n\n\nThe connection specific error which triggered this one\n\n\n\n\n\n\nnew ConnectionRefusedError()\n\n\nView code\n\n\nThrown when a connection to a database is refused\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew AccessDeniedError()\n\n\nView code\n\n\nThrown when a connection to a database is refused due to insufficient privileges\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew HostNotFoundError()\n\n\nView code\n\n\nThrown when a connection to a database has a hostname that was not found\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew HostNotReachableError()\n\n\nView code\n\n\nThrown when a connection to a database has a hostname that was not reachable\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew InvalidConnectionError()\n\n\nView code\n\n\nThrown when a connection to a database has invalid values for any of the connection parameters\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew ConnectionTimedOutError()\n\n\nView code\n\n\nThrown when a connection to a database times out\n\n\nExtends:\n ConnectionError\n\n\n\n\n\n\nnew InstanceError()\n\n\nView code\n\n\nThrown when a some problem occurred with Instance methods (see message for details)\n\n\nExtends:\n BaseError\n\n\n\n\nThis document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on \nIRC\n, open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see \nJSDoc\n and \ndox", 
            "title": "Errors"
        }, 
        {
            "location": "/api/errors/#class-errors", 
            "text": "View code  Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\nAll sequelize errors inherit from the base JS error object.", 
            "title": "Class Errors"
        }, 
        {
            "location": "/api/errors/#new-baseerror", 
            "text": "View code  The Base Error all Sequelize Errors inherit from. Aliases:  Error", 
            "title": "new BaseError()"
        }, 
        {
            "location": "/api/errors/#new-validationerrormessage-errors", 
            "text": "View code  Validation Error. Thrown when the sequelize validation has failed. The error contains an  errors  property,\nwhich is an array with 1 or more ValidationErrorItems, one for each validation that failed.  Params:     Name  Type  Description      message  string  Error message    [errors]  Array  Array of ValidationErrorItem objects describing the validation errors     Extends:  BaseError", 
            "title": "new ValidationError(message, [errors])"
        }, 
        {
            "location": "/api/errors/#errors", 
            "text": "View code  An array of ValidationErrorItems", 
            "title": "errors"
        }, 
        {
            "location": "/api/errors/#getpath", 
            "text": "View code  Gets all validation error items for the path / field specified.  Params:     Name  Type  Description      path  string  The path to be checked for error items", 
            "title": "get(path)"
        }, 
        {
            "location": "/api/errors/#new-databaseerror", 
            "text": "View code  A base class for all database related errors.  Extends:  BaseError", 
            "title": "new DatabaseError()"
        }, 
        {
            "location": "/api/errors/#parent", 
            "text": "View code  The database specific error which triggered this one", 
            "title": "parent"
        }, 
        {
            "location": "/api/errors/#sql", 
            "text": "View code  The SQL that triggered the error", 
            "title": "sql"
        }, 
        {
            "location": "/api/errors/#message", 
            "text": "View code  The message from the DB.", 
            "title": "message()"
        }, 
        {
            "location": "/api/errors/#fields", 
            "text": "View code  The fields of the unique constraint", 
            "title": "fields()"
        }, 
        {
            "location": "/api/errors/#value", 
            "text": "View code  The value(s) which triggered the error", 
            "title": "value()"
        }, 
        {
            "location": "/api/errors/#index", 
            "text": "View code  The name of the index that triggered the error", 
            "title": "index()"
        }, 
        {
            "location": "/api/errors/#new-timeouterror", 
            "text": "View code  Thrown when a database query times out because of a deadlock  Extends:  DatabaseError", 
            "title": "new TimeoutError()"
        }, 
        {
            "location": "/api/errors/#new-uniqueconstrainterror", 
            "text": "View code  Thrown when a unique constraint is violated in the database  Extends:  DatabaseError", 
            "title": "new UniqueConstraintError()"
        }, 
        {
            "location": "/api/errors/#new-foreignkeyconstrainterror", 
            "text": "View code  Thrown when a foreign key constraint is violated in the database  Extends:  DatabaseError", 
            "title": "new ForeignKeyConstraintError()"
        }, 
        {
            "location": "/api/errors/#new-exclusionconstrainterror", 
            "text": "View code  Thrown when an exclusion constraint is violated in the database  Extends:  DatabaseError", 
            "title": "new ExclusionConstraintError()"
        }, 
        {
            "location": "/api/errors/#new-validationerroritemmessage-type-path-value", 
            "text": "View code  Validation Error Item\nInstances of this class are included in the  ValidationError.errors  property.  Params:     Name  Type  Description      message  string  An error message    type  string  The type of the validation error    path  string  The field that triggered the validation error    value  string  The value that generated the error", 
            "title": "new ValidationErrorItem(message, type, path, value)"
        }, 
        {
            "location": "/api/errors/#new-connectionerror", 
            "text": "View code  A base class for all connection related errors.  Extends:  BaseError", 
            "title": "new ConnectionError()"
        }, 
        {
            "location": "/api/errors/#parent_1", 
            "text": "View code  The connection specific error which triggered this one", 
            "title": "parent"
        }, 
        {
            "location": "/api/errors/#new-connectionrefusederror", 
            "text": "View code  Thrown when a connection to a database is refused  Extends:  ConnectionError", 
            "title": "new ConnectionRefusedError()"
        }, 
        {
            "location": "/api/errors/#new-accessdeniederror", 
            "text": "View code  Thrown when a connection to a database is refused due to insufficient privileges  Extends:  ConnectionError", 
            "title": "new AccessDeniedError()"
        }, 
        {
            "location": "/api/errors/#new-hostnotfounderror", 
            "text": "View code  Thrown when a connection to a database has a hostname that was not found  Extends:  ConnectionError", 
            "title": "new HostNotFoundError()"
        }, 
        {
            "location": "/api/errors/#new-hostnotreachableerror", 
            "text": "View code  Thrown when a connection to a database has a hostname that was not reachable  Extends:  ConnectionError", 
            "title": "new HostNotReachableError()"
        }, 
        {
            "location": "/api/errors/#new-invalidconnectionerror", 
            "text": "View code  Thrown when a connection to a database has invalid values for any of the connection parameters  Extends:  ConnectionError", 
            "title": "new InvalidConnectionError()"
        }, 
        {
            "location": "/api/errors/#new-connectiontimedouterror", 
            "text": "View code  Thrown when a connection to a database times out  Extends:  ConnectionError", 
            "title": "new ConnectionTimedOutError()"
        }, 
        {
            "location": "/api/errors/#new-instanceerror", 
            "text": "View code  Thrown when a some problem occurred with Instance methods (see message for details)  Extends:  BaseError   This document is automatically generated based on source code comments. Please do not edit it directly, as your changes will be ignored. Please write on  IRC , open an issue or a create a pull request if you feel something can be improved. For help on how to write source code documentation see  JSDoc  and  dox", 
            "title": "new InstanceError()"
        }, 
        {
            "location": "/changelog/", 
            "text": "Future\n\n\n\n\n[ADDED] include now supports string as an argument (on top of model/association), string will expand into an association matched literally from Model.associations\n\n\n[FIXED] Accept dates as string while using \ntypeValidation\n \n#6453\n\n\n[FIXED] - ORDER clause was not included in subquery if \norder\n option value was provided as plain string (not as an array value)\n\n\n[FIXED] support for CLS with \ncls-bluebird\n module\n\n\n\n\n4.0.0-1\n\n\n\n\n[CHANGED] Removed \nmodelManager\n parameter from \nModel.init()\n \n#6437\n\n\n[FIXED] Made \nModel.init()\n behave like \nsequelize.define()\n (hooks are called and options have proper defaults) \n#6437\n\n\n[ADDED] \nrestartIdentity\n option for truncate in postgres \n#5356\n\n\n[INTERNAL] Migrated to \nnode-mysql2\n for prepared statements \n#6354\n\n\n[ADDED] SQLCipher support via the SQLite connection manager\n\n\n[CHANGED] Range type bounds now default to \npostgres default\n \n[)\n (inclusive, exclusive) \n#5990\n\n\n[ADDED] Support for range operators \n#5990\n\n\n[FIXED] Broken transactions in \nMySQL\n \n#3568\n\n\n[FIXED] \nModel.count\n don't include attributes \n#5057\n\n\n[INTERNALS] Updated \ninflection\n dependency and pinned version and expose all used \ninflection\n methods on \nUtils\n\n\n[ADDED] \nSequelize.useInflection\n method\n\n\n[FIXED] \nhasOne\n throws error on update with a primary key \n#6069\n\n\n[FIXED] \nModel.count\n gives SQL syntax error when using \ndistinct\n \n#4840\n\n\n[ADDED] \nModel.count\n now allow specifying column to count on, use \noptions.col\n \n#4442\n\n\n[ADDED] \nDEBUG\n support \n#2852\n\n\n[ADDED] Intensive connection logging \n#851\n\n\n[FIXED] Only \nbelongsTo\n uses \nas\n to construct foreign key - revert of \n#5957\n introduced in 4.0.0-0\n\n\n[CHANGED] \nSequelize.Promise\n is now an independent copy of \nbluebird\n library \n#5974\n\n\n[ADDED] before/after Save hook \n#2702\n\n\n[ADDED] Remove hooks by reference \n#6155\n\n\n[ADDED] before/after Upsert hook \n#3965\n\n\n[FIXED] Modifying \noptions\n in \nbeforeFind\n throws error \n#5675\n\n\n[REMOVED] \nclassMethods\n and \ninstanceMethods\n \n#5869\n\n\n[CHANGED] \nSequelize.Validator\n is now an independent copy of \nvalidator\n library\n\n\n[FIXED] Don't patch \nvalidator\n library globally \n#6196\n\n\n[CHANGED] \nignore\n for create was renamed to \nignoreDuplicates\n \n#6138\n\n\n[FIXED] Index names not quoted properly in \nremoveIndex\n \n#5888\n\n\n[FIXED] \nInt4\n range not properly parsed \n#5747\n\n\n[FIXED] \nupsert\n does not fail anymore on not null validations \n#5711\n\n\n[FIXED] Don't remove includes from count queries and unify findAndCount and count queries. \n#6123\n\n\n[FIXED] \nModel.count\n with \noptions.col\n and \noptions.include\n works properly now\n\n\n[FIXED] \nbulkCreate\n don't map fields to attributes properly \n#4476\n#3908\n#4103\n#3764\n#3789\n#4600\n\n\n[FIXED] \nsync\n don't handle global \noptions.logging\n properly \n#5788\n\n\n[FIXED] \nattribute:[]\n throw errors with \ninclude\n or \nthrough\n \n#5078\n \n#4222\n \n#5958\n \n#5590\n \n#6139\n \n#4866\n \n#6242\n\n\n[SECURITY] \nGEOMETRY\n and \nGEOGRAPHY\n SQL injection attacks \n#6194\n\n\n[FIXED] \nDECIMAL\n now supports \nUNSIGNED\n / \nZEROFILL\n (MySQL) \n#2038\n\n\n[FIXED] Generate correct SQL of nested include when quoteIdentifiers is false. (Postgres) \n#6351\n\n\n[FIXED] Generate correct SQL for JSON attributes with quote.\n\n#6406\n\n\n[FIXED] Nested query return correct result when quoteIdentifiers is false. (Postgres) \n#6363\n\n\n[FIXED] Fixed an issue where changing multiple ENUM columns in PostgreSQL could break. [#6203] (https://github.com/sequelize/sequelize/issues/6203)\n\n\n[FIXED] Add \nparent\n, \noriginal\n and \nsql\n properties to \nUniqueConstraintError\n\n\n\n\nBC breaks:\n\n\n\n\nRange type bounds now default to \npostgres default\n \n[)\n (inclusive, exclusive), previously was \n()\n (exclusive, exclusive)\n\n\nOnly \nbelongsTo\n uses \nas\n to construct foreign key - revert of \n#5957\n introduced in 4.0.0-0\n\n\nSequelize uses an independent copy of \nbluebird\n library. This means (1) promises returned from Sequelize methods are instances of \nSequelize.Promise\n but not global \nBluebird\n and (2) the CLS patch does not affect global \nBluebird\n.\n\n\nDropped support for \nclassMethods\n and \ninstanceMethods\n. As Models are now ES6 classes \nclassMethods\n can be directly assigned and \ninstanceMethods\n should be added to \nModel.prototype\n\n\nSequelize.Validator\n is now a cloned version of \nvalidator\n, It will not pollute global library methods.\n\n\nignore\n for create was renamed to \nignoreDuplicates\n\n\n\n\n4.0.0-0\n\n\n\n\n[FIXED] Pass ResourceLock instead of raw connection in MSSQL disconnect handling\n\n\n[CHANGED] Remove \nhookValidate\n in favor of \nvalidate\n with \nhooks: true | false\n.\n\n\n[REMOVED] Support for \nreferencesKey\n\n\n[CHANGED] Throw if \ndialect\n is not provided to the constructor\n\n\n[CHANGED] Throw \nbluebird.AggregateError\n instead of array from \nbulkCreate\n when validation fails\n\n\n[FIXED] \n$notIn: []\n is now converted to \nNOT IN (NULL)\n  \n#4859\n\n\n[FIXED] Add \nraw\n support to \ninstance.get()\n \n#5815\n\n\n[ADDED] Compare deletedAt against current timestamp when using paranoid \n#5880\n\n\n[FIXED] \nBIGINT\n gets truncated \n#5176\n\n\n[FIXED] Trigger afterCreate hook after all nested includes (for hasMany or belongsToMany associations) have been created to be consistent with hasOne.\n\n\n[REMOVED] Support for \npool:false\n\n\n[REMOVED] Default transaction isolation level \n#5094\n\n\n[ADDED] Add logging for mysql warnings, observant of the \nshowWarnings\n option. \n#5900\n\n\n[REMOVED] MariaDB dialect\n\n\n[FIXED] \nhasOne\n now prefer aliases to construct foreign key \n#5247\n\n\n[CHANGED] \ninstance.equals\n now only checks primary keys, instead of all attributes.\n\n\n[REWRITE] Rewrite model and instance to a single class - instance instanceof Model \n#5924\n\n\n[REMOVED] Counter cache plugin\n\n\n[FIXED] All associations now prefer aliases to construct foreign key \n#5267\n\n\n[REMOVED] Default transaction auto commit \n#5094\n\n\n[REMOVED] Callback support for hooks \n#5228\n\n\n\n\nBC breaks:\n\n\n\n\nhookValidate\n removed in favor of \nvalidate\n with \nhooks: true | false\n. \nvalidate\n returns a promise which is rejected if validation fails\n\n\nRemoved support for \nreferencesKey\n, use a \nreferences\n object\n\n\nRemove default dialect\n\n\nWhen \nbulkCreate\n is rejected because of validation failure it throws a \nbluebird.AggregateError\n instead of an array. This object is an array-like so length and index access will still work, but \ninstanceof\n array will not\n\n\n$notIn: []\n will now match all rows instead of none\n\n\n(MySQL) \nBIGINT\n now gets converted to string when number is too big\n\n\nRemoved support for \npool:false\n, if you still want to use single connection set \npool.max\n to \n1\n\n\nRemoved default \nREPEATABLE_READ\n transaction isolation, use config option to explicitly set it\n\n\nRemoved MariaDB dialect - this was just a thin wrapper around MySQL, so using \ndialect: 'mysql'\n instead should work with no further changes\n\n\ninstance.equals\n now provides reference equality (do two instances refer to the same row, i.e. are their primary key(s) equal). Use \ninstance.get()\n to get and compare all values.\n\n\nInstances (database rows) are now instances of the model, instead of being a separate class. This means you can replace User.build() with new User() and sequelize.define with User extends Sequelize.Model. See #5924\n\n\nThe counter cache plugin, and consequently the \ncounterCache\n option for associations has been removed. The plugin is seeking a new maintainer - You can find the code \nhere\n\n\nAll associations type will prefer \nas\n when constructing the \nforeignKey\n name. You can override this by \nforeignKey\n option.\n\n\nRemoved default \nAUTO COMMIT\n for transaction. Its only sent if explicitly set by user or required by dialects (like \nmysql\n)\n\n\nHooks no longer provide a callback - you can return a \nthen\n-able instead if you are doing async stuff\n\n\n\n\n3.23.2\n\n\n\n\n[FIXED] Type validation now works with non-strings due to updated validator@5.0.0 \n#5861\n\n\n[FIXED] Improved offset and limit support for SQL server 2008 \n#5616\n\n\n[FIXED] options object cloned in all Sequelize methods (so not modified within Sequelize)\n\n\n[ADDED] Test coverage for options object not being modified\n\n\n\n\n3.23.1\n\n\n\n\n[FIXED] Postgres DECIMAL precision. (PostgreSQL) \n#4893\n\n\n[FIXED] removeColumn tries to delete non-existant foreign key constraint (mysql) \n#5808\n\n\n[FIXED] Relation constraints not being applied correctly \n#5865\n\n\n\n\n3.23.0\n\n\n\n\n[FIXED] Invalid query generated when using LIKE + ANY \n#5736\n\n\n[FIXED] Method QueryInterface.bulkDelete no longer working when the model parameter is missing. (PostgreSQL) \n#5615\n\n\n[ADDED] Context and custom options for deep creation\n\n\n[FIXED] Dates with millisecond precision are inserted correctly in MySQL \n#5855\n\n\n\n\n3.22.0\n\n\n\n\n[FIXED] Fix defaultValues getting overwritten on build\n\n\n[FIXED] Queue queries against tedious connections\n\n\n[ADDED] Enable type validation for all queries\n\n\n\n\n3.21.0\n\n\n\n\n[FIXED] Confirmed that values modified in validation hooks are preserved \n#3534\n\n\n[FIXED] Support lower case type names in SQLite \n#5482\n\n\n[FIXED] Support calling \nsetAssociation\n twice on \nhasOne\n \n#5315\n\n\n[INTERNALS] Removed dependency on wellknown in favor of terraformer-wkt-parser\n\n\n[ADDED] Benchmarking feature \n#2494\n\n\n[INTERNALS] Add \nUtils.mergeDeep\n - allows lodash to be updated to latest version\n\n\n\n\n3.20.0\n\n\n\n\n[ADDED] rejectOnEmpty mode \n#272\n \n#5480\n\n\n[ADDED] \nbeforeCount\n hook \n#5209\n\n\n[ADDED] \nvalidationFailed\n hook \n#1626\n\n\n[ADDED] Support for IEEE floating point literals in postgres and sqlite \n#5194\n\n\n[FIXED] \naddColumn\n with reference in mysql \n#5592\n\n\n[FIXED] \nfindAndCountAll\n generates invalid SQL, subQuery moves to LEFT OUTER JOIN \n#5445\n\n\n[FIXED] \ncount\n methods pollute the options.includes \n#4191\n\n\n[FIXED] Invalid SQL generated when using group option along with attributes \n#3009\n\n\n[FIXED] Mark index as \nunique: true\n when \ntype: 'UNIQUE'\n. Fixes \n#5351\n\n\n[FIXED] Improper escaping of bound arrays of strings on Postgres, SQLite, and Microsoft SQL Server\n\n\n\n\n3.19.3\n\n\n\n\n[FIXED] \nupdatedAt\n and \ncreatedAt\n values are now set before validation \n#5367\n\n\n[FIXED] \ndescribeTable\n maintains proper enum casing in mysql \n#5321\n\n\n[FIXED] Parsing of dates in MySQL, when a named timezone is used \n#4208\n\n\n[FIXED] Truncating in Postgres, when table has a schema \n#4306\n\n\n[FIXED] Moved initialization of scopes later in the model init process. Fixes attribute exclusion in scopes, \n#4735\n and \n#4925\n\n\n[FIXED] Multiple custom unique validation messages being overwritten by the first-defined message, \n#4920\n\n\n\n\n3.19.0\n\n\n\n\n[ADDED] Geography support for postgres\n\n\n[FIXED] Migrations failed to add foreign key \n#966\n\n\n[FIXED] Prevent race condition after transaction finished \n#5222\n\n\n[FIXED] Fixed Instance.reload issues (\n#4844\n and \n#4452\n)\n\n\n[FIXED] Fix upsert when primary key contains \n.field\n (internal API change for \nqueryInterface.upsert\n) \n#4755\n\n\n[FIXED] Default value for \ndefaultScope\n is now an empty object. This fixes calling \n.scope('defaultScope')\n when no scope is explicitly defined, see \n#5277\n\n\n\n\n3.18.0\n\n\n\n\n[ADDED] Support silent: true in bulk update \n#5200\n\n\n[ADDED] \nretry\n object now part of global settings and can be overridden per call.  The default is 5 retries with a backoff function.  \nretry\n object can be passed to options with max: 0 to turn off this behavior.\n\n\n[ADDED] Sqlite now retries database queries that return SQL_BUSY as the status.\n\n\n[ADDED] Add \nIF EXIST\n to postgres alter enum \n#4464\n\n\n[FIXED] Postgres destroy with \nwhere\n fails on JSONB data \n#5092\n\n\n[FIXED] hasMany.separate with foreign keys having \nfield\n\n\n\n\n3.17.3\n\n\n\n\n[FIXED] Regression with array values from security fix in 3.17.2\n\n\n\n\n3.17.2\n\n\n\n\n[SECURITY] Force non-buffer blob values to string, https://github.com/nodejs/node/issues/4660\n\n\n\n\n3.17.1\n\n\n\n\n[FIXED] Reverted benchmarking feature since it does not compile on Node v4.0\n\n\n\n\n3.17.0\n\n\n\n\n[SECURITY] Fixed injection vulnerability for order/limit\n\n\n[FIXED] MySQL throws error when null GEOMETRY data results in empty buffer \n#4953\n\n\n\n\n3.16.0\n\n\n\n\n[ADDED] PostgreSQL tsrange (Range of timestamp without time zone) data type support.\n\n\n[ADDED] hasOne scope support \n#5113\n\n\n[FIXED] attributes from multiple scopes does not merge  \n#4856\n\n\n[FIXED] Support Unicode strings in mssql \n#3752\n\n\n[FIXED] Do not inject include twice in \noptions.include\n \n#5106\n\n\n[FIXED] Expand and validate include in \naggregate\n\n\n\n\n3.15.1\n\n\n\n\n[FIXED] calling Model.update() modifies passed values  \n#4520\n\n\n[FIXED] Instance can be chained on .set() and other methods \n#4702\n\n\n[FIXED] includes nested from a \nseparate\n include now work properly \n#5080\n\n\n\n\n3.15.0\n\n\n\n\n[ADDED] Improve support for pg range type to handle unbound ranges, +/-infinity bounds and empty ranges\n\n\n[FIXED] Postgres issue when using named timezone  \n#4307\n\n\n[FIXED] Add support for Babel/ES6 imports \n#4881\n\n\n\n\n3.14.2\n\n\n\n\n[FIXED] Model.aggregate methods now support attributes and where conditions with fields. \n#4935\n\n\n[FIXED] Don't overwrite options.foreignKey in associations \n#4927\n\n\n[FIXED] Support nested \n$col\n keys. \n#4849\n\n\n\n\n3.14.1\n\n\n\n\n[FIXED] Issue with transaction options leaking and certain queries running outside of the transaction connection.\n\n\n\n\n3.14.0\n\n\n\n\n[FIXED] Apply scopes to \naggregate\n \n#4764\n\n\n[FIXED] Improved postgres enum schema handling \n#4796\n\n\n[ADDED/FIXED]\u00a0Lower case \nonDelete\n option to allow the use of \nonDelete: 'CASCADE', hooks: true\n.\n\n\n[FIXED] Ignore attributes in \ncount\n \n#4566\n\n\n\n\n3.13.0\n\n\n\n\n[FIXED] timestamp columns are no longer undefined for associations loaded with \nseparate\n. \n#4740\n\n\n[FIXED] Mark unscoped model as \n.scoped\n, to prevent injection of default scope on includes \n#4663\n\n\n[ADDED] \n.previous\n now returns and object of previous values when called without \nkey\n. This brings the API in line with \n.changed\n\n\n\n\n3.12.1\n\n\n\n\n[FIXED] Mark postgres connection as invalid if the connection is reset \n#4661\n\n\n[FIXED] Remove usage of \"limit\" in cases where it's unnecessary, which fixes some of the cases mentioned in [#4404] (https://github.com/sequelize/sequelize/issues/4404)\n\n\n[SECURITY] Security concern with \n$model.field$\n, refactored to now require \n$col: 'model.field'\n\n\n\n\n3.12.0\n\n\n\n\n[ADDED] Preliminary support for \ninclude.on\n.\n\n\n[FIXED] Partial rollback of datatype validations by hiding it behind the \ntypeValidation\n flag.\n\n\n[FIXED] Don't try to select the primary key for models without primary key \n#4607\n\n\n[FIXED] Apply \nattributes\n when including a scoped model. \n#4625\n\n\n[FIXED] Use bits instead of strings for mssql booleans. \n#4621\n\n\n[FIXED] BulkCreate validation fails for properties with \nfield\n \n#3787\n\n\n\n\n3.11.0\n\n\n\n\n[INTERNALS] Updated dependencies \n#4594\n\n\nbluebird@2.10.1\n\n\ndottie@1.0.0\n\n\nwellknown@0.4.0\n\n\n\n\n\n\n[INTERNALS] Updated devDependencies \n#4594\n\n\nmysql@2.9.0\n\n\ncoffee-script\n\n\n\n\n\n\n[FIXED] Add limit to \nfindOne\n when using queries like \n{ id: { $gt ...\n \n#4416\n\n\n[FIXED] Include all with scopes \n#4584\n\n\n[INTERNALS] Corrected spelling seperate -\n separate\n\n\n[ADDED] Added \ninclude\n and \nexclude\n to \noptions.attributes\n. \n#4074\n\n\n[FIXED/INTERNALS] Only recurse on plain objects in \nmapOptionFieldNames\n. \n#4596\n\n\n\n\n3.10.0\n\n\n\n\n[ADDED] support \nsearch_path\n for postgres with lots of schemas \n#4534\n\n\n[ADDED] Expose Association constructor as \nSequelize.Association\n\n\n[ADDED] beforeSync/afterSync/beforeBulkSync/afterBulksync hooks \n#4479\n\n\n[FIXED] Calling set with dot.separated key on a JSON/JSONB attribute will not flag the entire object as changed \n#4379\n\n\n[FIXED] instances returned from \nbulkCreate\n now has \nisNewRecord: false\n and should be updateable if using \nreturning: true\n with dialects that support it.\n\n\n[FIXED] Find with Include with a where clause generates wrong SQL \n#3940\n\n\n[FIXED] ON DELETE constraint should default to CASCADE if foreignKey has allowNull: false] \n#2831\n\n\n[FIXED] sqlite file handle leak\n\n\n\n\n3.9.0\n\n\n\n\n[ADDED] beforeRestore/afterRestore hooks \n#4371\n\n\n[ADDED] Map raw fields back to attributes names when using \nmapToModel\n or \nreturning\n \n#3995\n\n\n[ADDED] \nskip\n now supports filtering out modewl validators \n#4528\n\n\n[INTERNALS] \noptions\n has been renamed to \n$options\n in instance.js \n#4429\n\n\n[FIXED] Reload doesn't synchronize a null include \n#4353\n\n\n[FIXED] commit/rollback multiple times on same transaction \n#4491\n\n\n[FIXED] memory leak / options mangle for scopes with include \n#4470\n\n\n[FIXED] custom \ntargetKey\n for belongsTo on a target with a primary key will now correctly create foreign key constraints \n#4455\n\n\n\n\n3.8.0\n\n\n\n\n[ADDED] \nversion\n on \nSequelize\n returning the current npm/package.json version \n#4459\n\n\n\n\n3.7.0\n\n\n\n\n[ADDED] Define field dependencies for VIRTUAL types that are automatically pulled into \nattributes\n \n#4420\n\n\n[FIXED] Fall back to a default version when parsing the DB version fails \n#4368\n\n\n[FIXED] Fix a bug where passing null as the second parameter to \nsequelize.where\n would fail \n#4334\n\n\n[FIXED] An error is thrown if a column called \nid\n is added, but not marked as primary key, and no other pk is present. \n#4139\n\n\n[FIXED] Cast to boolean when querying JSON \n#4257\n\n\n\n\n3.6.0\n\n\n\n\n[ADDED] Model.findCreateFind: A more performant findOrCreate that will not work under a transaction (atleast not in postgres)\n\n\n[FIXED] Show indexes query on Postgres fails to return functional indexes \n#3911\n\n\n[FIXED] Custom field names in json queries\n\n\n[FIXED] JSON cast key using the equality operator. \n#3824\n\n\n[FIXED] Map column names with \n.field\n in scopes with includes. \n#4210\n\n\n[FIXED] \naddScope\n when the model does not have any initial scopes \n#4243\n\n\n[FIXED] Fixed destroy with limit in PG when the primary key is aliassed \n#4027\n\n\n[FIXED] Clone the options object in \nincrement\n, \ndecrement\n, \ndestroy\n, \nreload\n, \nrestore\n, and \nsave\n. \n#4023\n\n\n[FIXED] Throw a \nSequelize.Error\n when \nauthenticate\n fails \n#4209\n\n\n[FIXED] BTM would remove any previously added association getters \n#4268\n\n\n[FIXED] Pass through connection mode options to sqlite\n\n#4288\n\n\n[INTERNALS] Updated dependencies \n#4332\n\n\ntoposort-class@1.0.1\n\n\nvalidator@4.0.4\n\n\nwkx@0.1.0\n\n\n\n\n\n\n[INTERNALS] Updated devDependencies \n#4336\n\n\nchai-spies@0.7.0\n\n\ndox@0.8.0\n\n\nmysql@2.8.0\n\n\n\n\n\n\n\n\n3.5.1\n\n\n\n\n[FIXED] Fix bug with nested includes where a middle include results in a null value which breaks $findSeparate.\n\n\n\n\n3.5.0\n\n\n\n\n[ADDED] \ninclude.separate\n with \ninclude.limit\n support for HasMany associations.\n\n\n[ADDED] Added default validation based on attribute types. \n#3472\n. The validation \ncannot\n be disabled. If you really want to completely disable it, you can remove the \nvalidate\n function from the corresponding datatype, but know that this permanently disables the validation.\n\n\n[ADDED] \ndescribeTable\n  now marks the primary key (Reroll of \n#3703\n)\n\n\n[ADDED] Automatically determine the version of the database upon first connection \n#4192\n. This will be useful going forward in order to provide support for older database versions.\n\n\n[ADDED] \naddScope\n \n#3963\n\n\n[FIXED] Fix findOrCreate regression trying to add a transaction even if there is none\n\n\n[FIXED] Fix save to be noop when nothing changed\n\n\n[FIXED] Call \nconformOptions\n on default scope \n#4157\n\n\n[FIXED] Call \nconformOptions\n on scopes returned by functions \n#3991\n\n\n[FIXED] Calling \nvalidateIncludedElements\n should not add an aliassed primary key multiple times \n#4127\n\n\n[FIXED] Handle scoped model in includes properly \n#3700\n\n\n[FIXED] Enum naming with schemas \n#3171\n and \n#3563\n\n\n[FIXED] Prevent polution of the lodash object by using \nrunInContext\n \n#2281\n\n\n\n\n3.4.1\n\n\n\n\n[FIXED] Fix belongs-to-many \ncountAssociations\n - ambigious id when through model has id\n\n\n\n\n3.4.0\n\n\n\n\n[ADDED] \ncountAssociations\n for hasMany and belongsToMany\n\n\n[ADDED] Geometry support for postgres\n\n\n[FIXED] Fix wrong count for \nfindAndCountAll\n with required includes \n#4016\n\n\n[FIXED] Fix problems related to parsing of unique constraint errors \n#4017\n and \n#4012\n\n\n[FIXED] Fix postgres path variable being surrounded by quotes to often in unique constraint errors \n#4034\n\n\n[FIXED] Fix \nremoveAttributes(id)\n not setting \nthis.primaryKeys\n to null\n\n\n[FIXED] Run validations on the through model during add, set and create for \nbelongsToMany\n\n\n\n\n3.3.2\n\n\n\n\n[FIXED] upsert no longer updates with default values each time \n#3994\n\n\n\n\n3.3.1\n\n\n\n\n[FIXED] regression in \nattributes\n support for 'reload' \n#3976\n\n\n\n\n3.3.0\n\n\n\n\n[FIXED] Fix \nPromise#nodeify()\n and \nPromise#done()\n not passing CLS context\n\n\n[FIXED] Creating and dropping enums in transaction, only for PostgreSQL \n#3782\n\n\n[FIXED] $or/$and inside a where clause always expects the input to be an array \n#3767\n\n\n[ADDED] Unique constraints may now include custom error messages\n\n\n[ADDED] It's possible now to remove a hook by name\n\n\n[ADDED] Hook name can be passed via the direct method \n#3901\n\n\n\n\n3.2.0\n\n\n\n\n[ADDED] Add support for new option \ntargetKey\n in a belongs-to relationship for situations where the target key is not the id field.\n\n\n[ADDED] Add support for keyword \nafter\n in options of a field (useful for migrations), only for MySQL. \n#3166\n\n\n[ADDED] There's a new sequelize.truncate function to truncate all tables defined through the sequelize models \n#2671\n\n\n[ADDED] Add support for MySQLs TINYTEXT, MEDIUMTEXT and LONGTEXT. \n#3836\n\n\n[ADDED] Provide warnings if you misuse data types. \n#3839\n\n\n[FIXED] Fix a case where Postgres arrays containing JSONB type was being generated as JSON type.\n\n\n[FIXED] Fix a case where \ntype\n in \nsequelize.query\n was not being set to raw. \n#3800\n\n\n[FIXED] Fix an issue where include all was not being properly expanded for self-references \n#3804\n\n\n[FIXED] Fix instance.changed regression to not return false negatives for not changed null values \n#3812\n\n\n[FIXED] Fix isEmail validator to allow args: true \n#3770\n\n\n[FIXED] Fix all occasions where \noptions.logging\n was not used correctly \n#3834\n\n\n[FIXED] Fix \nModel#destroy()\n to correctly use \noptions.transaction\n\n\n[FIXED] Fix \nQueryInterface#showIndex()\n to correctly pass on \noptions.transaction\n\n\n\n\n3.1.1\n\n\n\n\n[FIXED] Always quote aliases, even when quoteIdentifiers is false \n#1589\n\n\n[FIXED] No longer clones Instances in model finder options\n\n\n[FIXED] Fix regression in util.toDefaultValue not returning the data types \n#3733\n\n\n\n\n3.1.0\n\n\n\n\n[ADDED] It is now possible to defer constraints in PostgreSQL by added a property \ndeferrable\n to the \nreferences\n object of a field.\n\n\n[FIXED] Fix an issue with the build in isIP validator returning false negatives \n#3756\n\n\n\n\n3.0.1\n\n\n\n\n[FIXED] \ninclude.attributes = []\n will no longer force the inclusion of the primary key, making it possible to write aggregates with includes.\n\n\n[CHANGED] The \nreferences\n property of model attributes has been transformed to an object: \n{type: Sequelize.INTEGER, references: { model: SomeModel, key: 'some_key' }}\n. The former format (\nreferences\n and \nreferecesKey\n) still exists but is deprecated and will be removed in 4.0.\n\n\n\n\n3.0.0\n\n\n3.0.0 cleans up a lot of deprecated code, making it easier for us to develop and maintain features in the future.\n\n\n\n\n[ADDED] findById / findByPrimary takes a single value as argument representing the primary key to find.\n\n\n[CHANGED] belongsToMany relations MUST now be given a \nthrough\n argument.\n\n\n[CHANGED] findOne / findAll / findAndCount / findOrCreate now only takes a single options argument instead of a options and queryOptions argument. So set transaction, raw, etc on the first options argument.\n\n\n[CHANGED] The accessor for belongsToMany relationships is now either the \nas\n argument or the target model name pluralized.\n\n\n[REMOVED] N:M relationships can no longer be represented by 2 x hasMany\n\n\n[REMOVED] Model.create / Model.bulkCreate / Instance.save no longer takes an array of fields as its second argument, use \noptions.fields\n instead.\n\n\n[REMOVED] Query Chainer has been removed\n\n\n[REMOVED] Migrations have been removed, use umzug instead\n\n\n[REMOVED] Model.findAllJoin has been removed\n\n\n[REMOVED] sequelize.query now only takes \nsql and options\n as arguments, the second and fourth argument \ncallee\n and \nreplacements\n have been removed and should be set via \noptions.instance\n / \noptions.model\n and  \noptions.replacements\n instead.\n\n\n[REMOVED] \ninstance.isDirty\n has been removed, use \ninstance.changed()\n instead\n\n\n[REMOVED] \ninstance.values\n has been removed, use \ninstance.get()\n instead\n\n\n[REMOVED] \ninstance.primaryKeyValues\n has been removed.\n\n\n[REMOVED] \ninstance.identifiers\n has been removed, use \ninstance.where()\n instead\n\n\n[REMOVED] \ninstance.isDeleted\n has been removed, simply check the timestamp with \nget('deletedAt')\n instead\n\n\n[REMOVED] \ninstance.increment/decrement\n now longer takes a number as it's second argument.\n\n\n[REMOVED/SECURITY] findOne no longer takes a string / integer / binary argument to represent a primaryKey. Use findById instead\n\n\n[REMOVED/SECURITY] \nwhere: \"raw query\"\n is no longer legal, you must now explicitely use \nwhere: [\"raw query\", [replacements]]\n\n\n[FIXED] Fix showIndexQuery so appropriate indexes are returned when a schema is used\n\n\n[FIXED] Fix addIndexQuery error when the model has a schema\n\n\n[FIXED] Fix app crash in sqlite while running in special unique constraint errors \n#3730\n\n\n[FIXED] Fix bulkCreate: do not insert NULL for undefined values \n#3729\n\n\n[FIXED] Fix trying to roll back a comitted transaction if an error occured while comitting resulting in an unhandled rejection \n#3726\n\n\n[FIXED] Fix regression in beforeUpdate hook where \ninstance.changed()\n would always be false \n#3727\n\n\n[FIXED] Fix trying to roll back a comitted transaction if an error occured while comitting\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nMost of the changes in 3.0.0 are BC breaking, read the changelog for 3.0.0 carefully.\n\n\nThe error that is thrown when a column is declared to be an enum but without any values used to \"Values for ENUM haven't been defined\" and is now \"Values for ENUM have not been defined\".\n\n\n\n\n2.1.3\n\n\n\n\n[BUG] Fix regression introduced in 2.1.2: updatedAt not set anymore \n#3667\n\n\n[BUG] Fix managed transactions not rolling back if no thenable was provided in the transaction block \n#3667\n\n\n\n\n2.1.2\n\n\n\n\n[BUG] \nModel.create()/update()\n no longer attempts to save undefined fields.\n\n\n\n\n2.1.1\n\n\n\n\n[BUG] .get() now passes along options correctly when using a custom getter\n\n\n[BUG] Fix managed transactions not rolling back if an error occured the transaction block \n#3661\n\n\n[BUG] Fix a node-webkit issue \n#3650\n\n\n[FEATURE] Lock modes in Postgres now support \nOF table\n\n\n[FEATURE] New transaction lock modes \nFOR KEY SHARE\n and \nNO KEY UPDATE\n for Postgres 9.3+\n\n\n[FEATURE/REFACTOR] Rewritten scopes with complete support for includes and scopes across associations\n\n\n\n\n2.1.0\n\n\n\n\n[BUG] Enable standards conforming strings on connection in postgres. Adresses \n#3545\n\n\n[BUG] instance.removeAssociation(s) do not fire the select query twice anymore\n\n\n[BUG] Error messages thrown by the db in languages other than english do not crash the app anymore (mysql, mariadb and postgres only) \n#3567\n\n\n[FEATURE] \nJSONB\n\n\n[FEATURE] All querys can be logged individually by inserting \nlogging: fn\n in the query option.\n\n\n[FEATURE] Partial index support for Postgres with \nindex.where\n\n\n[REFACTOR] \n.changed()\n now works proactively by setting a flag on \nset\n instead of matching reactively. Note that objects and arrays will not be checked for equality on set and will always result in a change if they are \nset\n.\n\n\n[DEPRECATED] The query-chainer is deprecated and will be removed in version 2.2. Please use promises instead.\n\n\n[REMOVED] Events are no longer supported.\n\n\n[INTERNALS] Updated dependencies.\n\n\nbluebird@2.9.24\n\n\n\n\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nEvents support have been removed so using \n.on('success')\n or \n.success()\n is no longer supported. Try using \n.then()\n instead.\n\n\nTrying to apply a scope that does not exist will always throw an error\n\n\n\n\n2.0.6\n\n\n\n\n[BUG] Don't update virtual attributes in Model.update. Fixes \n#2860\n\n\n[BUG] Fix for newlines in hstore \n#3383\n\n\n[BUG] Fix unique key handling in Model.update \n#3474\n\n\n[BUG] Fix issue with Model.create() using fields not specifying and non-incremental primary key \n#3458\n\n\n[FEATURE] \nfield\n support for Model.update \n#3498\n\n\n[INTERNALS] Updated dependencies. Most notably we are moving up one major version on lodash. If you are using \nsequelize.Utils._\n, notice that the semantics for many matching functions have changed to include a check for \nhasOwnProperty\n\n\ndottie@0.3.1\n\n\ninflection@1.6.0\n\n\nlodash@3.5.0\n\n\nvalidator@3.34\n\n\ngeneric-pool@2.2.0\n\n\n\n\n\n\n[INTERNALS] Updated devDependencies.\n\n\ncoffee-script@1.9.1\n\n\ndox@0.7.1\n\n\nmysql@2.6.2\n\n\n\n\n\n\n\n\n2.0.5\n\n\n\n\n[FEATURE] Highly experimental support for nested creation \n#3386\n\n\n\n\n2.0.4\n\n\n\n\n[BUG] Fixed support for 2 x belongsToMany without foreignKey defined and association getter/adder \n#3185\n\n\n[BUG] No longer throws on \nModel.hasHook()\n if no hooks are defiend \n#3181\n\n\n[BUG] Fixed issue with \n{$and: []}\n\n\n[BUG] Fixed issue with N:M relations with primary keys with field defined\n\n\n\n\n2.0.3\n\n\n\n\n[BUG] Support for plain strings, ints and bools on JSON insert\n\n\n[BUG] Fixed regression where \n{$in: []}\n would result in \nIN ()\n rather than \nIN (NULL)\n \n#3105\n \n#3132\n\n\n[BUG] Fixed bug where 2 x \nbelongsToMany\n with \nforeignKey\n but no \notherKey\n defined would result in 3 keys instead of 2. \n#2991\n\n\n[BUG] Fixed regression with \nwhere: sequelize.json()\n \n#3138\n\n\n[BUG] Fixed support for \nfield\n with \n$or\n/\n$and\n \n#3153\n\n\n\n\n2.0.2\n\n\n\n\n[BUG] Fixed regression with \nDataTypes.ARRAY(DataTypes.STRING(length))\n \n#3106\n\n\n[BUG] Fixed regression where \n.or([{key: value}, {key: value, key2: value}])\n would result in 3 \nA OR B OR C\n rather than \nA OR (B AND C)\n \n#3107\n\n\n[BUG] Fixed regression with \nDataTypes.DECIMAL(10)\n resulting in \n10, undefined\n \n#3119\n\n\n[BUG] Fixed issue with dangling \nWHERE\n query on \nModel.update(values, {where: {}})\n \n#3113\n\n\n\n\n2.0.1\n\n\n\n\n[BUG] Fixed issue with empty \ninclude.where\n\n\n[BUG] Fixed issue with otherKey generation for self-association N:M\n\n\n\n\n2.0.0\n\n\n\n\n[BUG] Fixed \nfield\n support for \nincrement\n and \ndecrement\n.\n\n\n[FEATURE/BUG] Raw queries always return all results (including affected rows etc). This means you should change all promise listeners on \nsequelize.query\n to use \n.spread\n instead of \n.then\n, unless you are passing a query type.\n\n\n[BUG] Support for composite primary keys in upsert \n#3065\n\n\n[BUG] Support for \nfield\n in upsert\n\n\n[FEATURE] Support for setting an initial autoincrement option in mysql \n#3076\n\n\n[FEATURE] Test coverage for Node.js 0.12 and io.js 1.x\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nThe default query type for \nsequelize.query\n is now \nRAW\n - this means that two arguments (results and metadata) will be returned by default and you should use \n.spread\n\n\nThe 4th argument to \nsequelize.query\n has been deprecated in favor of \noptions.replacements\n\n\n\n\n2.0.0-rc8\n\n\n\n\n[FEATURE] CLS Support. CLS is also used to automatically pass the transaction to any calls within the callback chain when using \nsequelize.transaction(function() ...\n.\n\n\n[BUG] Fixed issue with paranoid deletes and \ndeletedAt\n with a custom field.\n\n\n[BUG] No longer crahes on \nwhere: []\n\n\n[FEATURE] Validations are now enabled by default for upsert.\n\n\n[FEATURE] Preliminary support for \ninclude.through.where\n\n\n[SECURITY/BUG] Fixed injection issue in direction param for order\n\n\n\n\n2.0.0-rc7\n\n\n\n\n[FEATURE] Throw an error if no where clause is given to \nModel.destroy()\n.\n\n\n[BUG] Fixed issue with \norder: sequelize.literal('string')\n\n\n[FEATURE] add \nclone: true\n support to \n.get()\n. Is needed when using \ndelete\n on values from a \n.get()\n (\ntoJSON()\n, \nthis.values\n). (.get() is just a reference to the values for performance reasons when there's no custom getters or includes)\n\n\n[FEATURE] add \nsequelize.escape(value)\n convenience method\n\n\n[BUG] Fixes crash with \nfindAll({include: [Model], order: sequelize.literal()})\n\n\n[FEATURE] Now possible to pass \ncreatedAt\n and \nupdatedAt\n values to \nModel.create\n/\nModel.bulkCreate\n when using silent: true (when importing datasets with existing timestamps)\n\n\n[FEATURE] \ninstance.update()\n using default fields will now automatically also save and validate values provided via \nbeforeUpdate\n hooks\n\n\n[BUG] Fixed bad SQL when updating a JSON attribute with a different \nfield\n\n\n[BUG] Fixed issue with creating and updating values of a \nDataTypes.ARRAY(DataTypes.JSON)\n attribute\n\n\n[BUG] \nModel.bulkCreate([{}], {returning: true})\n will now correctly result in instances with primary key values.\n\n\n[BUG] \ninstance.save()\n with \nfields: []\n (as a result of \n.changed()\n being \n[]\n) will no result in a noop instead of an empty update query.\n\n\n[BUG] Fixed case where \nfindOrCreate\n could return \n[null, true]\n when given a \ndefaults\n value that triggered a unique constraint error.\n\n\n\n\nBackwards compatibility changes\n\n\n\n\ninstance.update()\n using default fields will now automatically also save and validate values provided via \nbeforeUpdate\n hooks\n\n\nSequelize no longer supports case insensitive mysql enums\n\n\npg-hstore\n has been moved to a devDependency, Postgres users will have to install \npg-hstore\n manually alongside \npg\n: \n$ npm install pg pg-hstore\n\n\n\n\n2.0.0-rc6\n\n\n\n\n[BUG] Fixed issue with including by association reference and where\n\n\n\n\n2.0.0-rc5\n\n\n\n\n[BUG] Fixed issue with subquery creating \ninclude.where\n and a paranoid main model.#2749/#2769\n\n\nUniqueConstraintErrors will now extend from ValidationError making it possible to catch both with \n.catch(ValidationError)\n\n\n[FEATURE] Adds \n{save: false}\n for belongsTo relationship setters. \nuser.setOrganization(organization, {save: false})\n will then only set the foreign key value, but not trigger a save on \nuser\n.\n\n\n[FEATURE] When updating an instance \n_previousDataValues\n will now be updated after \nafterUpdate\n hooks have been run rather than before allowing you to use \nchanged\n in \nafterUpdate\n\n\n[BUG] Sequelize will no longer fail on a postgres constraint error not defined by Sequelize\n\n\n[FEATURE] It's now possible to pass an association reference to include. \nvar Owner = Company.belongsTo(User, {as: 'owner'}; Company.findOne({include: [Owner]});\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nWhen updating an instance \n_previousDataValues\n will now be updated after \nafterUpdate\n hooks have been run rather than before allowing you to use \nchanged\n in \nafterUpdate\n\n\n\n\n2.0.0-rc4\n\n\n\n\n[INTERNALS] Update \ninflection\n dependency to v1.5.3\n\n\n[FEATURE] Replaced string error messages for connection errors with error objects. \n#2576\n\n\n[FEATURE] Support for updating fields on duplicate key in bulk update (mysql only) \n#2692\n\n\n[FEATURE] Basic support for Microsoft SQL Server\n\n\n[INTERNALS] Deprecate migration logic. This is now implemented in \numzug\n and the \nCLI\n.\n\n\n[BUG] Fixed various inconsistencies with \nInstance.update\n and how it behaves together with \ncreate\n, \nfields\n and more.\n\n\n[BUG] Fixed crash/bug when using \ninclude.where\n together with \nassociation.scope\n\n\n[BUG] Fixed support for \nInstance.destroy()\n and \nfield\n for postgres.\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nSome of the string error messages for connection errors have been replaced with actual error instances. Checking for connection errors should now be more consistent.\n\n\n\n\n2.0.0-rc3\n\n\n\n\n[FEATURE] Added the possibility of removing multiple associations in 1 call \n#2338\n\n\n[FEATURE] Undestroy method for paranoid models \n#2540\n\n\n[FEATURE] Support for UPSERT\n\n\n[BUG] Add support for \nfield\n named the same as the attribute in \nreload\n, \nbulkCreate\n and \nsave\n \n#2348\n\n\n[BUG] Copy the options object in association getters. \n#2311\n\n\n[BUG] \nModel#destroy()\n now supports \nfield\n, this also fixes an issue with \nN:M#removeAssociation\n and \nfield\n\n\n[BUG] Customized error message can now be set for unique constraint that was created manually (not with sync, but e.g. with migrations) or that has fields with underscore naming. This was problem at least with postgres before.\n\n\n[BUG] Fixed a bug where plain objects like \n{ in: [...] }\n were not properly converted to SQL when combined with a sequelize method (\nfn\n, \nwhere\n etc.). Closes \n#2077\n\n\n[BUG] Made the default for array search in postgres exact comparison instead of overlap\n\n\n[BUG] Allow logging from individual functions even though the global logging setting is false. Closes \n#2571\n\n\n[BUG] Allow increment/decrement operations when using schemata\n\n\n[BUG] Allow createTable with schema\n\n\n[BUG] Fix some issues with findAndCount and include\n\n\n[INTERNALS] Update \ninflection\n dependency to v1.5.2\n\n\n[REMOVED] Remove query generation syntactic sugar provided by \nnode-sql\n, as well as the dependency on that module\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nWhen eager-loading a many-to-many association, the attributes of the through table are now accessible through an attribute named after the through model rather than the through table name singularized. i.e. \nTask.find({include: Worker})\n where the table name for through model \nTaskWorker\n is \nTableTaskWorkers\n used to produce \n{ Worker: { ..., TableTaskWorker: {...} } }\n. It now produces \n{ Worker: { ..., TaskWorker: {...} } }\n. Does not affect models where table name is auto-defined by Sequelize, or where table name is model name pluralized.\n\n\nWhen using \nModel#find()\n with an \norder\n clause, the table name is prepended to the \nORDER BY\n SQL. e.g. \nORDER BY Task.id\n rather than \nORDER BY id\n. The change is to avoid ambiguous column names where there are eager-loaded associations with the same column names. A side effect is that code like \nTask.findAll( { include: [ User ], order: [ [ 'Users.id', 'ASC' ] ] } )\n will now throw an error. This should be achieved with \nTask.findAll( { include: [ User ], order: [ [ User, 'id', 'ASC' ] ] } )\n instead.\n\n\nNested HSTORE objects are no longer supported. Use DataTypes.JSON instead.\n\n\nIn PG \nwhere: { arr: [1, 2] }\n where the \narr\n column is an array will now use strict comparison (\n=\n) instead of the overlap operator (\n). To obtain the old behaviour, use \nwhere: { arr: { overlap: [1, 2] }}\n\n\nThe default \nfields\n for \nInstance#save\n (when not a new record) is now an intersection of the model attributes and the changed attributes making saves more atomic while still allowing only defined attributes.\n\n\nSyntactic sugar for query generation was removed. You will no longer be able to call Model.dataset() to generate raw sql queries\n\n\n\n\n2.0.0-rc2\n\n\n\n\n[FEATURE] Added to posibility of using a sequelize object as key in \nsequelize.where\n. Also added the option of specifying a comparator\n\n\n[FEATURE] Added countercache functionality to hasMany associations \n#2375\n\n\n[FEATURE] Basic JSON support \n#2314\n\n\n[BUG] Fixes regression bug with multiple hasMany between the same models with different join tables. Closes \n#2316\n\n\n[BUG] Don't set autocommit in nested transactions \n#2418\n\n\n[BUG] Improved \nfield\n support\n\n\n\n\n2.0.0-rc1\n\n\n\n\n[BUG] Fixed an issue with foreign key object syntax for hasOne and belongsTo\n\n\n[FEATURE] Added \nfield\n and \nname\n to the object form of foreign key definitions\n\n\n[FEATURE] Added support for calling \nPromise.done\n, thus explicitly ending the promise chain by calling done with no arguments. Done with a function argument still continues the promise chain, to maintain BC.\n\n\n[FEATURE] Added \nscope\n to hasMany association definitions, provides default values to association setters/finders \n#2268\n\n\n[FEATURE] We now support transactions that automatically commit/rollback based on the result of the promise chain returned to the callback.\n\n\n[BUG] Only try to create indexes which don't already exist. Closes \n#2162\n\n\n[FEATURE] Hooks are passed options\n\n\n[FEATURE] Hooks need not return a result - undefined return is interpreted as a resolved promise\n\n\n[FEATURE] Added \nfind()\n hooks\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nThe \nfieldName\n property, used in associations with a foreign key object \n(A.hasMany(B, { foreignKey: { ... }})\n, has been renamed to \nname\n to avoid confusion with \nfield\n.\n\n\nThe naming of the join table entry for N:M association getters is now singular (like includes)\n\n\nSignature of hooks has changed to pass options to all hooks. Any hooks previously defined like \nModel.beforeCreate(values)\n now need to be \nModel.beforeCreate(values, options)\n etc.\n\n\nResults returned by hooks are ignored - changes to results by hooks should be made by reference\n\n\nModel.destroy()\n signature has been changed from \n(where, options)\n to \n(options)\n, options now take a where parameter.\n\n\nModel.update()\n signature has been changed from \n(values, where, options)\n to \n(values, options)\n, options now take a where parameter.\n\n\nThe syntax for \nModel.findOrBuild\n has changed, to be more in line with the rest of the library. \nModel.findOrBuild(where, defaults);\n becomes \nModel.findOrBuild({ where: where, defaults: defaults });\n.\n\n\n\n\nv2.0.0-dev13\n\n\nWe are working our way to the first 2.0.0 release candidate.\n\n\n\n\n[FEATURE] Added to option of setting a timezone offset in the sequelize constructor (\ntimezone\n option). This timezone is used when initializing a connection (using \nSET TIME ZONE\n or equivalent), and when converting a timestamp string from the DB to a JS date with mysql (postgres stores the timezone, so for postgres we rely on what's in the DB).\n\n\n[FEATURE] Allow setting plural and singular name on the model (\noptions.name\n in \nsequelize.define\n) and in associations (\noptions.as\n) to circumvent issues with weird pluralization.\n\n\n[FEATURE] Added support for passing an \nindexes\n array in options to \nsequelize.define\n. \n#1485\n. See API reference for details.\n\n\n[FEATURE/INTERNALS] Standardized the output from \nQueryInterface.showIndex\n.\n\n\n[FEATURE] Include deleted rows in find \n#2083\n\n\n[FEATURE] Make addSingular and addPlural for n:m associations (fx \naddUser\n and \naddUsers\n now both accept an array or an instance.\n\n\n[BUG] Hid \ndottie.transform\n on raw queries behind a flag (\nnest\n) \n#2064\n\n\n[BUG] Fixed problems with transaction parameter being removed / not passed on in associations \n#1789\n and \n#1968\n\n\n[BUG] Fix problem with minConnections. \n#2048\n\n\n[BUG] Fix default scope being overwritten \n#2087\n\n\n[BUG] Fixed updatedAt timestamp not being set in bulk create when validate = true. \n#1962\n\n\n[INTERNALS] Replaced lingo with inflection\n\n\n[INTERNALS] Removed underscore.string dependency and moved a couple of helper functions from \nUtils._\n to \nUtils\n\n\n[INTERNALS] Update dependencies\n\n\nvalidator 3.2.0 -\n 3.16.1\n\n\nmoment 2.5.0 -\n 2.7.0\n\n\ngeneric-pool 2.0.4 -\n 2.1.1\n\n\nsql 0.35.0 -\n 0.39.0\n\n\n\n\n\n\n[INTERNALS] Use a transaction inside \nfindOrCreate\n, and handle unique constraint errors if multiple calls are issues concurrently on the same transaction\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nWe are using a new inflection library, which should make pluralization and singularization in general more robust. However, a couple of pluralizations have changed as a result:\n\n\nPerson is now pluralized as people instead of persons\n\n\n\n\n\n\nAccesors for models with underscored names are no longer camel cased automatically. For example, if you have a model with name \nmy_model\n, and \nmy_other_model.hasMany(my_model)\n, the getter will now be \ninstance_of_my_model.getMy_model\n instead of \n.getMyModel\n.\n\n\nRemoved support for setting sequelize.language. If your model names are not in english, use the name option provided by \nsequelize.name\n to defined singular and plural forms for your model.\n\n\nModel names are now used more verbatim in associations. This means that if you have a model named \nTask\n (plural T), or an association specifying \n{ as: 'Task' }\n, the tasks will be returned as \nrelatedModel.Tasks\n instead of \nrelatedModel.tasks\n. For more information and how to mitigate this, see https://github.com/sequelize/sequelize/wiki/Upgrading-to-2.0#inflection-replaces-lingo-and-changes-to-naming-conventions\n\n\nRemoved the freezeAssociations option - use model and assocation names instead to provide the plural form yourself\n\n\nRemoved sequelize.language option (not supported by inflection)\n\n\nError handling has been refactored. Code that listens for :\n\n\nAll Error classes properly inherit from Error and a common SequelizeBaseError base\n\n\nInstance Validator returns a single instance of a ValidationError which contains an errors array property. This property contains individual error items for each failed validation.\n\n\n\n\nValidationError includes a \nget(path)\n method to find all broken validations for a path on an instance. To migrate existing error handling, switch from array indexing to using the get method:\n\n\nOld: \nerr.validateCustom[0]\n\nNew: \nerr.get('validateCustom')[0]\n\n- The syntax for findOrCreate has changed, to be more in line with the rest of the library. \nModel.findOrCreate(where, defaults);\n becomes \nModel.findOrCreate({ where: where, defaults: defaults });\n.\n\n\n\n\n\n\n\n\n\n\nv2.0.0-dev12\n\n\n\n\n[FEATURE] You can now return a promise to a hook rather than use a callback\n\n\n[FEATURE] There is now basic support for assigning a field name to an attribute \nname: {type: DataTypes.STRING, field: 'full_name'}\n\n\n[FEATURE] It's now possible to add multiple relations to a hasMany association, modelInstance.addRelations([otherInstanceA, otherInstanceB])\n\n\n[FEATURE] \ndefine()\n stores models in \nsequelize.models\n Object e.g. \nsequelize.models.MyModel\n\n\n[FEATURE] The \nset\n / \nadd\n / \nhas\n methods for associations now allow you to pass the value of a primary key, instead of a full Instance object, like so: \nuser.addTask(15);\n.\n\n\n[FEATURE] Support for FOR UPDATE and FOR SHARE statements \n#1777\n\n\n[FEATURE] n:m createAssocation now returns the target model instance instead of the join model instance\n\n\n[FEATURE] Extend the \nforeignKey\n option for associations to support a full data type definition, and not just a string\n\n\n[FEATURE] Extract CLI into \nseparate projects\n.\n\n\n[FEATURE] Sqlite now inserts dates with millisecond precision\n\n\n[FEATURE] Sequelize.VIRTUAL datatype which provides regular attribute functionality (set, get, etc) but never persists to database.\n\n\n[BUG] An error is now thrown if an association would create a naming conflict between the association and the foreign key when doing eager loading. Closes \n#1272\n\n\n[BUG] Fix logging options for sequelize.sync\n\n\n[BUG] find no longer applies limit: 1 if querying on a primary key, should fix a lot of subquery issues.\n\n\n[BUG] Transactions now use the pool so you will never go over your pool defined connection limit\n\n\n[BUG] Fix use of Sequelize.literal in eager loading and when renaming attributes \n#1916\n\n\n[BUG] Use the provided name for a unique index if one is given, instead of concating the column names together \n#1944\n\n\n[BUG] Create a composite primary key for doubled linked self reference \n#1891\n\n\n[INTERNALS] \nbulkDeleteQuery\n was removed from the MySQL / abstract query generator, since it was never used internally. Please use \ndeleteQuery\n instead.\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nSequelize now returns promises instead of its custom event emitter from most calls. This affects methods that return multiple values (like \nfindOrCreate\n or \nfindOrInitialize\n). If your current callbacks do not accept the 2nd success parameter you might be seeing an array as the first param. Either use \n.spread()\n for these methods or add another argument to your callback: \n.success(instance)\n -\n \n.success(instance, created)\n.\n\n\n.success()\n/\n.done()\n and any other non promise methods are now deprecated (we will keep the codebase around for a few versions though). on('sql') persists for debugging purposes.\n\n\nModel association calls (belongsTo/hasOne/hasMany) are no longer chainable. (this is to support being able to pass association references to include rather than model/as combinations)\n\n\nQueryInterface\n no longer emits global events. This means you can no longer do things like \nQueryInterface.on('showAllSchemas', function ...\n\n\nsequelize.showAllSchemas\n now returns an array of schemas, instead of an array containinig an array of schemas\n\n\nsequelize.transaction()\n now returns a promise rather than a instance of Sequelize.Transaction\n\n\nbulkCreate\n, \nbulkUpdate\n and \nbulkDestroy\n (and aliases) now take both a \nhooks\n and an \nindividualHooks\n option, \nhooks\n defines whether or not to run the main hooks, and \nindividualHooks\n defines whether to run hooks for each instance affected.\n\n\nIt is no longer possible to disable pooling, disable pooling will just result in a 1/1 pool.\n\n\n\n\nv2.0.0-dev11\n\n\nCaution: This release contains many changes and is highly experimental\n\n\n\n\n[PERFORMANCE] increased build performance when using include, which speeds up findAll etc.\n\n\n[BUG] Made it possible to use HSTORE both in attribute: HSTORE and attribute: { type: HSTORE } form. Thanks to @tomchentw \n#1458\n\n\n[FEATURE] n:m now marks the columns of the through table as foreign keys and cascades them on delete and update by default.\n\n\n[FEATURE] 1:1 and 1:m marks columns as foreign keys, and sets them to cascade on update and set null on delete. If you are working with an existing DB which does not allow null values, be sure to override those options, or disable them completely by passing constraints: false to your assocation call (\nM1.belongsTo(M2, { constraints: false})\n).\n\n\n[BUG] Removed the hard dependency on pg, allowing users to use pg.js\n\n\n[BUG] Fixed a bug with foreign keys pointing to attributes that were not integers. Now your primaryKey can be a string, and associations will still work. Thanks to @fixe \n#1544\n\n\n[BUG] Fix a case where createdAt timestamp would not be set when updatedAt was disabled  Thanks to @fixe \n#1543\n\n\n[BUG] Fix a case where timestamps were not being write protected in \nset\n when underscored=true. janmeier \n#1523\n\n\n[FEATURE/BUG] Prefetching/includes now fully support schemas\n\n\n[FEATURE] Centralize logging. \n#1566\n\n\n[FEATURE/BUG] hstore values are now parsed on find/findAll. Thanks to @nunofgs \n#1560\n\n\n[FEATURE] Read cli options from a file. Thanks to @codeinvain  \n#1540\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nThe \nnotNull\n validator has been removed, use the Schema's \nallowNull\n property.\n\n\nAll Validation errors now return a sequelize.ValidationError which inherits from Error.\n\n\nselectedValues has been removed for performance reasons, if you depend on this, please open an issue and we will help you work around it.\n\n\nforeign keys will now correctly be based on the alias of the model\n\n\nif you have any 1:1 relations where both sides use an alias, you'll need to set the foreign key, or they'll each use a different foreign key based on their alias.\n\n\nforeign keys for non-id primary keys will now be named for the foreign key, i.e. pub_name rather than pub_id\n\n\nif you have non-id primary keys you should go through your associations and set the foreignKey option if relying on a incorrect _id foreign key\n\n\nsyncOnAssocation has been removed. It only worked for n:m, and having a synchronous function (hasMany) that invokes an asynchronous function (sync) without returning an emitter does not make a lot of sense. If you (implicitly) depended on this feature, sequelize.sync is your friend. If you do not want to do a full sync, use custom through models for n:m (\nM1.hasMany(M2, { through: M3})\n) and sync the through model explicitly.\n\n\nJoin tables will be no longer be paranoid (have a deletedAt timestamp added), even though other models are.\n\n\nAll tables in select queries will now be aliased with the model names to be support schemas. This will affect people stuff like `where: {'table.attribute': value}\n\n\n\n\nv1.7.10\n\n\n\n\n[FEATURE] ilike support for postgres \n#2122\n\n\n[FEATURE] distinct option for count \n#2079\n\n\n[BUG] various fixes\n\n\n\n\nv1.7.9\n\n\n\n\n[BUG] fixes issue with custom primary keys and N:M join tables \n#1929\n\n\n\n\nv1.7.8\n\n\n\n\n[FEATURE] adds rlike support for mysql\n\n\n\n\nv1.7.7\n\n\n\n\n[BUG] fixes issue where count/findAndCountAll would throw on empty rows \n#1849\n\n\n\n\nv1.7.6\n\n\n\n\n[BUG] fixes issue where primary key is also foreign key \n#1818\n\n\n\n\nv1.7.5\n\n\n\n\n[BUG] fixes bug with some methods relying on table information throwing strange errors \n#1686\n\n\n\n\nv1.7.3\n\n\n\n\n[BUG] fixes foreign key types for hasMany\n\n\n\n\nv1.7.2\n\n\n\n\n[BUG] fixes transactions support for 1-to-1 association setters.\n\n\n\n\nv1.7.1\n\n\n\n\n[BUG] fixes issue where relations would not use transactions probably in adders/setters.\n\n\n\n\nv1.7.0\n\n\n\n\n[FEATURE] covers more advanced include cases with limiting and filtering (specifically cases where a include would be in the subquery but its child include wouldnt be, for cases where a 1:1 association had a 1:M association as a nested include)\n\n\n[BUG] fixes issue where connection would timeout before calling COMMIT resulting in data never reaching the database \n#1429\n\n\n\n\nv1.7.0-rc9\n\n\n\n\n[PERFORMANCE] fixes performance regression introduced in rc7\n\n\n[FEATURE] include all relations for a model \n#1421\n\n\n[BUG] N:M adder/getter with through model and custom primary keys now work\n\n\n\n\nv1.7.0-rc8\n\n\n\n\n[BUG] fixes bug with required includes without wheres with subqueries\n\n\n\n\nv1.7.0-rc7\n\n\n\n\n[BUG] ORDER BY statements when using includes should now be places in the appropriate sub/main query more intelligently.\n\n\n[BUG] using include.attributes with primary key attributes specified should no longer result in multiple primary key attributes being selected \n#1410\n\n\n[DEPENDENCIES] all dependencies, including Validator have been updated to the latest versions.\n\n\n\n\nBackwards compatability changes\n\n\n\n\n.set() will no longer set values that are not a dynamic setter or defined in the model. This only breaks BC since .set() was introduced but restores original .updateAttributes functionality where it was possible to 'trust' user input.\n\n\n\n\nv1.7.0-rc6\n\n\n\n\n[BUG] Encode binary strings as bytea in postgres, and fix a case where using a binary as key in an association would produce an error \n1364\n. Thanks to @SohumB\n\n\n\n\nv1.7.0-rc5\n\n\n\n\n[FEATURE] sync() now correctly returns with an error when foreign key constraints reference unknown tables\n\n\n[BUG] sync() no longer fails with foreign key constraints references own table (toposort self-dependency error)\n\n\n[FEATURE] makes it possible to specify exactly what timestamp attributes you want to utilize \n#1334\n\n\n[FEATURE] Support coffee script files in migrations. \n#1357\n\n\n[FEATURE] include.where now supports Sequelize.and()/.or(). \n#1361\n\n\n\n\nv1.7.0-rc4\n\n\n\n\n[BUG] fixes issue with postgres sync and enums \n#1020\n\n\n[BUG] fixes various issues with limit and includes \n#1322\n\n\n[BUG] fixes issues with migrations/queryInterface createTable and enums\n\n\n[BUG] migration/queryInterface.addIndex() no longer fails on reserved keywords like 'from'\n\n\n[FEATURE] bulkCreate now supports a \nignoreDuplicates\n option for MySQL, SQLite and MariaDB that will use \nINSERT IGNORE\n\n\n[BUG] fixes regression bug with 1:M self associations\n\n\n[FEATURE] significant performance improvements for 1:1 and single primary key includes for 500+ rows \n#1333\n\n\n\n\nBackwards compatability changes\n\n\n\n\nfind/findAll will now always return primary keys regardless of \nattributes\n settings. (Motivation was to fix various issues with eager loading)\n\n\n\n\nv1.7.0-rc3\n\n\n\n\n[FEATURE] dropAllTables now takes an option parameter with \nskip\n as an option \n#1280\n\n\n[FEATURE] implements .spread for eventemitters \n#1277\n\n\n[BUG] fixes some of the mysql connection error bugs \n#1282\n\n\n[Feature] Support for OR queries.\n\n\n[Feature] Support for HAVING queries. \n#1286\n\n\n[FEATURE] bulkUpdate and bulkDestroy now returns affected rows. \n#1293\n\n\n[BUG] fixes transaction memory leak issue\n\n\n[BUG] fixes security issue where it was possible to overwrite the id attribute when defined by sequelize (screwup - and fix - by mickhansen)\n\n\n\n\nv1.7.0-rc2\n\n\n\n\n[BUG] fixes unixSocket connections for mariadb \n#1248\n\n\n[BUG] fixes a hangup issue for mysql \n#1244\n\n\n[BUG] improves handling of uncaught errors in eventemitter \n#1245\n\n\n[BUG] fixes bug with mysql replication and pool settings \n#1251\n\n\n[BUG] fixes bug where through models created by N:M associations would inherit hooks \n#1263\n\n\n[FEATURE] .col()/.literal()/etc now works with findAll \n#1249\n\n\n[BUG] now currectly handles connection timeouts as errors \n#1207\n\n\n\n\nv2.0.0 (alpha1)\n\n\n\n\n[FEATURE] async validations. \n#580\n. thanks to Interlock\n\n\n\n\nv1.7.0-rc1\n\n\n\n\n[FEATURE] instance.createAssociationInstance functionality added \n#1213\n\n\n[BUG] fixes a few bugs with transactions in regards to associations\n\n\n[FEATURE] add error handling for transaction creation\n\n\n[FEATURE] \nsequelize --undo\n will now actually undo migrations. Its basically an alias for \nsequelize --migrate --undo\n. \n#1059\n\n\n[BUG] fix bug where \n{where: {ne: null}}\n would result in \n!= NULL\n instead of \nIS NOT NULL\n \n#1231\n\n\n[BUG] fixes a bug with validation skipping using the \nfields\n options. \n#1233\n\n\n[BUG] fixes a bug with postgres and setters \n#1234\n\n\n[BUG] fixes it so \nfield: {type: Sequelize.ENUM(value1, value2)}\n works\n\n\n\n\nBackwards compatability changes\n\n\n\n\nHooks are no longer passing value hashes. Instead, they are now passing instances of the model.\n\n\nHook callbacks no longer take two arguments (previously: \nerr, newValues\n). They only take the error argument since values can be changed directly on the model instance.\n\n\n\n\nv1.7.0-beta8\n\n\n\n\n[FEATURE] max()/min() now supports dates \n#1200\n\n\n[FEATURE] findAndCountAll now supports the include option\n\n\n\n\nBackwards compatibility changes\n\n\n\n\nYou will now need to include the relevant subtables to query on them in finders (find/findAll)\n\n\nSubquery logic no longer depends on where objects with keys containing '.', instead where options on the include options \n#1199\n\n\n\n\nv1.7.0-beta7\n\n\n\n\n[FEATURE] Nested eager loading / prefetching is now supported. \nDocs\n\n\n[FEATURE] Eager loading / prefetching now supports inner joins and extending the ON statement \n#1199\n\n\n[FEATURE] Eager loading / prefetching now returns the attributes of through models aswell \n#1198\n\n\n[FEATURE] New set/get/changed/previous feature \n#1182\n\n\nVarious bug fixes\n\n\n\n\nBackwards compatibility changes\n\n\nNone\n\n\nv1.7.0-beta1\n\n\n\n\n[DEPENDENCIES] Upgraded validator for IPv6 support. \n#603\n. thanks to durango\n\n\n[DEPENDENCIES] replaced underscore by lodash. \n#954\n. thanks to durango\n\n\n[DEPENDENCIES] Upgraded pg to 2.0.0. \n#711\n. thanks to durango\n\n\n[DEPENDENCIES] Upgraded command to 2.0.0 and generic-pool to 2.0.4. thanks to durango\n\n\n[DEPENDENCIES] No longer require semver. thanks to durango\n\n\n[BUG] Fix string escape with postgresql on raw SQL queries. \n#586\n. thanks to zanamixx\n\n\n[BUG] \"order by\" is now after \"group by\". \n#585\n. thanks to mekanics\n\n\n[BUG] Added decimal support for min/max. \n#583\n. thanks to durango\n\n\n[BUG] Null dates don't break SQLite anymore. \n#572\n. thanks to mweibel\n\n\n[BUG] Correctly handle booleans in MySQL. \n#608\n. Thanks to terraflubb\n\n\n[BUG] Fixed empty where conditions in MySQL. \n#619\n. Thanks to terraflubb\n\n\n[BUG] Allow overriding of default columns. \n#635\n. Thanks to sevastos\n\n\n[BUG] Fix where params for belongsTo \n#658\n. Thanks to mweibel\n\n\n[BUG] Default ports are now declared in the connector manager, which means the default port for PG correctly becomes 5432. \n#633\n. durango\n\n\n[BUG] Columns with type BOOLEAN were always added to toJSON output, even if they were not selected \nsee\n. janmeier\n\n\n[BUG] Hstore is now fully supported \n#695\n. thanks to tadman\n\n\n[BUG] Correct join table name for tables with custom names \n#698\n. thanks to jjclark1982\n\n\n[BUG] PostgreSQL should now be able to insert empty arrays with typecasting. \n#718\n. thanks to durango\n\n\n[BUG] Fields should be escaped by quoteIdentifier for max/min functions which allows SQL reserved keywords to be used. \n#719\n. thanks to durango\n\n\n[BUG] Fixed bug when trying to save objects with eagerly loaded attributes \n#716\n. thanks to iamjochen\n\n\n[BUG] Strings for .find() should be fixed. Also added support for string primary keys to be found easily. \n#737\n. thanks to durango\n\n\n[BUG] bulkCreate would have problems with a disparate field list \n#738\n. thanks to durango\n\n\n[BUG] Fixed problems with quoteIdentifiers and {raw: false} option on raw queries \n#751\n. thanks to janmeier\n\n\n[BUG] Fixed SQL escaping with sqlite and unified escaping \n#700\n. thanks to PiPeep\n\n\n[BUG] Fixed Postgres' pools \nff57af63\n\n\n[BUG] Fixed BLOB/TEXT columns having a default value declared in MySQL \n#793\n. thanks to durango\n\n\n[BUG] You can now use .find() on any single integer primary key when throwing just a number as an argument \n#796\n. thanks to durango\n\n\n[BUG] Adding unique to a column for Postgres in the migrator should be fixed \n#795\n. thanks to durango\n\n\n[BUG] For MySQL users, if their collation allows case insensitivity then allow enums to be case insensitive as well \n#794\n. thanks to durango\n\n\n[BUG] Custom primary key (not keys, just singular) should no longer be a problem for models when using any of the data retrievals with just a number or through associations \n#771\n. thanks to sdephold \n durango\n\n\n[BUG] Default schemas should now be utilized when describing tables \n#812\n. thanks to durango\n\n\n[BUG] Fixed eager loading for many-to-many associations. \n#834\n. thanks to lemon-tree\n\n\n[BUG] allowNull: true enums can now be null \n#857\n. thanks to durango\n\n\n[BUG] Fixes Postgres' ability to search within arrays. \n#879\n. thanks to durango\n\n\n[BUG] Find and finAll would modify the options objects, now the objects are cloned at the start of the method \n#884\n thanks to janmeier. Improved in \n#899\n thanks to hackwaly\n\n\n[BUG] Add support for typed arrays in SqlString.escape and SqlString.arrayToList \n#891\n. thanks to LJ1102\n\n\n[BUG] Postgres requires empty array to be explicitly cast on update \n#890\n. thanks to robraux\n\n\n[BUG] Added tests \n bugfixes for DAO-Factory.update and array of values in where clause \n#880\n. thanks to domasx2\n\n\n[BUG] sqlite no longer leaks a global \ndb\n variable \n#900\n. thanks to xming\n\n\n[BUG] Fix for counts queries with no result \n#906\n. thanks to iamjochem\n\n\n[BUG] Allow include when the same table is referenced multiple times using hasMany \n#913\n. thanks to janmeier\n\n\n[BUG] Allow definition of defaultValue for the timestamp columns (createdAt, updatedAt, deletedAt) \n#930\n. Thank to durango\n\n\n[BUG] Don't delete foreign keys of many-to-many associations, if still needed. \n#961\n. thanks to sdepold\n\n\n[BUG] Update timestamps when incrementing and decrementing \n#1023\n. durango\n\n\n[FEATURE] Validate a model before it gets saved. \n#601\n. thanks to durango\n\n\n[FEATURE] Schematics. \n#564\n. thanks to durango\n\n\n[FEATURE] Foreign key constraints. \n#595\n. thanks to optilude\n\n\n[FEATURE] Support for bulk insert (\nDAOFactory\n.bulkCreate()\n, update (\nDAOFactory\n.update()\n) and delete (\nDAOFactory\n.destroy()\n) \n#569\n. thanks to optilude\n\n\n[FEATURE] Add an extra \nqueryOptions\n parameter to \nDAOFactory.find\n and \nDAOFactory.findAll\n. This allows a user to specify \n{ raw: true }\n, meaning that the raw result should be returned, instead of built DAOs. Usefull for queries returning large datasets, see \n#611\n janmeier\n\n\n[FEATURE] Added convenient data types. \n#616\n. Thanks to Costent\n\n\n[FEATURE] Binary is more verbose now. \n#612\n. Thanks to terraflubb\n\n\n[FEATURE] Promises/A support. \n#626\n. Thanks to kevinbeaty\n\n\n[FEATURE] Added Getters/Setters method for DAO. \n#538\n. Thanks to iamjochem\n\n\n[FEATURE] Added model wide validations. \n#640\n. Thanks to tremby\n\n\n[FEATURE] \nfindOrCreate\n now returns an additional flag (\ncreated\n), that is true if a model was created, and false if it was found \n#648\n. janmeier\n\n\n[FEATURE] Field and table comments for MySQL and PG. \n#523\n. MySQL by iamjochen. PG by janmeier\n\n\n[FEATURE] BigInts can now be used for autoincrement/serial columns. \n#673\n. thanks to sevastos\n\n\n[FEATURE] Use moment for better postgres timestamp strings. \n#710\n. Thanks to seth-admittedly\n\n\n[FEATURE] Keep milliseconds in timestamps for postgres. \n#712\n. Thanks to seth-admittedly\n\n\n[FEATURE] You can now set lingo's language through Sequelize. \n#713\n. Thanks to durango\n\n\n[FEATURE] Added a \nfindAndCountAll\n, useful for pagination. \n#533\n. Thanks to iamjochen\n\n\n[FEATURE] Made explicit migrations possible. \n#728\n. Thanks to freezy\n\n\n[FEATURE] Added support for where clauses containing !=, \n etc. and support for date ranges  \n#727\n. Thanks to durango\n\n\n[FEATURE] Added support for model instances being referenced \n#761\n thanks to sdepold\n\n\n[FEATURE] Added support for specifying the path to load a module for a dialect. \n#766\n thanks to sonnym.\n\n\n[FEATURE] Drop index if exists has been added to sqlite \n#766\n thanks to coderbuzz\n\n\n[FEATURE] bulkCreate() now has a third argument which gives you the ability to validate each row before attempting to bulkInsert \n#797\n. thanks to durango\n\n\n[FEATURE] Added \nisDirty\n to model instances. \n#798\n. Thanks to mstorgaard\n\n\n[FEATURE] Added possibility to use env variable for the database connection. \n#784\n. Thanks to sykopomp.\n\n\n[FEATURE] Blob support. janmeier\n\n\n[FEATURE] We can now define our own custom timestamp columns \n#856\n. thanks to durango\n\n\n[FEATURE] Scopes. \n#748\n. durango\n\n\n[FEATURE] Model#find() / Model#findAll() is now working with strings. \n#855\n. Thanks to whito.\n\n\n[FEATURE] Shortcut method for getting a defined model. \n#868\n. Thanks to jwilm.\n\n\n[FEATURE] Added Sequelize.fn() and Sequelize.col() to properly call columns and functions within Sequelize. \n#882\n. thanks to janmeier\n\n\n[FEATURE] Sequelize.import supports relative paths. \n#901\n. thanks to accerqueira.\n\n\n[FEATURE] Sequelize.import can now handle functions. \n#911\n. Thanks to davidrivera.\n\n\n[FEATURE] Uses sequelize.fn and sequelize.col functionality to allow you to use the value of another column or a function when updating. It also allows you to use a function as a default value when supported (in sqlite and postgres). \n#928\n. thanks to janmeier\n\n\n[FEATURE] Added possibility to pass options to node-mysql. \n#929\n. thanks to poying\n\n\n[FEATURE] Triggers for Postgres. \n#915\n. Thanks to jonathana.\n\n\n[FEATURE] Support for join tables. \n#877\n. Thanks to janmeier.\n\n\n[FEATURE] Support for hooks. \n#894\n. Thanks to durango.\n\n\n[FEATURE] Support for literals and casts. \n#950\n. Thanks to durango.\n\n\n[FEATURE] Model#findOrBuild. \n#960\n. Thanks to durango.\n\n\n[FEATURE] Support for MariaDB. \n#948\n. Thanks to reedog117 and janmeier.\n\n\n[FEATURE] Filter through associations. \n#991\n. Thanks to snit-ram.\n\n\n[FEATURE] Possibility to disable loging for .sync \n#937\n. Thanks to durango\n\n\n[FEATURE] Support for transactions. \n1062\n.\n\n\n[REFACTORING] hasMany now uses a single SQL statement when creating and destroying associations, instead of removing each association seperately \n690\n. Inspired by \n#104\n. janmeier\n\n\n[REFACTORING] Consistent handling of offset across dialects. Offset is now always applied, and limit is set to max table size of not limit is given \n#725\n. janmeier\n\n\n[REFACTORING] Moved Jasmine to Buster and then Buster to Mocha + Chai. sdepold and durango\n\n\n\n\nv1.6.0\n\n\n\n\n[DEPENDENCIES] upgrade mysql to alpha7. You \nMUST\n use this version or newer for DATETIMEs to work\n\n\n[DEPENDENCIES] upgraded most dependencies. most important: mysql was upgraded to 2.0.0-alpha-3\n\n\n[DEPENDENCIES] mysql is now an optional dependency. #355 (thanks to clkao)\n\n\n[REFACTORING] separated tests for dialects\n\n\n[REFACTORING] reduced number of sql queries used for adding an element to a N:M association. #449 (thanks to innofluence/janmeier)\n\n\n[REFACTORING] dropped support for synchronous migrations. added third parameter which needs to get called once the migration has been finished. also this adds support for asynchronous actions in migrations.\n\n\n[OTHERS] code was formatted to fit the latest code style guidelines (thanks to durango)\n\n\n[OTHERS] Explicitly target ./docs folder for generate-docs script. #444 (thanks to carsondarling)\n\n\n[OTHERS] Overwrite existing daoFactoryDefinition if there already has been one. (thanks to robraux)\n\n\n[BUG] fixed wrong version in sequelize binary\n\n\n[BUG] local options have higher priority than global options (thanks to guersam)\n\n\n[BUG] fixed where clause when passing an empty array (thanks to kbackowski)\n\n\n[BUG] fixed updateAttributes for models/tables without primary key (thanks to durango)\n\n\n[BUG] fixed the location of the foreign key when using belongsTo (thanks to ricardograca)\n\n\n[BUG] don't return timestamps if only specific attributes have been seleceted (thanks to ricardograca)\n\n\n[BUG] fixed removeColumn for sqlite\n\n\n[BUG] fixed date equality check for instances. (thanks to solotimes)\n\n\n[FEATURE] added association prefetching /eager loading for find and findAll. #465\n\n\n[FEATURE] it's now possible to use callbacks of async functions inside migrations (thanks to mphilpot)\n\n\n[FEATURE] improved comfort of sequelize.query. just pass an sql string to it and wait for the result\n\n\n[FEATURE] Migrations now understand NODE_ENV (thanks to gavri)\n\n\n[FEATURE] Performance improvements (thanks to Mick-Hansen and janmeier from innofluence)\n\n\n[FEATURE] Model.find and Model.findAll can now take a String with an ID. (thanks to ghernandez345)\n\n\n[FEATURE] Compatibility for JSON-like strings in Postgres (thanks to aslakhellesoy)\n\n\n[FEATURE] honor maxConcurrentQueries option (thanks to dchester)\n\n\n[FEATURE] added support for stored procedures (inspired by wuyuntao)\n\n\n[FEATURE] added possibility to use pg lib's native api (thanks to denysonique)\n\n\n[FEATURE] added possibility to define the attributes of received associations (thanks to joshm)\n\n\n[FEATURE] added findOrCreate, which returns a the already existing instance or creates one (thanks to eveiga)\n\n\n[FEATURE] minConnections option for MySQL pooling (thanks to dominiklessel)\n\n\n[FEATURE] added BIGINT data type which is treated like a string (thanks to adamsch1)\n\n\n[FEATURE] experimental support for read replication for mysql (thanks to Janzeh)\n\n\n[FEATURE] allow definition of a models table name (thanks to slamkajs)\n\n\n[FEATURE] allow usage of enums. #440 (thanks to KevinMartin)\n\n\n[FEATURE] allows updateAttributes to target specific fields only (thanks to Pasvaz)\n\n\n[FEATURE] timestamps are now stored as UTC. #461 (thanks to innofluence/janmeier)\n\n\n[FEATURE] results of raw queries are parsed with dottie. #468 (thanks to kozze89)\n\n\n[FEATURE] support for array serialization. pg only. #443 (thanks to clkao)\n\n\n[FEATURE] add increment and decrement methods on dao. #408 (thanks to janmeier/innofluence)\n\n\n[FEATURE] unified the result of describeTable\n\n\n[FEATURE] add support for decimals (thanks to alexyoung)\n\n\n[FEATURE] added DAO.reload(), which updates the attributes of the DAO in-place (as opposed to doing having to do a find() and returning a new model)\n\n\n\n\nv1.5.0\n\n\n\n\n[REFACTORING] use underscore functions for Utils.isHash (thanks to Mick-Hansen/innofluence)\n\n\n[REFACTORING] removed the 'failure' event and replaced it with 'error'\n\n\n[BUG] fixed booleans for sqlite (thanks to vlmonk)\n\n\n[BUG] obsolete reference attribute for many-to-many associations are removed correctly\n\n\n[BUG] associations can be cleared via passing null to the set method\n\n\n[BUG] \"fixed\" quota handling (thanks to dgf)\n\n\n[BUG] fixed destroy in postgresql (thanks to robraux)\n\n\n[FEATURE] added possibility to set protocol and to remove port from postgresql connection uri (thanks to danielschwartz)\n\n\n[FEATURE] added possibility to not use a junction table for many-to-many associations on the same table (thanks to janmeier/innofluence)\n\n\n[FEATURE] results of the \nimport\n method is now cached (thanks to janmeier/innofluence)\n\n\n[FEATURE] added possibility to check if a specific object or a whole bunch of objects is currently associated with another object (thanks to janmeier/innofluence)\n\n\n[FEATURE] added possibility to globally disable adding of NULL values to sql queries (thanks to janmeier/innofluence)\n\n\n[FEATURE] Model.create can now also be used to specify values for mass assignment (thanks to janmeier/innofluence)\n\n\n[FEATURE] QueryChainer will now provide the results of the added emitters in the order the emitters have been added (thanks to LaurentZuijdwijk and me ;))\n\n\n[FEATURE] QueryChainer can now be initialized with serial items\n\n\n[FEATURE] node 0.8 compatibility\n\n\n[FEATURE] added options to hasMany getters (thanks to janmeier/innofluence)\n\n\n[FEATURE] pooling option is now correctly passed to postgres (thanks to megshark)\n\n\n\n\nv1.4.1\n\n\n\n\n[DEPRECATION] Added deprecation warning for node \n v0.6.\n\n\n[FEATURE] added selective saving of instances (thanks to kioopi)\n\n\n[FEATURE] added command to binary for creating a migration skeleton with current timestamp\n\n\n[FEATURE] added \ncomplete\n function for each finder method (thanks to sstoiana)\n\n\n[BUG] fixed quotation for sqlite statements (thanks to vlmonk)\n\n\n[BUG] fixed timestamp parsing in migratios (thanks to grn)\n\n\n[FEATURE] added consistent logging behaviour to postgres (thanks to reacuna)\n\n\n\n\nv1.4.0\n\n\n\n\n[BUG] fixed booleans in sqlite (thanks to alexstrat)\n\n\n[BUG] fixed forced sync of many-to-many associations (thanks to SirUli)\n\n\n[FEATURE] objects are now compatible to JSON.stringify. (thanks to grayt0r)\n\n\n[FEATURE] When instantiating the sequelize object, you can now pass a function to logging. This allows you to customize the logging behavior. Default is now: console.log (thanks to kenperkins)\n\n\n[BUG] The default logging is still console.log but is wrapped after initialization as it crashes node \n 0.6.x.\n\n\n[FEATURE] postgresql support. (thanks to swoodtke)\n\n\n[FEATURE] connection-pooling for mysql. (thanks to megshark)\n\n\n[FEATURE] added possibility to define NOW as default value for date data-types. Use Sequelize.NOW as defaultValue\n\n\n[BUG] Fixed date handling in sqlite (thanks to iizukanao)\n\n\n\n\nv1.3.7\n\n\n\n\n[BUG] fixed issue where multiple belongsTo or hasOne associations to the same table overwrite each other\n\n\n[BUG] fixed memory leaks (thanks to megshark)\n\n\n\n\nv1.3.6\n\n\n\n\n[BUG] don't update an existing updatedAt-attribute if timestamps option for a DAO is false\n\n\n\n\nv1.3.5\n\n\n\n\n[BUG] fixed missed DAO renaming in migrations (thanks to nov)\n\n\n\n\nv1.3.4\n\n\n\n\n[REFACTORING] renamed Model/ModelFactory/ModelFactoryManager to DAO/DAOFactory/DAOFactoryManager\n\n\n[IMPROVEMENT] \nnpm test\n will run the test suite (thanks to gabrielfalcao)\n\n\n[IMPROVEMENT] documentation about setting up local development environment (thanks to gabrielfalcao)\n\n\n[REFACTORING] removed updatedAt + createdAt from SequelizeMeta\n\n\n\n\nv1.3.3\n\n\n\n\n[BUG] fixed sql-event emitter in all possible locations (thanks to megshark)\n\n\n\n\nv1.3.2\n\n\n\n\n[FEATURE] sqlite is now emitting the 'sql'-event as well (thanks to megshark)\n\n\n\n\nv1.3.1\n\n\n\n\n[REFACTORING] renamed ModelManager to ModelFactoryManager\n\n\n[IMPROVEMENT] decreased delay of CustomEventEmitter execution from 5ms to 1ms\n\n\n[IMPROVEMENT] improved performance of association handling (many-to-many) (thanks to magshark)\n\n\n[FEATURE] added possibility to specify name of the join table (thanks to magshark)\n\n\n[FEATURE] mysql is emitting a 'sql'-event when executing a query\n\n\n[BUG] correctly delete existing SequelizeMeta entry from database after undoing migration\n\n\n[BUG] fix path of migration files in executable (thanks to bcg)\n\n\n\n\nv1.3.0\n\n\n\n\n[REFACTORING] Model#all is now a function and not a getter.\n\n\n[REFACTORING] Renamed ModelDefinition to ModelFactory\n\n\n[REFACTORING] Private method scoping; Attributes are still public\n\n\n[REFACTORING] Use the new util module for node 0.6.2\n\n\n[FEATURE] QueryChainer can now run serially\n\n\n[FEATURE] Association definition is chainable: Person.hasOne(House).hasMany(Address)\n\n\n[FEATURE] Validations (Thanks to \nhiddentao\n)\n\n\n[FEATURE] jQuery-like event listeners: .success(callback) and .error(callback)\n\n\n[FEATURE] aliasing for select queries: Model.find({ where: 'id = 1', attributes: ['id', ['name', 'username']] }) ==\n will return the user's name as username\n\n\n[FEATURE] cross-database support. currently supported: mysql, sqlite\n\n\n[FEATURE] migrations\n\n\n[TEST] removed all expresso tests and converted them to jasmine\n\n\n\n\nv1.2.1\n\n\n\n\n[REFACTORING] renamed the global options for sync, query and define on sequelize; before: options.queryOptions; now: options.query\n\n\n[FEATURE] allow definition of charset via global define option in sequelize or via charset option in sequelize.define\n\n\n[FEATURE] allow definition of mysql engine via global define option in sequelize or via engine option in sequelize.define; default is InnoDB now\n\n\n[FEATURE] find and findAll will now search in a list of values via: Model.findAll({where: { id: [1,2,3] }}); will return all models with id 1, 2 and 3\n\n\n[TEST] force latin1 charset for travis\n\n\n\n\nv1.2.0\n\n\n\n\n[FEATURE] min/max function for models, which return the min/max value in a column\n\n\n[FEATURE] getModel for modelManager for getting a model without storing it in a variable; use it via sequelize.modelManager.getModel('User')\n\n\n[TEST] test suite refactoring for jasmine\n\n\n\n\nv1.1.4\n\n\n\n\n[BUG] tables with identical prefix (e.g. wp_) can now be used in many-to-many associations\n\n\n\n\nv1.1.3\n\n\n\n\n[BUG] scoped options in model =\n a model can now have the attribute options\n\n\n[FEATURE] added drop method for sequelize, that drops all currently registered tables\n\n\n\n\nv1.1.2\n\n\n\n\n[BUG] prevent malfunction after being idle\n\n\n\n\nv1.1.1\n\n\n\n\n[BUG] fixed memory leaks\n\n\n[FEATURE] added query queueing (adjustable via maxConcurrentQueries in config; default: 50)\n\n\n\n\nv1.1.0\n\n\n\n\n[BUG] defaultValue 0 is now working\n\n\n[REMOVED] mysql-pool usage (will give it a new try later)\n\n\n[CHORE] updated node-mysql to 0.9.4\n\n\n\n\nv1.0.2\n\n\n\n\n[BUG] Fixed where clause generation for models with explicit primary keys (allanca)\n\n\n[BUG] Set insertId for non-default auto increment fields (allanca)\n\n\n\n\nv1.0.1\n\n\n\n\n[FEATURE] Added Model.count(callback), which returns the number of elements saved in the database\n\n\n[BUG] Fixed self associations\n\n\n\n\nv1.0.0\n\n\n\n\ncomplete rewrite\n\n\nadded new emitter syntax\n\n\nsql injection protection\n\n\nselect now supports hash usage of where\n\n\nselect now supports array usage of where\n\n\nadded a lot of options to find/findAll\n\n\nWrapped queries correctly using \nfoo\n\n\nusing expresso 0.7.2\n\n\nmoved config for test database into seperated config file\n\n\nAdded method for adding and deleting single associations\n\n\n\n\nv0.4.3\n\n\n\n\nrenamed loadAssociatedData to fetchAssociations\n\n\nrenamed Model#associatedData to fetchedAssociations\n\n\nadded fetchAssociations to finder methods\n\n\nstore data found by finder method in the associatedData hash + grep them from there if reload is not forced\n\n\nadded option to sequelize constructor for disabling the pluralization of tablenames: disableTableNameModification\n\n\nallow array as value for chainQueries =\n Sequelize.chainQueries([save: [a,b,c]], callback)\n\n\nremove the usage of an array =\n Sequelize.chainQueries({save: a}, {destroy: b}, callback)\n\n\n\n\nv0.4.2\n\n\n\n\nfixed bugs from 0.4.1\n\n\nadded the model instance method loadAssociatedData which adds the hash Model#associatedData to an instance which contains all associated data\n\n\n\n\nv0.4.1\n\n\n\n\nTHIS UPDATE CHANGES TABLE STRUCTURES MASSIVELY!\n\n\n\n\nMAKE SURE TO DROP YOUR CURRENT TABLES AND LET THEM CREATE AGAIN!\n\n\n\n\n\n\nnames of many-to-many-association-tables are chosen from passed association names\n\n\n\n\nforeign keys are chosen from passed association name\n\n\nadded many-to-many association on the same model\n\n\nadded hasManyAndBelongsTo\n\n\nadded hasOneAndBelongsTo\n\n\nnodejs-mysql-native 0.4.2\n\n\n\n\nv0.4.0\n\n\n\n\nadded error handling when defining invalid database credentials\n\n\nSequelize#sync, Sequelize#drop, model#sync, model#drop returns errors via callback\n\n\ncode is now located under lib/sequelize to use it with nDistro\n\n\nadded possibility to use non default mysql database (host/port)\n\n\nadded error handling when defining invalid database port/host\n\n\nschema definitions can now contain default values and null allowance\n\n\ndatabase credentials can now also contain an empty / no password\n\n\n\n\nv0.3.0\n\n\n\n\nadded possibility to define class and instance methods for models\n\n\nadded import method for loading model definition from a file\n\n\n\n\nv0.2.6\n\n\n\n\nrefactored Sequelize to fit CommonJS module conventions\n\n\n\n\nv0.2.5\n\n\n\n\nadded BOOLEAN type\n\n\nadded FLOAT type\n\n\nfixed DATE type issue\n\n\nfixed npm package\n\n\n\n\nv0.2.4\n\n\n\n\nfixed bug when using cross associated tables (many to many associations)\n\n\n\n\nv0.2.3\n\n\n\n\nadded latest mysql connection library\n\n\nfixed id handling on save\n\n\nfixed text handling (varchar \n 255; text)\n\n\nusing the inflection library for naming tables more convenient\n\n\nSequelize.TEXT is now using MySQL datatype TEXT instead of varchar(4000)\n\n\n\n\nv0.2.2\n\n\n\n\nreleased project as npm package\n\n\n\n\nv0.2.1\n\n\n\n\nfixed date bug\n\n\n\n\nv0.2.0\n\n\n\n\nadded methods for setting associations\n\n\nadded method for chaining an arbitraty amount of queries\n\n\n\n\nv0.1.0\n\n\n\n\nfirst stable version\n\n\nimplemented all basic functions\n\n\nassociations are working", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#future", 
            "text": "[ADDED] include now supports string as an argument (on top of model/association), string will expand into an association matched literally from Model.associations  [FIXED] Accept dates as string while using  typeValidation   #6453  [FIXED] - ORDER clause was not included in subquery if  order  option value was provided as plain string (not as an array value)  [FIXED] support for CLS with  cls-bluebird  module", 
            "title": "Future"
        }, 
        {
            "location": "/changelog/#400-1", 
            "text": "[CHANGED] Removed  modelManager  parameter from  Model.init()   #6437  [FIXED] Made  Model.init()  behave like  sequelize.define()  (hooks are called and options have proper defaults)  #6437  [ADDED]  restartIdentity  option for truncate in postgres  #5356  [INTERNAL] Migrated to  node-mysql2  for prepared statements  #6354  [ADDED] SQLCipher support via the SQLite connection manager  [CHANGED] Range type bounds now default to  postgres default   [)  (inclusive, exclusive)  #5990  [ADDED] Support for range operators  #5990  [FIXED] Broken transactions in  MySQL   #3568  [FIXED]  Model.count  don't include attributes  #5057  [INTERNALS] Updated  inflection  dependency and pinned version and expose all used  inflection  methods on  Utils  [ADDED]  Sequelize.useInflection  method  [FIXED]  hasOne  throws error on update with a primary key  #6069  [FIXED]  Model.count  gives SQL syntax error when using  distinct   #4840  [ADDED]  Model.count  now allow specifying column to count on, use  options.col   #4442  [ADDED]  DEBUG  support  #2852  [ADDED] Intensive connection logging  #851  [FIXED] Only  belongsTo  uses  as  to construct foreign key - revert of  #5957  introduced in 4.0.0-0  [CHANGED]  Sequelize.Promise  is now an independent copy of  bluebird  library  #5974  [ADDED] before/after Save hook  #2702  [ADDED] Remove hooks by reference  #6155  [ADDED] before/after Upsert hook  #3965  [FIXED] Modifying  options  in  beforeFind  throws error  #5675  [REMOVED]  classMethods  and  instanceMethods   #5869  [CHANGED]  Sequelize.Validator  is now an independent copy of  validator  library  [FIXED] Don't patch  validator  library globally  #6196  [CHANGED]  ignore  for create was renamed to  ignoreDuplicates   #6138  [FIXED] Index names not quoted properly in  removeIndex   #5888  [FIXED]  Int4  range not properly parsed  #5747  [FIXED]  upsert  does not fail anymore on not null validations  #5711  [FIXED] Don't remove includes from count queries and unify findAndCount and count queries.  #6123  [FIXED]  Model.count  with  options.col  and  options.include  works properly now  [FIXED]  bulkCreate  don't map fields to attributes properly  #4476 #3908 #4103 #3764 #3789 #4600  [FIXED]  sync  don't handle global  options.logging  properly  #5788  [FIXED]  attribute:[]  throw errors with  include  or  through   #5078   #4222   #5958   #5590   #6139   #4866   #6242  [SECURITY]  GEOMETRY  and  GEOGRAPHY  SQL injection attacks  #6194  [FIXED]  DECIMAL  now supports  UNSIGNED  /  ZEROFILL  (MySQL)  #2038  [FIXED] Generate correct SQL of nested include when quoteIdentifiers is false. (Postgres)  #6351  [FIXED] Generate correct SQL for JSON attributes with quote. #6406  [FIXED] Nested query return correct result when quoteIdentifiers is false. (Postgres)  #6363  [FIXED] Fixed an issue where changing multiple ENUM columns in PostgreSQL could break. [#6203] (https://github.com/sequelize/sequelize/issues/6203)  [FIXED] Add  parent ,  original  and  sql  properties to  UniqueConstraintError", 
            "title": "4.0.0-1"
        }, 
        {
            "location": "/changelog/#bc-breaks", 
            "text": "Range type bounds now default to  postgres default   [)  (inclusive, exclusive), previously was  ()  (exclusive, exclusive)  Only  belongsTo  uses  as  to construct foreign key - revert of  #5957  introduced in 4.0.0-0  Sequelize uses an independent copy of  bluebird  library. This means (1) promises returned from Sequelize methods are instances of  Sequelize.Promise  but not global  Bluebird  and (2) the CLS patch does not affect global  Bluebird .  Dropped support for  classMethods  and  instanceMethods . As Models are now ES6 classes  classMethods  can be directly assigned and  instanceMethods  should be added to  Model.prototype  Sequelize.Validator  is now a cloned version of  validator , It will not pollute global library methods.  ignore  for create was renamed to  ignoreDuplicates", 
            "title": "BC breaks:"
        }, 
        {
            "location": "/changelog/#400-0", 
            "text": "[FIXED] Pass ResourceLock instead of raw connection in MSSQL disconnect handling  [CHANGED] Remove  hookValidate  in favor of  validate  with  hooks: true | false .  [REMOVED] Support for  referencesKey  [CHANGED] Throw if  dialect  is not provided to the constructor  [CHANGED] Throw  bluebird.AggregateError  instead of array from  bulkCreate  when validation fails  [FIXED]  $notIn: []  is now converted to  NOT IN (NULL)    #4859  [FIXED] Add  raw  support to  instance.get()   #5815  [ADDED] Compare deletedAt against current timestamp when using paranoid  #5880  [FIXED]  BIGINT  gets truncated  #5176  [FIXED] Trigger afterCreate hook after all nested includes (for hasMany or belongsToMany associations) have been created to be consistent with hasOne.  [REMOVED] Support for  pool:false  [REMOVED] Default transaction isolation level  #5094  [ADDED] Add logging for mysql warnings, observant of the  showWarnings  option.  #5900  [REMOVED] MariaDB dialect  [FIXED]  hasOne  now prefer aliases to construct foreign key  #5247  [CHANGED]  instance.equals  now only checks primary keys, instead of all attributes.  [REWRITE] Rewrite model and instance to a single class - instance instanceof Model  #5924  [REMOVED] Counter cache plugin  [FIXED] All associations now prefer aliases to construct foreign key  #5267  [REMOVED] Default transaction auto commit  #5094  [REMOVED] Callback support for hooks  #5228", 
            "title": "4.0.0-0"
        }, 
        {
            "location": "/changelog/#bc-breaks_1", 
            "text": "hookValidate  removed in favor of  validate  with  hooks: true | false .  validate  returns a promise which is rejected if validation fails  Removed support for  referencesKey , use a  references  object  Remove default dialect  When  bulkCreate  is rejected because of validation failure it throws a  bluebird.AggregateError  instead of an array. This object is an array-like so length and index access will still work, but  instanceof  array will not  $notIn: []  will now match all rows instead of none  (MySQL)  BIGINT  now gets converted to string when number is too big  Removed support for  pool:false , if you still want to use single connection set  pool.max  to  1  Removed default  REPEATABLE_READ  transaction isolation, use config option to explicitly set it  Removed MariaDB dialect - this was just a thin wrapper around MySQL, so using  dialect: 'mysql'  instead should work with no further changes  instance.equals  now provides reference equality (do two instances refer to the same row, i.e. are their primary key(s) equal). Use  instance.get()  to get and compare all values.  Instances (database rows) are now instances of the model, instead of being a separate class. This means you can replace User.build() with new User() and sequelize.define with User extends Sequelize.Model. See #5924  The counter cache plugin, and consequently the  counterCache  option for associations has been removed. The plugin is seeking a new maintainer - You can find the code  here  All associations type will prefer  as  when constructing the  foreignKey  name. You can override this by  foreignKey  option.  Removed default  AUTO COMMIT  for transaction. Its only sent if explicitly set by user or required by dialects (like  mysql )  Hooks no longer provide a callback - you can return a  then -able instead if you are doing async stuff", 
            "title": "BC breaks:"
        }, 
        {
            "location": "/changelog/#3232", 
            "text": "[FIXED] Type validation now works with non-strings due to updated validator@5.0.0  #5861  [FIXED] Improved offset and limit support for SQL server 2008  #5616  [FIXED] options object cloned in all Sequelize methods (so not modified within Sequelize)  [ADDED] Test coverage for options object not being modified", 
            "title": "3.23.2"
        }, 
        {
            "location": "/changelog/#3231", 
            "text": "[FIXED] Postgres DECIMAL precision. (PostgreSQL)  #4893  [FIXED] removeColumn tries to delete non-existant foreign key constraint (mysql)  #5808  [FIXED] Relation constraints not being applied correctly  #5865", 
            "title": "3.23.1"
        }, 
        {
            "location": "/changelog/#3230", 
            "text": "[FIXED] Invalid query generated when using LIKE + ANY  #5736  [FIXED] Method QueryInterface.bulkDelete no longer working when the model parameter is missing. (PostgreSQL)  #5615  [ADDED] Context and custom options for deep creation  [FIXED] Dates with millisecond precision are inserted correctly in MySQL  #5855", 
            "title": "3.23.0"
        }, 
        {
            "location": "/changelog/#3220", 
            "text": "[FIXED] Fix defaultValues getting overwritten on build  [FIXED] Queue queries against tedious connections  [ADDED] Enable type validation for all queries", 
            "title": "3.22.0"
        }, 
        {
            "location": "/changelog/#3210", 
            "text": "[FIXED] Confirmed that values modified in validation hooks are preserved  #3534  [FIXED] Support lower case type names in SQLite  #5482  [FIXED] Support calling  setAssociation  twice on  hasOne   #5315  [INTERNALS] Removed dependency on wellknown in favor of terraformer-wkt-parser  [ADDED] Benchmarking feature  #2494  [INTERNALS] Add  Utils.mergeDeep  - allows lodash to be updated to latest version", 
            "title": "3.21.0"
        }, 
        {
            "location": "/changelog/#3200", 
            "text": "[ADDED] rejectOnEmpty mode  #272   #5480  [ADDED]  beforeCount  hook  #5209  [ADDED]  validationFailed  hook  #1626  [ADDED] Support for IEEE floating point literals in postgres and sqlite  #5194  [FIXED]  addColumn  with reference in mysql  #5592  [FIXED]  findAndCountAll  generates invalid SQL, subQuery moves to LEFT OUTER JOIN  #5445  [FIXED]  count  methods pollute the options.includes  #4191  [FIXED] Invalid SQL generated when using group option along with attributes  #3009  [FIXED] Mark index as  unique: true  when  type: 'UNIQUE' . Fixes  #5351  [FIXED] Improper escaping of bound arrays of strings on Postgres, SQLite, and Microsoft SQL Server", 
            "title": "3.20.0"
        }, 
        {
            "location": "/changelog/#3193", 
            "text": "[FIXED]  updatedAt  and  createdAt  values are now set before validation  #5367  [FIXED]  describeTable  maintains proper enum casing in mysql  #5321  [FIXED] Parsing of dates in MySQL, when a named timezone is used  #4208  [FIXED] Truncating in Postgres, when table has a schema  #4306  [FIXED] Moved initialization of scopes later in the model init process. Fixes attribute exclusion in scopes,  #4735  and  #4925  [FIXED] Multiple custom unique validation messages being overwritten by the first-defined message,  #4920", 
            "title": "3.19.3"
        }, 
        {
            "location": "/changelog/#3190", 
            "text": "[ADDED] Geography support for postgres  [FIXED] Migrations failed to add foreign key  #966  [FIXED] Prevent race condition after transaction finished  #5222  [FIXED] Fixed Instance.reload issues ( #4844  and  #4452 )  [FIXED] Fix upsert when primary key contains  .field  (internal API change for  queryInterface.upsert )  #4755  [FIXED] Default value for  defaultScope  is now an empty object. This fixes calling  .scope('defaultScope')  when no scope is explicitly defined, see  #5277", 
            "title": "3.19.0"
        }, 
        {
            "location": "/changelog/#3180", 
            "text": "[ADDED] Support silent: true in bulk update  #5200  [ADDED]  retry  object now part of global settings and can be overridden per call.  The default is 5 retries with a backoff function.   retry  object can be passed to options with max: 0 to turn off this behavior.  [ADDED] Sqlite now retries database queries that return SQL_BUSY as the status.  [ADDED] Add  IF EXIST  to postgres alter enum  #4464  [FIXED] Postgres destroy with  where  fails on JSONB data  #5092  [FIXED] hasMany.separate with foreign keys having  field", 
            "title": "3.18.0"
        }, 
        {
            "location": "/changelog/#3173", 
            "text": "[FIXED] Regression with array values from security fix in 3.17.2", 
            "title": "3.17.3"
        }, 
        {
            "location": "/changelog/#3172", 
            "text": "[SECURITY] Force non-buffer blob values to string, https://github.com/nodejs/node/issues/4660", 
            "title": "3.17.2"
        }, 
        {
            "location": "/changelog/#3171", 
            "text": "[FIXED] Reverted benchmarking feature since it does not compile on Node v4.0", 
            "title": "3.17.1"
        }, 
        {
            "location": "/changelog/#3170", 
            "text": "[SECURITY] Fixed injection vulnerability for order/limit  [FIXED] MySQL throws error when null GEOMETRY data results in empty buffer  #4953", 
            "title": "3.17.0"
        }, 
        {
            "location": "/changelog/#3160", 
            "text": "[ADDED] PostgreSQL tsrange (Range of timestamp without time zone) data type support.  [ADDED] hasOne scope support  #5113  [FIXED] attributes from multiple scopes does not merge   #4856  [FIXED] Support Unicode strings in mssql  #3752  [FIXED] Do not inject include twice in  options.include   #5106  [FIXED] Expand and validate include in  aggregate", 
            "title": "3.16.0"
        }, 
        {
            "location": "/changelog/#3151", 
            "text": "[FIXED] calling Model.update() modifies passed values   #4520  [FIXED] Instance can be chained on .set() and other methods  #4702  [FIXED] includes nested from a  separate  include now work properly  #5080", 
            "title": "3.15.1"
        }, 
        {
            "location": "/changelog/#3150", 
            "text": "[ADDED] Improve support for pg range type to handle unbound ranges, +/-infinity bounds and empty ranges  [FIXED] Postgres issue when using named timezone   #4307  [FIXED] Add support for Babel/ES6 imports  #4881", 
            "title": "3.15.0"
        }, 
        {
            "location": "/changelog/#3142", 
            "text": "[FIXED] Model.aggregate methods now support attributes and where conditions with fields.  #4935  [FIXED] Don't overwrite options.foreignKey in associations  #4927  [FIXED] Support nested  $col  keys.  #4849", 
            "title": "3.14.2"
        }, 
        {
            "location": "/changelog/#3141", 
            "text": "[FIXED] Issue with transaction options leaking and certain queries running outside of the transaction connection.", 
            "title": "3.14.1"
        }, 
        {
            "location": "/changelog/#3140", 
            "text": "[FIXED] Apply scopes to  aggregate   #4764  [FIXED] Improved postgres enum schema handling  #4796  [ADDED/FIXED]\u00a0Lower case  onDelete  option to allow the use of  onDelete: 'CASCADE', hooks: true .  [FIXED] Ignore attributes in  count   #4566", 
            "title": "3.14.0"
        }, 
        {
            "location": "/changelog/#3130", 
            "text": "[FIXED] timestamp columns are no longer undefined for associations loaded with  separate .  #4740  [FIXED] Mark unscoped model as  .scoped , to prevent injection of default scope on includes  #4663  [ADDED]  .previous  now returns and object of previous values when called without  key . This brings the API in line with  .changed", 
            "title": "3.13.0"
        }, 
        {
            "location": "/changelog/#3121", 
            "text": "[FIXED] Mark postgres connection as invalid if the connection is reset  #4661  [FIXED] Remove usage of \"limit\" in cases where it's unnecessary, which fixes some of the cases mentioned in [#4404] (https://github.com/sequelize/sequelize/issues/4404)  [SECURITY] Security concern with  $model.field$ , refactored to now require  $col: 'model.field'", 
            "title": "3.12.1"
        }, 
        {
            "location": "/changelog/#3120", 
            "text": "[ADDED] Preliminary support for  include.on .  [FIXED] Partial rollback of datatype validations by hiding it behind the  typeValidation  flag.  [FIXED] Don't try to select the primary key for models without primary key  #4607  [FIXED] Apply  attributes  when including a scoped model.  #4625  [FIXED] Use bits instead of strings for mssql booleans.  #4621  [FIXED] BulkCreate validation fails for properties with  field   #3787", 
            "title": "3.12.0"
        }, 
        {
            "location": "/changelog/#3110", 
            "text": "[INTERNALS] Updated dependencies  #4594  bluebird@2.10.1  dottie@1.0.0  wellknown@0.4.0    [INTERNALS] Updated devDependencies  #4594  mysql@2.9.0  coffee-script    [FIXED] Add limit to  findOne  when using queries like  { id: { $gt ...   #4416  [FIXED] Include all with scopes  #4584  [INTERNALS] Corrected spelling seperate -  separate  [ADDED] Added  include  and  exclude  to  options.attributes .  #4074  [FIXED/INTERNALS] Only recurse on plain objects in  mapOptionFieldNames .  #4596", 
            "title": "3.11.0"
        }, 
        {
            "location": "/changelog/#3100", 
            "text": "[ADDED] support  search_path  for postgres with lots of schemas  #4534  [ADDED] Expose Association constructor as  Sequelize.Association  [ADDED] beforeSync/afterSync/beforeBulkSync/afterBulksync hooks  #4479  [FIXED] Calling set with dot.separated key on a JSON/JSONB attribute will not flag the entire object as changed  #4379  [FIXED] instances returned from  bulkCreate  now has  isNewRecord: false  and should be updateable if using  returning: true  with dialects that support it.  [FIXED] Find with Include with a where clause generates wrong SQL  #3940  [FIXED] ON DELETE constraint should default to CASCADE if foreignKey has allowNull: false]  #2831  [FIXED] sqlite file handle leak", 
            "title": "3.10.0"
        }, 
        {
            "location": "/changelog/#390", 
            "text": "[ADDED] beforeRestore/afterRestore hooks  #4371  [ADDED] Map raw fields back to attributes names when using  mapToModel  or  returning   #3995  [ADDED]  skip  now supports filtering out modewl validators  #4528  [INTERNALS]  options  has been renamed to  $options  in instance.js  #4429  [FIXED] Reload doesn't synchronize a null include  #4353  [FIXED] commit/rollback multiple times on same transaction  #4491  [FIXED] memory leak / options mangle for scopes with include  #4470  [FIXED] custom  targetKey  for belongsTo on a target with a primary key will now correctly create foreign key constraints  #4455", 
            "title": "3.9.0"
        }, 
        {
            "location": "/changelog/#380", 
            "text": "[ADDED]  version  on  Sequelize  returning the current npm/package.json version  #4459", 
            "title": "3.8.0"
        }, 
        {
            "location": "/changelog/#370", 
            "text": "[ADDED] Define field dependencies for VIRTUAL types that are automatically pulled into  attributes   #4420  [FIXED] Fall back to a default version when parsing the DB version fails  #4368  [FIXED] Fix a bug where passing null as the second parameter to  sequelize.where  would fail  #4334  [FIXED] An error is thrown if a column called  id  is added, but not marked as primary key, and no other pk is present.  #4139  [FIXED] Cast to boolean when querying JSON  #4257", 
            "title": "3.7.0"
        }, 
        {
            "location": "/changelog/#360", 
            "text": "[ADDED] Model.findCreateFind: A more performant findOrCreate that will not work under a transaction (atleast not in postgres)  [FIXED] Show indexes query on Postgres fails to return functional indexes  #3911  [FIXED] Custom field names in json queries  [FIXED] JSON cast key using the equality operator.  #3824  [FIXED] Map column names with  .field  in scopes with includes.  #4210  [FIXED]  addScope  when the model does not have any initial scopes  #4243  [FIXED] Fixed destroy with limit in PG when the primary key is aliassed  #4027  [FIXED] Clone the options object in  increment ,  decrement ,  destroy ,  reload ,  restore , and  save .  #4023  [FIXED] Throw a  Sequelize.Error  when  authenticate  fails  #4209  [FIXED] BTM would remove any previously added association getters  #4268  [FIXED] Pass through connection mode options to sqlite #4288  [INTERNALS] Updated dependencies  #4332  toposort-class@1.0.1  validator@4.0.4  wkx@0.1.0    [INTERNALS] Updated devDependencies  #4336  chai-spies@0.7.0  dox@0.8.0  mysql@2.8.0", 
            "title": "3.6.0"
        }, 
        {
            "location": "/changelog/#351", 
            "text": "[FIXED] Fix bug with nested includes where a middle include results in a null value which breaks $findSeparate.", 
            "title": "3.5.1"
        }, 
        {
            "location": "/changelog/#350", 
            "text": "[ADDED]  include.separate  with  include.limit  support for HasMany associations.  [ADDED] Added default validation based on attribute types.  #3472 . The validation  cannot  be disabled. If you really want to completely disable it, you can remove the  validate  function from the corresponding datatype, but know that this permanently disables the validation.  [ADDED]  describeTable   now marks the primary key (Reroll of  #3703 )  [ADDED] Automatically determine the version of the database upon first connection  #4192 . This will be useful going forward in order to provide support for older database versions.  [ADDED]  addScope   #3963  [FIXED] Fix findOrCreate regression trying to add a transaction even if there is none  [FIXED] Fix save to be noop when nothing changed  [FIXED] Call  conformOptions  on default scope  #4157  [FIXED] Call  conformOptions  on scopes returned by functions  #3991  [FIXED] Calling  validateIncludedElements  should not add an aliassed primary key multiple times  #4127  [FIXED] Handle scoped model in includes properly  #3700  [FIXED] Enum naming with schemas  #3171  and  #3563  [FIXED] Prevent polution of the lodash object by using  runInContext   #2281", 
            "title": "3.5.0"
        }, 
        {
            "location": "/changelog/#341", 
            "text": "[FIXED] Fix belongs-to-many  countAssociations  - ambigious id when through model has id", 
            "title": "3.4.1"
        }, 
        {
            "location": "/changelog/#340", 
            "text": "[ADDED]  countAssociations  for hasMany and belongsToMany  [ADDED] Geometry support for postgres  [FIXED] Fix wrong count for  findAndCountAll  with required includes  #4016  [FIXED] Fix problems related to parsing of unique constraint errors  #4017  and  #4012  [FIXED] Fix postgres path variable being surrounded by quotes to often in unique constraint errors  #4034  [FIXED] Fix  removeAttributes(id)  not setting  this.primaryKeys  to null  [FIXED] Run validations on the through model during add, set and create for  belongsToMany", 
            "title": "3.4.0"
        }, 
        {
            "location": "/changelog/#332", 
            "text": "[FIXED] upsert no longer updates with default values each time  #3994", 
            "title": "3.3.2"
        }, 
        {
            "location": "/changelog/#331", 
            "text": "[FIXED] regression in  attributes  support for 'reload'  #3976", 
            "title": "3.3.1"
        }, 
        {
            "location": "/changelog/#330", 
            "text": "[FIXED] Fix  Promise#nodeify()  and  Promise#done()  not passing CLS context  [FIXED] Creating and dropping enums in transaction, only for PostgreSQL  #3782  [FIXED] $or/$and inside a where clause always expects the input to be an array  #3767  [ADDED] Unique constraints may now include custom error messages  [ADDED] It's possible now to remove a hook by name  [ADDED] Hook name can be passed via the direct method  #3901", 
            "title": "3.3.0"
        }, 
        {
            "location": "/changelog/#320", 
            "text": "[ADDED] Add support for new option  targetKey  in a belongs-to relationship for situations where the target key is not the id field.  [ADDED] Add support for keyword  after  in options of a field (useful for migrations), only for MySQL.  #3166  [ADDED] There's a new sequelize.truncate function to truncate all tables defined through the sequelize models  #2671  [ADDED] Add support for MySQLs TINYTEXT, MEDIUMTEXT and LONGTEXT.  #3836  [ADDED] Provide warnings if you misuse data types.  #3839  [FIXED] Fix a case where Postgres arrays containing JSONB type was being generated as JSON type.  [FIXED] Fix a case where  type  in  sequelize.query  was not being set to raw.  #3800  [FIXED] Fix an issue where include all was not being properly expanded for self-references  #3804  [FIXED] Fix instance.changed regression to not return false negatives for not changed null values  #3812  [FIXED] Fix isEmail validator to allow args: true  #3770  [FIXED] Fix all occasions where  options.logging  was not used correctly  #3834  [FIXED] Fix  Model#destroy()  to correctly use  options.transaction  [FIXED] Fix  QueryInterface#showIndex()  to correctly pass on  options.transaction", 
            "title": "3.2.0"
        }, 
        {
            "location": "/changelog/#311", 
            "text": "[FIXED] Always quote aliases, even when quoteIdentifiers is false  #1589  [FIXED] No longer clones Instances in model finder options  [FIXED] Fix regression in util.toDefaultValue not returning the data types  #3733", 
            "title": "3.1.1"
        }, 
        {
            "location": "/changelog/#310", 
            "text": "[ADDED] It is now possible to defer constraints in PostgreSQL by added a property  deferrable  to the  references  object of a field.  [FIXED] Fix an issue with the build in isIP validator returning false negatives  #3756", 
            "title": "3.1.0"
        }, 
        {
            "location": "/changelog/#301", 
            "text": "[FIXED]  include.attributes = []  will no longer force the inclusion of the primary key, making it possible to write aggregates with includes.  [CHANGED] The  references  property of model attributes has been transformed to an object:  {type: Sequelize.INTEGER, references: { model: SomeModel, key: 'some_key' }} . The former format ( references  and  referecesKey ) still exists but is deprecated and will be removed in 4.0.", 
            "title": "3.0.1"
        }, 
        {
            "location": "/changelog/#300", 
            "text": "3.0.0 cleans up a lot of deprecated code, making it easier for us to develop and maintain features in the future.   [ADDED] findById / findByPrimary takes a single value as argument representing the primary key to find.  [CHANGED] belongsToMany relations MUST now be given a  through  argument.  [CHANGED] findOne / findAll / findAndCount / findOrCreate now only takes a single options argument instead of a options and queryOptions argument. So set transaction, raw, etc on the first options argument.  [CHANGED] The accessor for belongsToMany relationships is now either the  as  argument or the target model name pluralized.  [REMOVED] N:M relationships can no longer be represented by 2 x hasMany  [REMOVED] Model.create / Model.bulkCreate / Instance.save no longer takes an array of fields as its second argument, use  options.fields  instead.  [REMOVED] Query Chainer has been removed  [REMOVED] Migrations have been removed, use umzug instead  [REMOVED] Model.findAllJoin has been removed  [REMOVED] sequelize.query now only takes  sql and options  as arguments, the second and fourth argument  callee  and  replacements  have been removed and should be set via  options.instance  /  options.model  and   options.replacements  instead.  [REMOVED]  instance.isDirty  has been removed, use  instance.changed()  instead  [REMOVED]  instance.values  has been removed, use  instance.get()  instead  [REMOVED]  instance.primaryKeyValues  has been removed.  [REMOVED]  instance.identifiers  has been removed, use  instance.where()  instead  [REMOVED]  instance.isDeleted  has been removed, simply check the timestamp with  get('deletedAt')  instead  [REMOVED]  instance.increment/decrement  now longer takes a number as it's second argument.  [REMOVED/SECURITY] findOne no longer takes a string / integer / binary argument to represent a primaryKey. Use findById instead  [REMOVED/SECURITY]  where: \"raw query\"  is no longer legal, you must now explicitely use  where: [\"raw query\", [replacements]]  [FIXED] Fix showIndexQuery so appropriate indexes are returned when a schema is used  [FIXED] Fix addIndexQuery error when the model has a schema  [FIXED] Fix app crash in sqlite while running in special unique constraint errors  #3730  [FIXED] Fix bulkCreate: do not insert NULL for undefined values  #3729  [FIXED] Fix trying to roll back a comitted transaction if an error occured while comitting resulting in an unhandled rejection  #3726  [FIXED] Fix regression in beforeUpdate hook where  instance.changed()  would always be false  #3727  [FIXED] Fix trying to roll back a comitted transaction if an error occured while comitting", 
            "title": "3.0.0"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes", 
            "text": "Most of the changes in 3.0.0 are BC breaking, read the changelog for 3.0.0 carefully.  The error that is thrown when a column is declared to be an enum but without any values used to \"Values for ENUM haven't been defined\" and is now \"Values for ENUM have not been defined\".", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#213", 
            "text": "[BUG] Fix regression introduced in 2.1.2: updatedAt not set anymore  #3667  [BUG] Fix managed transactions not rolling back if no thenable was provided in the transaction block  #3667", 
            "title": "2.1.3"
        }, 
        {
            "location": "/changelog/#212", 
            "text": "[BUG]  Model.create()/update()  no longer attempts to save undefined fields.", 
            "title": "2.1.2"
        }, 
        {
            "location": "/changelog/#211", 
            "text": "[BUG] .get() now passes along options correctly when using a custom getter  [BUG] Fix managed transactions not rolling back if an error occured the transaction block  #3661  [BUG] Fix a node-webkit issue  #3650  [FEATURE] Lock modes in Postgres now support  OF table  [FEATURE] New transaction lock modes  FOR KEY SHARE  and  NO KEY UPDATE  for Postgres 9.3+  [FEATURE/REFACTOR] Rewritten scopes with complete support for includes and scopes across associations", 
            "title": "2.1.1"
        }, 
        {
            "location": "/changelog/#210", 
            "text": "[BUG] Enable standards conforming strings on connection in postgres. Adresses  #3545  [BUG] instance.removeAssociation(s) do not fire the select query twice anymore  [BUG] Error messages thrown by the db in languages other than english do not crash the app anymore (mysql, mariadb and postgres only)  #3567  [FEATURE]  JSONB  [FEATURE] All querys can be logged individually by inserting  logging: fn  in the query option.  [FEATURE] Partial index support for Postgres with  index.where  [REFACTOR]  .changed()  now works proactively by setting a flag on  set  instead of matching reactively. Note that objects and arrays will not be checked for equality on set and will always result in a change if they are  set .  [DEPRECATED] The query-chainer is deprecated and will be removed in version 2.2. Please use promises instead.  [REMOVED] Events are no longer supported.  [INTERNALS] Updated dependencies.  bluebird@2.9.24", 
            "title": "2.1.0"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_1", 
            "text": "Events support have been removed so using  .on('success')  or  .success()  is no longer supported. Try using  .then()  instead.  Trying to apply a scope that does not exist will always throw an error", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#206", 
            "text": "[BUG] Don't update virtual attributes in Model.update. Fixes  #2860  [BUG] Fix for newlines in hstore  #3383  [BUG] Fix unique key handling in Model.update  #3474  [BUG] Fix issue with Model.create() using fields not specifying and non-incremental primary key  #3458  [FEATURE]  field  support for Model.update  #3498  [INTERNALS] Updated dependencies. Most notably we are moving up one major version on lodash. If you are using  sequelize.Utils._ , notice that the semantics for many matching functions have changed to include a check for  hasOwnProperty  dottie@0.3.1  inflection@1.6.0  lodash@3.5.0  validator@3.34  generic-pool@2.2.0    [INTERNALS] Updated devDependencies.  coffee-script@1.9.1  dox@0.7.1  mysql@2.6.2", 
            "title": "2.0.6"
        }, 
        {
            "location": "/changelog/#205", 
            "text": "[FEATURE] Highly experimental support for nested creation  #3386", 
            "title": "2.0.5"
        }, 
        {
            "location": "/changelog/#204", 
            "text": "[BUG] Fixed support for 2 x belongsToMany without foreignKey defined and association getter/adder  #3185  [BUG] No longer throws on  Model.hasHook()  if no hooks are defiend  #3181  [BUG] Fixed issue with  {$and: []}  [BUG] Fixed issue with N:M relations with primary keys with field defined", 
            "title": "2.0.4"
        }, 
        {
            "location": "/changelog/#203", 
            "text": "[BUG] Support for plain strings, ints and bools on JSON insert  [BUG] Fixed regression where  {$in: []}  would result in  IN ()  rather than  IN (NULL)   #3105   #3132  [BUG] Fixed bug where 2 x  belongsToMany  with  foreignKey  but no  otherKey  defined would result in 3 keys instead of 2.  #2991  [BUG] Fixed regression with  where: sequelize.json()   #3138  [BUG] Fixed support for  field  with  $or / $and   #3153", 
            "title": "2.0.3"
        }, 
        {
            "location": "/changelog/#202", 
            "text": "[BUG] Fixed regression with  DataTypes.ARRAY(DataTypes.STRING(length))   #3106  [BUG] Fixed regression where  .or([{key: value}, {key: value, key2: value}])  would result in 3  A OR B OR C  rather than  A OR (B AND C)   #3107  [BUG] Fixed regression with  DataTypes.DECIMAL(10)  resulting in  10, undefined   #3119  [BUG] Fixed issue with dangling  WHERE  query on  Model.update(values, {where: {}})   #3113", 
            "title": "2.0.2"
        }, 
        {
            "location": "/changelog/#201", 
            "text": "[BUG] Fixed issue with empty  include.where  [BUG] Fixed issue with otherKey generation for self-association N:M", 
            "title": "2.0.1"
        }, 
        {
            "location": "/changelog/#200", 
            "text": "[BUG] Fixed  field  support for  increment  and  decrement .  [FEATURE/BUG] Raw queries always return all results (including affected rows etc). This means you should change all promise listeners on  sequelize.query  to use  .spread  instead of  .then , unless you are passing a query type.  [BUG] Support for composite primary keys in upsert  #3065  [BUG] Support for  field  in upsert  [FEATURE] Support for setting an initial autoincrement option in mysql  #3076  [FEATURE] Test coverage for Node.js 0.12 and io.js 1.x", 
            "title": "2.0.0"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_2", 
            "text": "The default query type for  sequelize.query  is now  RAW  - this means that two arguments (results and metadata) will be returned by default and you should use  .spread  The 4th argument to  sequelize.query  has been deprecated in favor of  options.replacements", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#200-rc8", 
            "text": "[FEATURE] CLS Support. CLS is also used to automatically pass the transaction to any calls within the callback chain when using  sequelize.transaction(function() ... .  [BUG] Fixed issue with paranoid deletes and  deletedAt  with a custom field.  [BUG] No longer crahes on  where: []  [FEATURE] Validations are now enabled by default for upsert.  [FEATURE] Preliminary support for  include.through.where  [SECURITY/BUG] Fixed injection issue in direction param for order", 
            "title": "2.0.0-rc8"
        }, 
        {
            "location": "/changelog/#200-rc7", 
            "text": "[FEATURE] Throw an error if no where clause is given to  Model.destroy() .  [BUG] Fixed issue with  order: sequelize.literal('string')  [FEATURE] add  clone: true  support to  .get() . Is needed when using  delete  on values from a  .get()  ( toJSON() ,  this.values ). (.get() is just a reference to the values for performance reasons when there's no custom getters or includes)  [FEATURE] add  sequelize.escape(value)  convenience method  [BUG] Fixes crash with  findAll({include: [Model], order: sequelize.literal()})  [FEATURE] Now possible to pass  createdAt  and  updatedAt  values to  Model.create / Model.bulkCreate  when using silent: true (when importing datasets with existing timestamps)  [FEATURE]  instance.update()  using default fields will now automatically also save and validate values provided via  beforeUpdate  hooks  [BUG] Fixed bad SQL when updating a JSON attribute with a different  field  [BUG] Fixed issue with creating and updating values of a  DataTypes.ARRAY(DataTypes.JSON)  attribute  [BUG]  Model.bulkCreate([{}], {returning: true})  will now correctly result in instances with primary key values.  [BUG]  instance.save()  with  fields: []  (as a result of  .changed()  being  [] ) will no result in a noop instead of an empty update query.  [BUG] Fixed case where  findOrCreate  could return  [null, true]  when given a  defaults  value that triggered a unique constraint error.", 
            "title": "2.0.0-rc7"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_3", 
            "text": "instance.update()  using default fields will now automatically also save and validate values provided via  beforeUpdate  hooks  Sequelize no longer supports case insensitive mysql enums  pg-hstore  has been moved to a devDependency, Postgres users will have to install  pg-hstore  manually alongside  pg :  $ npm install pg pg-hstore", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#200-rc6", 
            "text": "[BUG] Fixed issue with including by association reference and where", 
            "title": "2.0.0-rc6"
        }, 
        {
            "location": "/changelog/#200-rc5", 
            "text": "[BUG] Fixed issue with subquery creating  include.where  and a paranoid main model.#2749/#2769  UniqueConstraintErrors will now extend from ValidationError making it possible to catch both with  .catch(ValidationError)  [FEATURE] Adds  {save: false}  for belongsTo relationship setters.  user.setOrganization(organization, {save: false})  will then only set the foreign key value, but not trigger a save on  user .  [FEATURE] When updating an instance  _previousDataValues  will now be updated after  afterUpdate  hooks have been run rather than before allowing you to use  changed  in  afterUpdate  [BUG] Sequelize will no longer fail on a postgres constraint error not defined by Sequelize  [FEATURE] It's now possible to pass an association reference to include.  var Owner = Company.belongsTo(User, {as: 'owner'}; Company.findOne({include: [Owner]});", 
            "title": "2.0.0-rc5"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_4", 
            "text": "When updating an instance  _previousDataValues  will now be updated after  afterUpdate  hooks have been run rather than before allowing you to use  changed  in  afterUpdate", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#200-rc4", 
            "text": "[INTERNALS] Update  inflection  dependency to v1.5.3  [FEATURE] Replaced string error messages for connection errors with error objects.  #2576  [FEATURE] Support for updating fields on duplicate key in bulk update (mysql only)  #2692  [FEATURE] Basic support for Microsoft SQL Server  [INTERNALS] Deprecate migration logic. This is now implemented in  umzug  and the  CLI .  [BUG] Fixed various inconsistencies with  Instance.update  and how it behaves together with  create ,  fields  and more.  [BUG] Fixed crash/bug when using  include.where  together with  association.scope  [BUG] Fixed support for  Instance.destroy()  and  field  for postgres.", 
            "title": "2.0.0-rc4"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_5", 
            "text": "Some of the string error messages for connection errors have been replaced with actual error instances. Checking for connection errors should now be more consistent.", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#200-rc3", 
            "text": "[FEATURE] Added the possibility of removing multiple associations in 1 call  #2338  [FEATURE] Undestroy method for paranoid models  #2540  [FEATURE] Support for UPSERT  [BUG] Add support for  field  named the same as the attribute in  reload ,  bulkCreate  and  save   #2348  [BUG] Copy the options object in association getters.  #2311  [BUG]  Model#destroy()  now supports  field , this also fixes an issue with  N:M#removeAssociation  and  field  [BUG] Customized error message can now be set for unique constraint that was created manually (not with sync, but e.g. with migrations) or that has fields with underscore naming. This was problem at least with postgres before.  [BUG] Fixed a bug where plain objects like  { in: [...] }  were not properly converted to SQL when combined with a sequelize method ( fn ,  where  etc.). Closes  #2077  [BUG] Made the default for array search in postgres exact comparison instead of overlap  [BUG] Allow logging from individual functions even though the global logging setting is false. Closes  #2571  [BUG] Allow increment/decrement operations when using schemata  [BUG] Allow createTable with schema  [BUG] Fix some issues with findAndCount and include  [INTERNALS] Update  inflection  dependency to v1.5.2  [REMOVED] Remove query generation syntactic sugar provided by  node-sql , as well as the dependency on that module", 
            "title": "2.0.0-rc3"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_6", 
            "text": "When eager-loading a many-to-many association, the attributes of the through table are now accessible through an attribute named after the through model rather than the through table name singularized. i.e.  Task.find({include: Worker})  where the table name for through model  TaskWorker  is  TableTaskWorkers  used to produce  { Worker: { ..., TableTaskWorker: {...} } } . It now produces  { Worker: { ..., TaskWorker: {...} } } . Does not affect models where table name is auto-defined by Sequelize, or where table name is model name pluralized.  When using  Model#find()  with an  order  clause, the table name is prepended to the  ORDER BY  SQL. e.g.  ORDER BY Task.id  rather than  ORDER BY id . The change is to avoid ambiguous column names where there are eager-loaded associations with the same column names. A side effect is that code like  Task.findAll( { include: [ User ], order: [ [ 'Users.id', 'ASC' ] ] } )  will now throw an error. This should be achieved with  Task.findAll( { include: [ User ], order: [ [ User, 'id', 'ASC' ] ] } )  instead.  Nested HSTORE objects are no longer supported. Use DataTypes.JSON instead.  In PG  where: { arr: [1, 2] }  where the  arr  column is an array will now use strict comparison ( = ) instead of the overlap operator ( ). To obtain the old behaviour, use  where: { arr: { overlap: [1, 2] }}  The default  fields  for  Instance#save  (when not a new record) is now an intersection of the model attributes and the changed attributes making saves more atomic while still allowing only defined attributes.  Syntactic sugar for query generation was removed. You will no longer be able to call Model.dataset() to generate raw sql queries", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#200-rc2", 
            "text": "[FEATURE] Added to posibility of using a sequelize object as key in  sequelize.where . Also added the option of specifying a comparator  [FEATURE] Added countercache functionality to hasMany associations  #2375  [FEATURE] Basic JSON support  #2314  [BUG] Fixes regression bug with multiple hasMany between the same models with different join tables. Closes  #2316  [BUG] Don't set autocommit in nested transactions  #2418  [BUG] Improved  field  support", 
            "title": "2.0.0-rc2"
        }, 
        {
            "location": "/changelog/#200-rc1", 
            "text": "[BUG] Fixed an issue with foreign key object syntax for hasOne and belongsTo  [FEATURE] Added  field  and  name  to the object form of foreign key definitions  [FEATURE] Added support for calling  Promise.done , thus explicitly ending the promise chain by calling done with no arguments. Done with a function argument still continues the promise chain, to maintain BC.  [FEATURE] Added  scope  to hasMany association definitions, provides default values to association setters/finders  #2268  [FEATURE] We now support transactions that automatically commit/rollback based on the result of the promise chain returned to the callback.  [BUG] Only try to create indexes which don't already exist. Closes  #2162  [FEATURE] Hooks are passed options  [FEATURE] Hooks need not return a result - undefined return is interpreted as a resolved promise  [FEATURE] Added  find()  hooks", 
            "title": "2.0.0-rc1"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_7", 
            "text": "The  fieldName  property, used in associations with a foreign key object  (A.hasMany(B, { foreignKey: { ... }}) , has been renamed to  name  to avoid confusion with  field .  The naming of the join table entry for N:M association getters is now singular (like includes)  Signature of hooks has changed to pass options to all hooks. Any hooks previously defined like  Model.beforeCreate(values)  now need to be  Model.beforeCreate(values, options)  etc.  Results returned by hooks are ignored - changes to results by hooks should be made by reference  Model.destroy()  signature has been changed from  (where, options)  to  (options) , options now take a where parameter.  Model.update()  signature has been changed from  (values, where, options)  to  (values, options) , options now take a where parameter.  The syntax for  Model.findOrBuild  has changed, to be more in line with the rest of the library.  Model.findOrBuild(where, defaults);  becomes  Model.findOrBuild({ where: where, defaults: defaults }); .", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v200-dev13", 
            "text": "We are working our way to the first 2.0.0 release candidate.   [FEATURE] Added to option of setting a timezone offset in the sequelize constructor ( timezone  option). This timezone is used when initializing a connection (using  SET TIME ZONE  or equivalent), and when converting a timestamp string from the DB to a JS date with mysql (postgres stores the timezone, so for postgres we rely on what's in the DB).  [FEATURE] Allow setting plural and singular name on the model ( options.name  in  sequelize.define ) and in associations ( options.as ) to circumvent issues with weird pluralization.  [FEATURE] Added support for passing an  indexes  array in options to  sequelize.define .  #1485 . See API reference for details.  [FEATURE/INTERNALS] Standardized the output from  QueryInterface.showIndex .  [FEATURE] Include deleted rows in find  #2083  [FEATURE] Make addSingular and addPlural for n:m associations (fx  addUser  and  addUsers  now both accept an array or an instance.  [BUG] Hid  dottie.transform  on raw queries behind a flag ( nest )  #2064  [BUG] Fixed problems with transaction parameter being removed / not passed on in associations  #1789  and  #1968  [BUG] Fix problem with minConnections.  #2048  [BUG] Fix default scope being overwritten  #2087  [BUG] Fixed updatedAt timestamp not being set in bulk create when validate = true.  #1962  [INTERNALS] Replaced lingo with inflection  [INTERNALS] Removed underscore.string dependency and moved a couple of helper functions from  Utils._  to  Utils  [INTERNALS] Update dependencies  validator 3.2.0 -  3.16.1  moment 2.5.0 -  2.7.0  generic-pool 2.0.4 -  2.1.1  sql 0.35.0 -  0.39.0    [INTERNALS] Use a transaction inside  findOrCreate , and handle unique constraint errors if multiple calls are issues concurrently on the same transaction", 
            "title": "v2.0.0-dev13"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_8", 
            "text": "We are using a new inflection library, which should make pluralization and singularization in general more robust. However, a couple of pluralizations have changed as a result:  Person is now pluralized as people instead of persons    Accesors for models with underscored names are no longer camel cased automatically. For example, if you have a model with name  my_model , and  my_other_model.hasMany(my_model) , the getter will now be  instance_of_my_model.getMy_model  instead of  .getMyModel .  Removed support for setting sequelize.language. If your model names are not in english, use the name option provided by  sequelize.name  to defined singular and plural forms for your model.  Model names are now used more verbatim in associations. This means that if you have a model named  Task  (plural T), or an association specifying  { as: 'Task' } , the tasks will be returned as  relatedModel.Tasks  instead of  relatedModel.tasks . For more information and how to mitigate this, see https://github.com/sequelize/sequelize/wiki/Upgrading-to-2.0#inflection-replaces-lingo-and-changes-to-naming-conventions  Removed the freezeAssociations option - use model and assocation names instead to provide the plural form yourself  Removed sequelize.language option (not supported by inflection)  Error handling has been refactored. Code that listens for :  All Error classes properly inherit from Error and a common SequelizeBaseError base  Instance Validator returns a single instance of a ValidationError which contains an errors array property. This property contains individual error items for each failed validation.   ValidationError includes a  get(path)  method to find all broken validations for a path on an instance. To migrate existing error handling, switch from array indexing to using the get method:  Old:  err.validateCustom[0] \nNew:  err.get('validateCustom')[0] \n- The syntax for findOrCreate has changed, to be more in line with the rest of the library.  Model.findOrCreate(where, defaults);  becomes  Model.findOrCreate({ where: where, defaults: defaults }); .", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v200-dev12", 
            "text": "[FEATURE] You can now return a promise to a hook rather than use a callback  [FEATURE] There is now basic support for assigning a field name to an attribute  name: {type: DataTypes.STRING, field: 'full_name'}  [FEATURE] It's now possible to add multiple relations to a hasMany association, modelInstance.addRelations([otherInstanceA, otherInstanceB])  [FEATURE]  define()  stores models in  sequelize.models  Object e.g.  sequelize.models.MyModel  [FEATURE] The  set  /  add  /  has  methods for associations now allow you to pass the value of a primary key, instead of a full Instance object, like so:  user.addTask(15); .  [FEATURE] Support for FOR UPDATE and FOR SHARE statements  #1777  [FEATURE] n:m createAssocation now returns the target model instance instead of the join model instance  [FEATURE] Extend the  foreignKey  option for associations to support a full data type definition, and not just a string  [FEATURE] Extract CLI into  separate projects .  [FEATURE] Sqlite now inserts dates with millisecond precision  [FEATURE] Sequelize.VIRTUAL datatype which provides regular attribute functionality (set, get, etc) but never persists to database.  [BUG] An error is now thrown if an association would create a naming conflict between the association and the foreign key when doing eager loading. Closes  #1272  [BUG] Fix logging options for sequelize.sync  [BUG] find no longer applies limit: 1 if querying on a primary key, should fix a lot of subquery issues.  [BUG] Transactions now use the pool so you will never go over your pool defined connection limit  [BUG] Fix use of Sequelize.literal in eager loading and when renaming attributes  #1916  [BUG] Use the provided name for a unique index if one is given, instead of concating the column names together  #1944  [BUG] Create a composite primary key for doubled linked self reference  #1891  [INTERNALS]  bulkDeleteQuery  was removed from the MySQL / abstract query generator, since it was never used internally. Please use  deleteQuery  instead.", 
            "title": "v2.0.0-dev12"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_9", 
            "text": "Sequelize now returns promises instead of its custom event emitter from most calls. This affects methods that return multiple values (like  findOrCreate  or  findOrInitialize ). If your current callbacks do not accept the 2nd success parameter you might be seeing an array as the first param. Either use  .spread()  for these methods or add another argument to your callback:  .success(instance)  -   .success(instance, created) .  .success() / .done()  and any other non promise methods are now deprecated (we will keep the codebase around for a few versions though). on('sql') persists for debugging purposes.  Model association calls (belongsTo/hasOne/hasMany) are no longer chainable. (this is to support being able to pass association references to include rather than model/as combinations)  QueryInterface  no longer emits global events. This means you can no longer do things like  QueryInterface.on('showAllSchemas', function ...  sequelize.showAllSchemas  now returns an array of schemas, instead of an array containinig an array of schemas  sequelize.transaction()  now returns a promise rather than a instance of Sequelize.Transaction  bulkCreate ,  bulkUpdate  and  bulkDestroy  (and aliases) now take both a  hooks  and an  individualHooks  option,  hooks  defines whether or not to run the main hooks, and  individualHooks  defines whether to run hooks for each instance affected.  It is no longer possible to disable pooling, disable pooling will just result in a 1/1 pool.", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v200-dev11", 
            "text": "", 
            "title": "v2.0.0-dev11"
        }, 
        {
            "location": "/changelog/#caution-this-release-contains-many-changes-and-is-highly-experimental", 
            "text": "[PERFORMANCE] increased build performance when using include, which speeds up findAll etc.  [BUG] Made it possible to use HSTORE both in attribute: HSTORE and attribute: { type: HSTORE } form. Thanks to @tomchentw  #1458  [FEATURE] n:m now marks the columns of the through table as foreign keys and cascades them on delete and update by default.  [FEATURE] 1:1 and 1:m marks columns as foreign keys, and sets them to cascade on update and set null on delete. If you are working with an existing DB which does not allow null values, be sure to override those options, or disable them completely by passing constraints: false to your assocation call ( M1.belongsTo(M2, { constraints: false}) ).  [BUG] Removed the hard dependency on pg, allowing users to use pg.js  [BUG] Fixed a bug with foreign keys pointing to attributes that were not integers. Now your primaryKey can be a string, and associations will still work. Thanks to @fixe  #1544  [BUG] Fix a case where createdAt timestamp would not be set when updatedAt was disabled  Thanks to @fixe  #1543  [BUG] Fix a case where timestamps were not being write protected in  set  when underscored=true. janmeier  #1523  [FEATURE/BUG] Prefetching/includes now fully support schemas  [FEATURE] Centralize logging.  #1566  [FEATURE/BUG] hstore values are now parsed on find/findAll. Thanks to @nunofgs  #1560  [FEATURE] Read cli options from a file. Thanks to @codeinvain   #1540", 
            "title": "Caution: This release contains many changes and is highly experimental"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_10", 
            "text": "The  notNull  validator has been removed, use the Schema's  allowNull  property.  All Validation errors now return a sequelize.ValidationError which inherits from Error.  selectedValues has been removed for performance reasons, if you depend on this, please open an issue and we will help you work around it.  foreign keys will now correctly be based on the alias of the model  if you have any 1:1 relations where both sides use an alias, you'll need to set the foreign key, or they'll each use a different foreign key based on their alias.  foreign keys for non-id primary keys will now be named for the foreign key, i.e. pub_name rather than pub_id  if you have non-id primary keys you should go through your associations and set the foreignKey option if relying on a incorrect _id foreign key  syncOnAssocation has been removed. It only worked for n:m, and having a synchronous function (hasMany) that invokes an asynchronous function (sync) without returning an emitter does not make a lot of sense. If you (implicitly) depended on this feature, sequelize.sync is your friend. If you do not want to do a full sync, use custom through models for n:m ( M1.hasMany(M2, { through: M3}) ) and sync the through model explicitly.  Join tables will be no longer be paranoid (have a deletedAt timestamp added), even though other models are.  All tables in select queries will now be aliased with the model names to be support schemas. This will affect people stuff like `where: {'table.attribute': value}", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v1710", 
            "text": "[FEATURE] ilike support for postgres  #2122  [FEATURE] distinct option for count  #2079  [BUG] various fixes", 
            "title": "v1.7.10"
        }, 
        {
            "location": "/changelog/#v179", 
            "text": "[BUG] fixes issue with custom primary keys and N:M join tables  #1929", 
            "title": "v1.7.9"
        }, 
        {
            "location": "/changelog/#v178", 
            "text": "[FEATURE] adds rlike support for mysql", 
            "title": "v1.7.8"
        }, 
        {
            "location": "/changelog/#v177", 
            "text": "[BUG] fixes issue where count/findAndCountAll would throw on empty rows  #1849", 
            "title": "v1.7.7"
        }, 
        {
            "location": "/changelog/#v176", 
            "text": "[BUG] fixes issue where primary key is also foreign key  #1818", 
            "title": "v1.7.6"
        }, 
        {
            "location": "/changelog/#v175", 
            "text": "[BUG] fixes bug with some methods relying on table information throwing strange errors  #1686", 
            "title": "v1.7.5"
        }, 
        {
            "location": "/changelog/#v173", 
            "text": "[BUG] fixes foreign key types for hasMany", 
            "title": "v1.7.3"
        }, 
        {
            "location": "/changelog/#v172", 
            "text": "[BUG] fixes transactions support for 1-to-1 association setters.", 
            "title": "v1.7.2"
        }, 
        {
            "location": "/changelog/#v171", 
            "text": "[BUG] fixes issue where relations would not use transactions probably in adders/setters.", 
            "title": "v1.7.1"
        }, 
        {
            "location": "/changelog/#v170", 
            "text": "[FEATURE] covers more advanced include cases with limiting and filtering (specifically cases where a include would be in the subquery but its child include wouldnt be, for cases where a 1:1 association had a 1:M association as a nested include)  [BUG] fixes issue where connection would timeout before calling COMMIT resulting in data never reaching the database  #1429", 
            "title": "v1.7.0"
        }, 
        {
            "location": "/changelog/#v170-rc9", 
            "text": "[PERFORMANCE] fixes performance regression introduced in rc7  [FEATURE] include all relations for a model  #1421  [BUG] N:M adder/getter with through model and custom primary keys now work", 
            "title": "v1.7.0-rc9"
        }, 
        {
            "location": "/changelog/#v170-rc8", 
            "text": "[BUG] fixes bug with required includes without wheres with subqueries", 
            "title": "v1.7.0-rc8"
        }, 
        {
            "location": "/changelog/#v170-rc7", 
            "text": "[BUG] ORDER BY statements when using includes should now be places in the appropriate sub/main query more intelligently.  [BUG] using include.attributes with primary key attributes specified should no longer result in multiple primary key attributes being selected  #1410  [DEPENDENCIES] all dependencies, including Validator have been updated to the latest versions.", 
            "title": "v1.7.0-rc7"
        }, 
        {
            "location": "/changelog/#backwards-compatability-changes", 
            "text": ".set() will no longer set values that are not a dynamic setter or defined in the model. This only breaks BC since .set() was introduced but restores original .updateAttributes functionality where it was possible to 'trust' user input.", 
            "title": "Backwards compatability changes"
        }, 
        {
            "location": "/changelog/#v170-rc6", 
            "text": "[BUG] Encode binary strings as bytea in postgres, and fix a case where using a binary as key in an association would produce an error  1364 . Thanks to @SohumB", 
            "title": "v1.7.0-rc6"
        }, 
        {
            "location": "/changelog/#v170-rc5", 
            "text": "[FEATURE] sync() now correctly returns with an error when foreign key constraints reference unknown tables  [BUG] sync() no longer fails with foreign key constraints references own table (toposort self-dependency error)  [FEATURE] makes it possible to specify exactly what timestamp attributes you want to utilize  #1334  [FEATURE] Support coffee script files in migrations.  #1357  [FEATURE] include.where now supports Sequelize.and()/.or().  #1361", 
            "title": "v1.7.0-rc5"
        }, 
        {
            "location": "/changelog/#v170-rc4", 
            "text": "[BUG] fixes issue with postgres sync and enums  #1020  [BUG] fixes various issues with limit and includes  #1322  [BUG] fixes issues with migrations/queryInterface createTable and enums  [BUG] migration/queryInterface.addIndex() no longer fails on reserved keywords like 'from'  [FEATURE] bulkCreate now supports a  ignoreDuplicates  option for MySQL, SQLite and MariaDB that will use  INSERT IGNORE  [BUG] fixes regression bug with 1:M self associations  [FEATURE] significant performance improvements for 1:1 and single primary key includes for 500+ rows  #1333", 
            "title": "v1.7.0-rc4"
        }, 
        {
            "location": "/changelog/#backwards-compatability-changes_1", 
            "text": "find/findAll will now always return primary keys regardless of  attributes  settings. (Motivation was to fix various issues with eager loading)", 
            "title": "Backwards compatability changes"
        }, 
        {
            "location": "/changelog/#v170-rc3", 
            "text": "[FEATURE] dropAllTables now takes an option parameter with  skip  as an option  #1280  [FEATURE] implements .spread for eventemitters  #1277  [BUG] fixes some of the mysql connection error bugs  #1282  [Feature] Support for OR queries.  [Feature] Support for HAVING queries.  #1286  [FEATURE] bulkUpdate and bulkDestroy now returns affected rows.  #1293  [BUG] fixes transaction memory leak issue  [BUG] fixes security issue where it was possible to overwrite the id attribute when defined by sequelize (screwup - and fix - by mickhansen)", 
            "title": "v1.7.0-rc3"
        }, 
        {
            "location": "/changelog/#v170-rc2", 
            "text": "[BUG] fixes unixSocket connections for mariadb  #1248  [BUG] fixes a hangup issue for mysql  #1244  [BUG] improves handling of uncaught errors in eventemitter  #1245  [BUG] fixes bug with mysql replication and pool settings  #1251  [BUG] fixes bug where through models created by N:M associations would inherit hooks  #1263  [FEATURE] .col()/.literal()/etc now works with findAll  #1249  [BUG] now currectly handles connection timeouts as errors  #1207", 
            "title": "v1.7.0-rc2"
        }, 
        {
            "location": "/changelog/#v200-alpha1", 
            "text": "[FEATURE] async validations.  #580 . thanks to Interlock", 
            "title": "v2.0.0 (alpha1)"
        }, 
        {
            "location": "/changelog/#v170-rc1", 
            "text": "[FEATURE] instance.createAssociationInstance functionality added  #1213  [BUG] fixes a few bugs with transactions in regards to associations  [FEATURE] add error handling for transaction creation  [FEATURE]  sequelize --undo  will now actually undo migrations. Its basically an alias for  sequelize --migrate --undo .  #1059  [BUG] fix bug where  {where: {ne: null}}  would result in  != NULL  instead of  IS NOT NULL   #1231  [BUG] fixes a bug with validation skipping using the  fields  options.  #1233  [BUG] fixes a bug with postgres and setters  #1234  [BUG] fixes it so  field: {type: Sequelize.ENUM(value1, value2)}  works", 
            "title": "v1.7.0-rc1"
        }, 
        {
            "location": "/changelog/#backwards-compatability-changes_2", 
            "text": "Hooks are no longer passing value hashes. Instead, they are now passing instances of the model.  Hook callbacks no longer take two arguments (previously:  err, newValues ). They only take the error argument since values can be changed directly on the model instance.", 
            "title": "Backwards compatability changes"
        }, 
        {
            "location": "/changelog/#v170-beta8", 
            "text": "[FEATURE] max()/min() now supports dates  #1200  [FEATURE] findAndCountAll now supports the include option", 
            "title": "v1.7.0-beta8"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_11", 
            "text": "You will now need to include the relevant subtables to query on them in finders (find/findAll)  Subquery logic no longer depends on where objects with keys containing '.', instead where options on the include options  #1199", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v170-beta7", 
            "text": "[FEATURE] Nested eager loading / prefetching is now supported.  Docs  [FEATURE] Eager loading / prefetching now supports inner joins and extending the ON statement  #1199  [FEATURE] Eager loading / prefetching now returns the attributes of through models aswell  #1198  [FEATURE] New set/get/changed/previous feature  #1182  Various bug fixes", 
            "title": "v1.7.0-beta7"
        }, 
        {
            "location": "/changelog/#backwards-compatibility-changes_12", 
            "text": "None", 
            "title": "Backwards compatibility changes"
        }, 
        {
            "location": "/changelog/#v170-beta1", 
            "text": "[DEPENDENCIES] Upgraded validator for IPv6 support.  #603 . thanks to durango  [DEPENDENCIES] replaced underscore by lodash.  #954 . thanks to durango  [DEPENDENCIES] Upgraded pg to 2.0.0.  #711 . thanks to durango  [DEPENDENCIES] Upgraded command to 2.0.0 and generic-pool to 2.0.4. thanks to durango  [DEPENDENCIES] No longer require semver. thanks to durango  [BUG] Fix string escape with postgresql on raw SQL queries.  #586 . thanks to zanamixx  [BUG] \"order by\" is now after \"group by\".  #585 . thanks to mekanics  [BUG] Added decimal support for min/max.  #583 . thanks to durango  [BUG] Null dates don't break SQLite anymore.  #572 . thanks to mweibel  [BUG] Correctly handle booleans in MySQL.  #608 . Thanks to terraflubb  [BUG] Fixed empty where conditions in MySQL.  #619 . Thanks to terraflubb  [BUG] Allow overriding of default columns.  #635 . Thanks to sevastos  [BUG] Fix where params for belongsTo  #658 . Thanks to mweibel  [BUG] Default ports are now declared in the connector manager, which means the default port for PG correctly becomes 5432.  #633 . durango  [BUG] Columns with type BOOLEAN were always added to toJSON output, even if they were not selected  see . janmeier  [BUG] Hstore is now fully supported  #695 . thanks to tadman  [BUG] Correct join table name for tables with custom names  #698 . thanks to jjclark1982  [BUG] PostgreSQL should now be able to insert empty arrays with typecasting.  #718 . thanks to durango  [BUG] Fields should be escaped by quoteIdentifier for max/min functions which allows SQL reserved keywords to be used.  #719 . thanks to durango  [BUG] Fixed bug when trying to save objects with eagerly loaded attributes  #716 . thanks to iamjochen  [BUG] Strings for .find() should be fixed. Also added support for string primary keys to be found easily.  #737 . thanks to durango  [BUG] bulkCreate would have problems with a disparate field list  #738 . thanks to durango  [BUG] Fixed problems with quoteIdentifiers and {raw: false} option on raw queries  #751 . thanks to janmeier  [BUG] Fixed SQL escaping with sqlite and unified escaping  #700 . thanks to PiPeep  [BUG] Fixed Postgres' pools  ff57af63  [BUG] Fixed BLOB/TEXT columns having a default value declared in MySQL  #793 . thanks to durango  [BUG] You can now use .find() on any single integer primary key when throwing just a number as an argument  #796 . thanks to durango  [BUG] Adding unique to a column for Postgres in the migrator should be fixed  #795 . thanks to durango  [BUG] For MySQL users, if their collation allows case insensitivity then allow enums to be case insensitive as well  #794 . thanks to durango  [BUG] Custom primary key (not keys, just singular) should no longer be a problem for models when using any of the data retrievals with just a number or through associations  #771 . thanks to sdephold   durango  [BUG] Default schemas should now be utilized when describing tables  #812 . thanks to durango  [BUG] Fixed eager loading for many-to-many associations.  #834 . thanks to lemon-tree  [BUG] allowNull: true enums can now be null  #857 . thanks to durango  [BUG] Fixes Postgres' ability to search within arrays.  #879 . thanks to durango  [BUG] Find and finAll would modify the options objects, now the objects are cloned at the start of the method  #884  thanks to janmeier. Improved in  #899  thanks to hackwaly  [BUG] Add support for typed arrays in SqlString.escape and SqlString.arrayToList  #891 . thanks to LJ1102  [BUG] Postgres requires empty array to be explicitly cast on update  #890 . thanks to robraux  [BUG] Added tests   bugfixes for DAO-Factory.update and array of values in where clause  #880 . thanks to domasx2  [BUG] sqlite no longer leaks a global  db  variable  #900 . thanks to xming  [BUG] Fix for counts queries with no result  #906 . thanks to iamjochem  [BUG] Allow include when the same table is referenced multiple times using hasMany  #913 . thanks to janmeier  [BUG] Allow definition of defaultValue for the timestamp columns (createdAt, updatedAt, deletedAt)  #930 . Thank to durango  [BUG] Don't delete foreign keys of many-to-many associations, if still needed.  #961 . thanks to sdepold  [BUG] Update timestamps when incrementing and decrementing  #1023 . durango  [FEATURE] Validate a model before it gets saved.  #601 . thanks to durango  [FEATURE] Schematics.  #564 . thanks to durango  [FEATURE] Foreign key constraints.  #595 . thanks to optilude  [FEATURE] Support for bulk insert ( DAOFactory .bulkCreate() , update ( DAOFactory .update() ) and delete ( DAOFactory .destroy() )  #569 . thanks to optilude  [FEATURE] Add an extra  queryOptions  parameter to  DAOFactory.find  and  DAOFactory.findAll . This allows a user to specify  { raw: true } , meaning that the raw result should be returned, instead of built DAOs. Usefull for queries returning large datasets, see  #611  janmeier  [FEATURE] Added convenient data types.  #616 . Thanks to Costent  [FEATURE] Binary is more verbose now.  #612 . Thanks to terraflubb  [FEATURE] Promises/A support.  #626 . Thanks to kevinbeaty  [FEATURE] Added Getters/Setters method for DAO.  #538 . Thanks to iamjochem  [FEATURE] Added model wide validations.  #640 . Thanks to tremby  [FEATURE]  findOrCreate  now returns an additional flag ( created ), that is true if a model was created, and false if it was found  #648 . janmeier  [FEATURE] Field and table comments for MySQL and PG.  #523 . MySQL by iamjochen. PG by janmeier  [FEATURE] BigInts can now be used for autoincrement/serial columns.  #673 . thanks to sevastos  [FEATURE] Use moment for better postgres timestamp strings.  #710 . Thanks to seth-admittedly  [FEATURE] Keep milliseconds in timestamps for postgres.  #712 . Thanks to seth-admittedly  [FEATURE] You can now set lingo's language through Sequelize.  #713 . Thanks to durango  [FEATURE] Added a  findAndCountAll , useful for pagination.  #533 . Thanks to iamjochen  [FEATURE] Made explicit migrations possible.  #728 . Thanks to freezy  [FEATURE] Added support for where clauses containing !=,   etc. and support for date ranges   #727 . Thanks to durango  [FEATURE] Added support for model instances being referenced  #761  thanks to sdepold  [FEATURE] Added support for specifying the path to load a module for a dialect.  #766  thanks to sonnym.  [FEATURE] Drop index if exists has been added to sqlite  #766  thanks to coderbuzz  [FEATURE] bulkCreate() now has a third argument which gives you the ability to validate each row before attempting to bulkInsert  #797 . thanks to durango  [FEATURE] Added  isDirty  to model instances.  #798 . Thanks to mstorgaard  [FEATURE] Added possibility to use env variable for the database connection.  #784 . Thanks to sykopomp.  [FEATURE] Blob support. janmeier  [FEATURE] We can now define our own custom timestamp columns  #856 . thanks to durango  [FEATURE] Scopes.  #748 . durango  [FEATURE] Model#find() / Model#findAll() is now working with strings.  #855 . Thanks to whito.  [FEATURE] Shortcut method for getting a defined model.  #868 . Thanks to jwilm.  [FEATURE] Added Sequelize.fn() and Sequelize.col() to properly call columns and functions within Sequelize.  #882 . thanks to janmeier  [FEATURE] Sequelize.import supports relative paths.  #901 . thanks to accerqueira.  [FEATURE] Sequelize.import can now handle functions.  #911 . Thanks to davidrivera.  [FEATURE] Uses sequelize.fn and sequelize.col functionality to allow you to use the value of another column or a function when updating. It also allows you to use a function as a default value when supported (in sqlite and postgres).  #928 . thanks to janmeier  [FEATURE] Added possibility to pass options to node-mysql.  #929 . thanks to poying  [FEATURE] Triggers for Postgres.  #915 . Thanks to jonathana.  [FEATURE] Support for join tables.  #877 . Thanks to janmeier.  [FEATURE] Support for hooks.  #894 . Thanks to durango.  [FEATURE] Support for literals and casts.  #950 . Thanks to durango.  [FEATURE] Model#findOrBuild.  #960 . Thanks to durango.  [FEATURE] Support for MariaDB.  #948 . Thanks to reedog117 and janmeier.  [FEATURE] Filter through associations.  #991 . Thanks to snit-ram.  [FEATURE] Possibility to disable loging for .sync  #937 . Thanks to durango  [FEATURE] Support for transactions.  1062 .  [REFACTORING] hasMany now uses a single SQL statement when creating and destroying associations, instead of removing each association seperately  690 . Inspired by  #104 . janmeier  [REFACTORING] Consistent handling of offset across dialects. Offset is now always applied, and limit is set to max table size of not limit is given  #725 . janmeier  [REFACTORING] Moved Jasmine to Buster and then Buster to Mocha + Chai. sdepold and durango", 
            "title": "v1.7.0-beta1"
        }, 
        {
            "location": "/changelog/#v160", 
            "text": "[DEPENDENCIES] upgrade mysql to alpha7. You  MUST  use this version or newer for DATETIMEs to work  [DEPENDENCIES] upgraded most dependencies. most important: mysql was upgraded to 2.0.0-alpha-3  [DEPENDENCIES] mysql is now an optional dependency. #355 (thanks to clkao)  [REFACTORING] separated tests for dialects  [REFACTORING] reduced number of sql queries used for adding an element to a N:M association. #449 (thanks to innofluence/janmeier)  [REFACTORING] dropped support for synchronous migrations. added third parameter which needs to get called once the migration has been finished. also this adds support for asynchronous actions in migrations.  [OTHERS] code was formatted to fit the latest code style guidelines (thanks to durango)  [OTHERS] Explicitly target ./docs folder for generate-docs script. #444 (thanks to carsondarling)  [OTHERS] Overwrite existing daoFactoryDefinition if there already has been one. (thanks to robraux)  [BUG] fixed wrong version in sequelize binary  [BUG] local options have higher priority than global options (thanks to guersam)  [BUG] fixed where clause when passing an empty array (thanks to kbackowski)  [BUG] fixed updateAttributes for models/tables without primary key (thanks to durango)  [BUG] fixed the location of the foreign key when using belongsTo (thanks to ricardograca)  [BUG] don't return timestamps if only specific attributes have been seleceted (thanks to ricardograca)  [BUG] fixed removeColumn for sqlite  [BUG] fixed date equality check for instances. (thanks to solotimes)  [FEATURE] added association prefetching /eager loading for find and findAll. #465  [FEATURE] it's now possible to use callbacks of async functions inside migrations (thanks to mphilpot)  [FEATURE] improved comfort of sequelize.query. just pass an sql string to it and wait for the result  [FEATURE] Migrations now understand NODE_ENV (thanks to gavri)  [FEATURE] Performance improvements (thanks to Mick-Hansen and janmeier from innofluence)  [FEATURE] Model.find and Model.findAll can now take a String with an ID. (thanks to ghernandez345)  [FEATURE] Compatibility for JSON-like strings in Postgres (thanks to aslakhellesoy)  [FEATURE] honor maxConcurrentQueries option (thanks to dchester)  [FEATURE] added support for stored procedures (inspired by wuyuntao)  [FEATURE] added possibility to use pg lib's native api (thanks to denysonique)  [FEATURE] added possibility to define the attributes of received associations (thanks to joshm)  [FEATURE] added findOrCreate, which returns a the already existing instance or creates one (thanks to eveiga)  [FEATURE] minConnections option for MySQL pooling (thanks to dominiklessel)  [FEATURE] added BIGINT data type which is treated like a string (thanks to adamsch1)  [FEATURE] experimental support for read replication for mysql (thanks to Janzeh)  [FEATURE] allow definition of a models table name (thanks to slamkajs)  [FEATURE] allow usage of enums. #440 (thanks to KevinMartin)  [FEATURE] allows updateAttributes to target specific fields only (thanks to Pasvaz)  [FEATURE] timestamps are now stored as UTC. #461 (thanks to innofluence/janmeier)  [FEATURE] results of raw queries are parsed with dottie. #468 (thanks to kozze89)  [FEATURE] support for array serialization. pg only. #443 (thanks to clkao)  [FEATURE] add increment and decrement methods on dao. #408 (thanks to janmeier/innofluence)  [FEATURE] unified the result of describeTable  [FEATURE] add support for decimals (thanks to alexyoung)  [FEATURE] added DAO.reload(), which updates the attributes of the DAO in-place (as opposed to doing having to do a find() and returning a new model)", 
            "title": "v1.6.0"
        }, 
        {
            "location": "/changelog/#v150", 
            "text": "[REFACTORING] use underscore functions for Utils.isHash (thanks to Mick-Hansen/innofluence)  [REFACTORING] removed the 'failure' event and replaced it with 'error'  [BUG] fixed booleans for sqlite (thanks to vlmonk)  [BUG] obsolete reference attribute for many-to-many associations are removed correctly  [BUG] associations can be cleared via passing null to the set method  [BUG] \"fixed\" quota handling (thanks to dgf)  [BUG] fixed destroy in postgresql (thanks to robraux)  [FEATURE] added possibility to set protocol and to remove port from postgresql connection uri (thanks to danielschwartz)  [FEATURE] added possibility to not use a junction table for many-to-many associations on the same table (thanks to janmeier/innofluence)  [FEATURE] results of the  import  method is now cached (thanks to janmeier/innofluence)  [FEATURE] added possibility to check if a specific object or a whole bunch of objects is currently associated with another object (thanks to janmeier/innofluence)  [FEATURE] added possibility to globally disable adding of NULL values to sql queries (thanks to janmeier/innofluence)  [FEATURE] Model.create can now also be used to specify values for mass assignment (thanks to janmeier/innofluence)  [FEATURE] QueryChainer will now provide the results of the added emitters in the order the emitters have been added (thanks to LaurentZuijdwijk and me ;))  [FEATURE] QueryChainer can now be initialized with serial items  [FEATURE] node 0.8 compatibility  [FEATURE] added options to hasMany getters (thanks to janmeier/innofluence)  [FEATURE] pooling option is now correctly passed to postgres (thanks to megshark)", 
            "title": "v1.5.0"
        }, 
        {
            "location": "/changelog/#v141", 
            "text": "[DEPRECATION] Added deprecation warning for node   v0.6.  [FEATURE] added selective saving of instances (thanks to kioopi)  [FEATURE] added command to binary for creating a migration skeleton with current timestamp  [FEATURE] added  complete  function for each finder method (thanks to sstoiana)  [BUG] fixed quotation for sqlite statements (thanks to vlmonk)  [BUG] fixed timestamp parsing in migratios (thanks to grn)  [FEATURE] added consistent logging behaviour to postgres (thanks to reacuna)", 
            "title": "v1.4.1"
        }, 
        {
            "location": "/changelog/#v140", 
            "text": "[BUG] fixed booleans in sqlite (thanks to alexstrat)  [BUG] fixed forced sync of many-to-many associations (thanks to SirUli)  [FEATURE] objects are now compatible to JSON.stringify. (thanks to grayt0r)  [FEATURE] When instantiating the sequelize object, you can now pass a function to logging. This allows you to customize the logging behavior. Default is now: console.log (thanks to kenperkins)  [BUG] The default logging is still console.log but is wrapped after initialization as it crashes node   0.6.x.  [FEATURE] postgresql support. (thanks to swoodtke)  [FEATURE] connection-pooling for mysql. (thanks to megshark)  [FEATURE] added possibility to define NOW as default value for date data-types. Use Sequelize.NOW as defaultValue  [BUG] Fixed date handling in sqlite (thanks to iizukanao)", 
            "title": "v1.4.0"
        }, 
        {
            "location": "/changelog/#v137", 
            "text": "[BUG] fixed issue where multiple belongsTo or hasOne associations to the same table overwrite each other  [BUG] fixed memory leaks (thanks to megshark)", 
            "title": "v1.3.7"
        }, 
        {
            "location": "/changelog/#v136", 
            "text": "[BUG] don't update an existing updatedAt-attribute if timestamps option for a DAO is false", 
            "title": "v1.3.6"
        }, 
        {
            "location": "/changelog/#v135", 
            "text": "[BUG] fixed missed DAO renaming in migrations (thanks to nov)", 
            "title": "v1.3.5"
        }, 
        {
            "location": "/changelog/#v134", 
            "text": "[REFACTORING] renamed Model/ModelFactory/ModelFactoryManager to DAO/DAOFactory/DAOFactoryManager  [IMPROVEMENT]  npm test  will run the test suite (thanks to gabrielfalcao)  [IMPROVEMENT] documentation about setting up local development environment (thanks to gabrielfalcao)  [REFACTORING] removed updatedAt + createdAt from SequelizeMeta", 
            "title": "v1.3.4"
        }, 
        {
            "location": "/changelog/#v133", 
            "text": "[BUG] fixed sql-event emitter in all possible locations (thanks to megshark)", 
            "title": "v1.3.3"
        }, 
        {
            "location": "/changelog/#v132", 
            "text": "[FEATURE] sqlite is now emitting the 'sql'-event as well (thanks to megshark)", 
            "title": "v1.3.2"
        }, 
        {
            "location": "/changelog/#v131", 
            "text": "[REFACTORING] renamed ModelManager to ModelFactoryManager  [IMPROVEMENT] decreased delay of CustomEventEmitter execution from 5ms to 1ms  [IMPROVEMENT] improved performance of association handling (many-to-many) (thanks to magshark)  [FEATURE] added possibility to specify name of the join table (thanks to magshark)  [FEATURE] mysql is emitting a 'sql'-event when executing a query  [BUG] correctly delete existing SequelizeMeta entry from database after undoing migration  [BUG] fix path of migration files in executable (thanks to bcg)", 
            "title": "v1.3.1"
        }, 
        {
            "location": "/changelog/#v130", 
            "text": "[REFACTORING] Model#all is now a function and not a getter.  [REFACTORING] Renamed ModelDefinition to ModelFactory  [REFACTORING] Private method scoping; Attributes are still public  [REFACTORING] Use the new util module for node 0.6.2  [FEATURE] QueryChainer can now run serially  [FEATURE] Association definition is chainable: Person.hasOne(House).hasMany(Address)  [FEATURE] Validations (Thanks to  hiddentao )  [FEATURE] jQuery-like event listeners: .success(callback) and .error(callback)  [FEATURE] aliasing for select queries: Model.find({ where: 'id = 1', attributes: ['id', ['name', 'username']] }) ==  will return the user's name as username  [FEATURE] cross-database support. currently supported: mysql, sqlite  [FEATURE] migrations  [TEST] removed all expresso tests and converted them to jasmine", 
            "title": "v1.3.0"
        }, 
        {
            "location": "/changelog/#v121", 
            "text": "[REFACTORING] renamed the global options for sync, query and define on sequelize; before: options.queryOptions; now: options.query  [FEATURE] allow definition of charset via global define option in sequelize or via charset option in sequelize.define  [FEATURE] allow definition of mysql engine via global define option in sequelize or via engine option in sequelize.define; default is InnoDB now  [FEATURE] find and findAll will now search in a list of values via: Model.findAll({where: { id: [1,2,3] }}); will return all models with id 1, 2 and 3  [TEST] force latin1 charset for travis", 
            "title": "v1.2.1"
        }, 
        {
            "location": "/changelog/#v120", 
            "text": "[FEATURE] min/max function for models, which return the min/max value in a column  [FEATURE] getModel for modelManager for getting a model without storing it in a variable; use it via sequelize.modelManager.getModel('User')  [TEST] test suite refactoring for jasmine", 
            "title": "v1.2.0"
        }, 
        {
            "location": "/changelog/#v114", 
            "text": "[BUG] tables with identical prefix (e.g. wp_) can now be used in many-to-many associations", 
            "title": "v1.1.4"
        }, 
        {
            "location": "/changelog/#v113", 
            "text": "[BUG] scoped options in model =  a model can now have the attribute options  [FEATURE] added drop method for sequelize, that drops all currently registered tables", 
            "title": "v1.1.3"
        }, 
        {
            "location": "/changelog/#v112", 
            "text": "[BUG] prevent malfunction after being idle", 
            "title": "v1.1.2"
        }, 
        {
            "location": "/changelog/#v111", 
            "text": "[BUG] fixed memory leaks  [FEATURE] added query queueing (adjustable via maxConcurrentQueries in config; default: 50)", 
            "title": "v1.1.1"
        }, 
        {
            "location": "/changelog/#v110", 
            "text": "[BUG] defaultValue 0 is now working  [REMOVED] mysql-pool usage (will give it a new try later)  [CHORE] updated node-mysql to 0.9.4", 
            "title": "v1.1.0"
        }, 
        {
            "location": "/changelog/#v102", 
            "text": "[BUG] Fixed where clause generation for models with explicit primary keys (allanca)  [BUG] Set insertId for non-default auto increment fields (allanca)", 
            "title": "v1.0.2"
        }, 
        {
            "location": "/changelog/#v101", 
            "text": "[FEATURE] Added Model.count(callback), which returns the number of elements saved in the database  [BUG] Fixed self associations", 
            "title": "v1.0.1"
        }, 
        {
            "location": "/changelog/#v100", 
            "text": "complete rewrite  added new emitter syntax  sql injection protection  select now supports hash usage of where  select now supports array usage of where  added a lot of options to find/findAll  Wrapped queries correctly using  foo  using expresso 0.7.2  moved config for test database into seperated config file  Added method for adding and deleting single associations", 
            "title": "v1.0.0"
        }, 
        {
            "location": "/changelog/#v043", 
            "text": "renamed loadAssociatedData to fetchAssociations  renamed Model#associatedData to fetchedAssociations  added fetchAssociations to finder methods  store data found by finder method in the associatedData hash + grep them from there if reload is not forced  added option to sequelize constructor for disabling the pluralization of tablenames: disableTableNameModification  allow array as value for chainQueries =  Sequelize.chainQueries([save: [a,b,c]], callback)  remove the usage of an array =  Sequelize.chainQueries({save: a}, {destroy: b}, callback)", 
            "title": "v0.4.3"
        }, 
        {
            "location": "/changelog/#v042", 
            "text": "fixed bugs from 0.4.1  added the model instance method loadAssociatedData which adds the hash Model#associatedData to an instance which contains all associated data", 
            "title": "v0.4.2"
        }, 
        {
            "location": "/changelog/#v041", 
            "text": "THIS UPDATE CHANGES TABLE STRUCTURES MASSIVELY!   MAKE SURE TO DROP YOUR CURRENT TABLES AND LET THEM CREATE AGAIN!    names of many-to-many-association-tables are chosen from passed association names   foreign keys are chosen from passed association name  added many-to-many association on the same model  added hasManyAndBelongsTo  added hasOneAndBelongsTo  nodejs-mysql-native 0.4.2", 
            "title": "v0.4.1"
        }, 
        {
            "location": "/changelog/#v040", 
            "text": "added error handling when defining invalid database credentials  Sequelize#sync, Sequelize#drop, model#sync, model#drop returns errors via callback  code is now located under lib/sequelize to use it with nDistro  added possibility to use non default mysql database (host/port)  added error handling when defining invalid database port/host  schema definitions can now contain default values and null allowance  database credentials can now also contain an empty / no password", 
            "title": "v0.4.0"
        }, 
        {
            "location": "/changelog/#v030", 
            "text": "added possibility to define class and instance methods for models  added import method for loading model definition from a file", 
            "title": "v0.3.0"
        }, 
        {
            "location": "/changelog/#v026", 
            "text": "refactored Sequelize to fit CommonJS module conventions", 
            "title": "v0.2.6"
        }, 
        {
            "location": "/changelog/#v025", 
            "text": "added BOOLEAN type  added FLOAT type  fixed DATE type issue  fixed npm package", 
            "title": "v0.2.5"
        }, 
        {
            "location": "/changelog/#v024", 
            "text": "fixed bug when using cross associated tables (many to many associations)", 
            "title": "v0.2.4"
        }, 
        {
            "location": "/changelog/#v023", 
            "text": "added latest mysql connection library  fixed id handling on save  fixed text handling (varchar   255; text)  using the inflection library for naming tables more convenient  Sequelize.TEXT is now using MySQL datatype TEXT instead of varchar(4000)", 
            "title": "v0.2.3"
        }, 
        {
            "location": "/changelog/#v022", 
            "text": "released project as npm package", 
            "title": "v0.2.2"
        }, 
        {
            "location": "/changelog/#v021", 
            "text": "fixed date bug", 
            "title": "v0.2.1"
        }, 
        {
            "location": "/changelog/#v020", 
            "text": "added methods for setting associations  added method for chaining an arbitraty amount of queries", 
            "title": "v0.2.0"
        }, 
        {
            "location": "/changelog/#v010", 
            "text": "first stable version  implemented all basic functions  associations are working", 
            "title": "v0.1.0"
        }, 
        {
            "location": "/imprint/", 
            "text": "Imprint - Boring legal stuff for the rest of us.\n\n\nAs there are people who are suing for fun and glory, you can find the respective information about the author of the page right here. Have fun reading ...\n\n\nAUTHOR(S)\n\n\nMain author:\n\nSascha Depold\nUhlandstr. 122\n10717 Berlin\nsascha [at] depold [dot] com\n[plus] 49 152 [slash] 03878582\n\n\n\n\nINHALTLICHE VERANTWORTUNG\n\n\nIch \u00fcbernehme keine Haftung f\u00fcr ausgehende Links. \nDaher musst du dich bei Problemen an deren Betreiber wenden!", 
            "title": "Imprint"
        }, 
        {
            "location": "/imprint/#imprint-boring-legal-stuff-for-the-rest-of-us", 
            "text": "As there are people who are suing for fun and glory, you can find the respective information about the author of the page right here. Have fun reading ...", 
            "title": "Imprint - Boring legal stuff for the rest of us."
        }, 
        {
            "location": "/imprint/#authors", 
            "text": "Main author:\n\nSascha Depold\nUhlandstr. 122\n10717 Berlin\nsascha [at] depold [dot] com\n[plus] 49 152 [slash] 03878582", 
            "title": "AUTHOR(S)"
        }, 
        {
            "location": "/imprint/#inhaltliche-verantwortung", 
            "text": "Ich \u00fcbernehme keine Haftung f\u00fcr ausgehende Links. \nDaher musst du dich bei Problemen an deren Betreiber wenden!", 
            "title": "INHALTLICHE VERANTWORTUNG"
        }
    ]
}